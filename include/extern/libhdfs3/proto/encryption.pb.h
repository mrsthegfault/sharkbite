// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encryption.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_encryption_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_encryption_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "hdfs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_encryption_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_encryption_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_encryption_2eproto;
namespace Hdfs {
namespace Internal {
class CreateEncryptionZoneRequestProto;
class CreateEncryptionZoneRequestProtoDefaultTypeInternal;
extern CreateEncryptionZoneRequestProtoDefaultTypeInternal _CreateEncryptionZoneRequestProto_default_instance_;
class CreateEncryptionZoneResponseProto;
class CreateEncryptionZoneResponseProtoDefaultTypeInternal;
extern CreateEncryptionZoneResponseProtoDefaultTypeInternal _CreateEncryptionZoneResponseProto_default_instance_;
class EncryptionZoneProto;
class EncryptionZoneProtoDefaultTypeInternal;
extern EncryptionZoneProtoDefaultTypeInternal _EncryptionZoneProto_default_instance_;
class GetEZForPathRequestProto;
class GetEZForPathRequestProtoDefaultTypeInternal;
extern GetEZForPathRequestProtoDefaultTypeInternal _GetEZForPathRequestProto_default_instance_;
class GetEZForPathResponseProto;
class GetEZForPathResponseProtoDefaultTypeInternal;
extern GetEZForPathResponseProtoDefaultTypeInternal _GetEZForPathResponseProto_default_instance_;
class ListEncryptionZonesRequestProto;
class ListEncryptionZonesRequestProtoDefaultTypeInternal;
extern ListEncryptionZonesRequestProtoDefaultTypeInternal _ListEncryptionZonesRequestProto_default_instance_;
class ListEncryptionZonesResponseProto;
class ListEncryptionZonesResponseProtoDefaultTypeInternal;
extern ListEncryptionZonesResponseProtoDefaultTypeInternal _ListEncryptionZonesResponseProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template<> ::Hdfs::Internal::CreateEncryptionZoneRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateEncryptionZoneRequestProto>(Arena*);
template<> ::Hdfs::Internal::CreateEncryptionZoneResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateEncryptionZoneResponseProto>(Arena*);
template<> ::Hdfs::Internal::EncryptionZoneProto* Arena::CreateMaybeMessage<::Hdfs::Internal::EncryptionZoneProto>(Arena*);
template<> ::Hdfs::Internal::GetEZForPathRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetEZForPathRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetEZForPathResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetEZForPathResponseProto>(Arena*);
template<> ::Hdfs::Internal::ListEncryptionZonesRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListEncryptionZonesRequestProto>(Arena*);
template<> ::Hdfs::Internal::ListEncryptionZonesResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListEncryptionZonesResponseProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Hdfs {
namespace Internal {

// ===================================================================

class CreateEncryptionZoneRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateEncryptionZoneRequestProto) */ {
 public:
  CreateEncryptionZoneRequestProto();
  virtual ~CreateEncryptionZoneRequestProto();

  CreateEncryptionZoneRequestProto(const CreateEncryptionZoneRequestProto& from);
  CreateEncryptionZoneRequestProto(CreateEncryptionZoneRequestProto&& from) noexcept
    : CreateEncryptionZoneRequestProto() {
    *this = ::std::move(from);
  }

  inline CreateEncryptionZoneRequestProto& operator=(const CreateEncryptionZoneRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEncryptionZoneRequestProto& operator=(CreateEncryptionZoneRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEncryptionZoneRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEncryptionZoneRequestProto* internal_default_instance() {
    return reinterpret_cast<const CreateEncryptionZoneRequestProto*>(
               &_CreateEncryptionZoneRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateEncryptionZoneRequestProto& a, CreateEncryptionZoneRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEncryptionZoneRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEncryptionZoneRequestProto* New() const final {
    return CreateMaybeMessage<CreateEncryptionZoneRequestProto>(nullptr);
  }

  CreateEncryptionZoneRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEncryptionZoneRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEncryptionZoneRequestProto& from);
  void MergeFrom(const CreateEncryptionZoneRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEncryptionZoneRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateEncryptionZoneRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encryption_2eproto);
    return ::descriptor_table_encryption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kKeyNameFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // optional string keyName = 2;
  bool has_keyname() const;
  private:
  bool _internal_has_keyname() const;
  public:
  void clear_keyname();
  const std::string& keyname() const;
  void set_keyname(const std::string& value);
  void set_keyname(std::string&& value);
  void set_keyname(const char* value);
  void set_keyname(const char* value, size_t size);
  std::string* mutable_keyname();
  std::string* release_keyname();
  void set_allocated_keyname(std::string* keyname);
  private:
  const std::string& _internal_keyname() const;
  void _internal_set_keyname(const std::string& value);
  std::string* _internal_mutable_keyname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateEncryptionZoneRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyname_;
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class CreateEncryptionZoneResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateEncryptionZoneResponseProto) */ {
 public:
  CreateEncryptionZoneResponseProto();
  virtual ~CreateEncryptionZoneResponseProto();

  CreateEncryptionZoneResponseProto(const CreateEncryptionZoneResponseProto& from);
  CreateEncryptionZoneResponseProto(CreateEncryptionZoneResponseProto&& from) noexcept
    : CreateEncryptionZoneResponseProto() {
    *this = ::std::move(from);
  }

  inline CreateEncryptionZoneResponseProto& operator=(const CreateEncryptionZoneResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEncryptionZoneResponseProto& operator=(CreateEncryptionZoneResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEncryptionZoneResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEncryptionZoneResponseProto* internal_default_instance() {
    return reinterpret_cast<const CreateEncryptionZoneResponseProto*>(
               &_CreateEncryptionZoneResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateEncryptionZoneResponseProto& a, CreateEncryptionZoneResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEncryptionZoneResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEncryptionZoneResponseProto* New() const final {
    return CreateMaybeMessage<CreateEncryptionZoneResponseProto>(nullptr);
  }

  CreateEncryptionZoneResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEncryptionZoneResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEncryptionZoneResponseProto& from);
  void MergeFrom(const CreateEncryptionZoneResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEncryptionZoneResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateEncryptionZoneResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encryption_2eproto);
    return ::descriptor_table_encryption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateEncryptionZoneResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class ListEncryptionZonesRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListEncryptionZonesRequestProto) */ {
 public:
  ListEncryptionZonesRequestProto();
  virtual ~ListEncryptionZonesRequestProto();

  ListEncryptionZonesRequestProto(const ListEncryptionZonesRequestProto& from);
  ListEncryptionZonesRequestProto(ListEncryptionZonesRequestProto&& from) noexcept
    : ListEncryptionZonesRequestProto() {
    *this = ::std::move(from);
  }

  inline ListEncryptionZonesRequestProto& operator=(const ListEncryptionZonesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEncryptionZonesRequestProto& operator=(ListEncryptionZonesRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListEncryptionZonesRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListEncryptionZonesRequestProto* internal_default_instance() {
    return reinterpret_cast<const ListEncryptionZonesRequestProto*>(
               &_ListEncryptionZonesRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListEncryptionZonesRequestProto& a, ListEncryptionZonesRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEncryptionZonesRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListEncryptionZonesRequestProto* New() const final {
    return CreateMaybeMessage<ListEncryptionZonesRequestProto>(nullptr);
  }

  ListEncryptionZonesRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListEncryptionZonesRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListEncryptionZonesRequestProto& from);
  void MergeFrom(const ListEncryptionZonesRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEncryptionZonesRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListEncryptionZonesRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encryption_2eproto);
    return ::descriptor_table_encryption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListEncryptionZonesRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class EncryptionZoneProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.EncryptionZoneProto) */ {
 public:
  EncryptionZoneProto();
  virtual ~EncryptionZoneProto();

  EncryptionZoneProto(const EncryptionZoneProto& from);
  EncryptionZoneProto(EncryptionZoneProto&& from) noexcept
    : EncryptionZoneProto() {
    *this = ::std::move(from);
  }

  inline EncryptionZoneProto& operator=(const EncryptionZoneProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionZoneProto& operator=(EncryptionZoneProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptionZoneProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptionZoneProto* internal_default_instance() {
    return reinterpret_cast<const EncryptionZoneProto*>(
               &_EncryptionZoneProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EncryptionZoneProto& a, EncryptionZoneProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionZoneProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptionZoneProto* New() const final {
    return CreateMaybeMessage<EncryptionZoneProto>(nullptr);
  }

  EncryptionZoneProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptionZoneProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptionZoneProto& from);
  void MergeFrom(const EncryptionZoneProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptionZoneProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.EncryptionZoneProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encryption_2eproto);
    return ::descriptor_table_encryption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kKeyNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kSuiteFieldNumber = 3,
    kCryptoProtocolVersionFieldNumber = 4,
  };
  // required string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required string keyName = 5;
  bool has_keyname() const;
  private:
  bool _internal_has_keyname() const;
  public:
  void clear_keyname();
  const std::string& keyname() const;
  void set_keyname(const std::string& value);
  void set_keyname(std::string&& value);
  void set_keyname(const char* value);
  void set_keyname(const char* value, size_t size);
  std::string* mutable_keyname();
  std::string* release_keyname();
  void set_allocated_keyname(std::string* keyname);
  private:
  const std::string& _internal_keyname() const;
  void _internal_set_keyname(const std::string& value);
  std::string* _internal_mutable_keyname();
  public:

  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .Hdfs.Internal.CipherSuiteProto suite = 3;
  bool has_suite() const;
  private:
  bool _internal_has_suite() const;
  public:
  void clear_suite();
  ::Hdfs::Internal::CipherSuiteProto suite() const;
  void set_suite(::Hdfs::Internal::CipherSuiteProto value);
  private:
  ::Hdfs::Internal::CipherSuiteProto _internal_suite() const;
  void _internal_set_suite(::Hdfs::Internal::CipherSuiteProto value);
  public:

  // required .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 4;
  bool has_cryptoprotocolversion() const;
  private:
  bool _internal_has_cryptoprotocolversion() const;
  public:
  void clear_cryptoprotocolversion();
  ::Hdfs::Internal::CryptoProtocolVersionProto cryptoprotocolversion() const;
  void set_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value);
  private:
  ::Hdfs::Internal::CryptoProtocolVersionProto _internal_cryptoprotocolversion() const;
  void _internal_set_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.EncryptionZoneProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyname_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int suite_;
  int cryptoprotocolversion_;
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class ListEncryptionZonesResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListEncryptionZonesResponseProto) */ {
 public:
  ListEncryptionZonesResponseProto();
  virtual ~ListEncryptionZonesResponseProto();

  ListEncryptionZonesResponseProto(const ListEncryptionZonesResponseProto& from);
  ListEncryptionZonesResponseProto(ListEncryptionZonesResponseProto&& from) noexcept
    : ListEncryptionZonesResponseProto() {
    *this = ::std::move(from);
  }

  inline ListEncryptionZonesResponseProto& operator=(const ListEncryptionZonesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEncryptionZonesResponseProto& operator=(ListEncryptionZonesResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListEncryptionZonesResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListEncryptionZonesResponseProto* internal_default_instance() {
    return reinterpret_cast<const ListEncryptionZonesResponseProto*>(
               &_ListEncryptionZonesResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListEncryptionZonesResponseProto& a, ListEncryptionZonesResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEncryptionZonesResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListEncryptionZonesResponseProto* New() const final {
    return CreateMaybeMessage<ListEncryptionZonesResponseProto>(nullptr);
  }

  ListEncryptionZonesResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListEncryptionZonesResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListEncryptionZonesResponseProto& from);
  void MergeFrom(const ListEncryptionZonesResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEncryptionZonesResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListEncryptionZonesResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encryption_2eproto);
    return ::descriptor_table_encryption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZonesFieldNumber = 1,
    kHasMoreFieldNumber = 2,
  };
  // repeated .Hdfs.Internal.EncryptionZoneProto zones = 1;
  int zones_size() const;
  private:
  int _internal_zones_size() const;
  public:
  void clear_zones();
  ::Hdfs::Internal::EncryptionZoneProto* mutable_zones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::EncryptionZoneProto >*
      mutable_zones();
  private:
  const ::Hdfs::Internal::EncryptionZoneProto& _internal_zones(int index) const;
  ::Hdfs::Internal::EncryptionZoneProto* _internal_add_zones();
  public:
  const ::Hdfs::Internal::EncryptionZoneProto& zones(int index) const;
  ::Hdfs::Internal::EncryptionZoneProto* add_zones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::EncryptionZoneProto >&
      zones() const;

  // required bool hasMore = 2;
  bool has_hasmore() const;
  private:
  bool _internal_has_hasmore() const;
  public:
  void clear_hasmore();
  bool hasmore() const;
  void set_hasmore(bool value);
  private:
  bool _internal_hasmore() const;
  void _internal_set_hasmore(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListEncryptionZonesResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::EncryptionZoneProto > zones_;
  bool hasmore_;
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class GetEZForPathRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetEZForPathRequestProto) */ {
 public:
  GetEZForPathRequestProto();
  virtual ~GetEZForPathRequestProto();

  GetEZForPathRequestProto(const GetEZForPathRequestProto& from);
  GetEZForPathRequestProto(GetEZForPathRequestProto&& from) noexcept
    : GetEZForPathRequestProto() {
    *this = ::std::move(from);
  }

  inline GetEZForPathRequestProto& operator=(const GetEZForPathRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEZForPathRequestProto& operator=(GetEZForPathRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEZForPathRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEZForPathRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetEZForPathRequestProto*>(
               &_GetEZForPathRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetEZForPathRequestProto& a, GetEZForPathRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEZForPathRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEZForPathRequestProto* New() const final {
    return CreateMaybeMessage<GetEZForPathRequestProto>(nullptr);
  }

  GetEZForPathRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEZForPathRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEZForPathRequestProto& from);
  void MergeFrom(const GetEZForPathRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEZForPathRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetEZForPathRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encryption_2eproto);
    return ::descriptor_table_encryption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetEZForPathRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  friend struct ::TableStruct_encryption_2eproto;
};
// -------------------------------------------------------------------

class GetEZForPathResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetEZForPathResponseProto) */ {
 public:
  GetEZForPathResponseProto();
  virtual ~GetEZForPathResponseProto();

  GetEZForPathResponseProto(const GetEZForPathResponseProto& from);
  GetEZForPathResponseProto(GetEZForPathResponseProto&& from) noexcept
    : GetEZForPathResponseProto() {
    *this = ::std::move(from);
  }

  inline GetEZForPathResponseProto& operator=(const GetEZForPathResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEZForPathResponseProto& operator=(GetEZForPathResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEZForPathResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEZForPathResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetEZForPathResponseProto*>(
               &_GetEZForPathResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetEZForPathResponseProto& a, GetEZForPathResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEZForPathResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEZForPathResponseProto* New() const final {
    return CreateMaybeMessage<GetEZForPathResponseProto>(nullptr);
  }

  GetEZForPathResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEZForPathResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEZForPathResponseProto& from);
  void MergeFrom(const GetEZForPathResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEZForPathResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetEZForPathResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_encryption_2eproto);
    return ::descriptor_table_encryption_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneFieldNumber = 1,
  };
  // optional .Hdfs.Internal.EncryptionZoneProto zone = 1;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const ::Hdfs::Internal::EncryptionZoneProto& zone() const;
  ::Hdfs::Internal::EncryptionZoneProto* release_zone();
  ::Hdfs::Internal::EncryptionZoneProto* mutable_zone();
  void set_allocated_zone(::Hdfs::Internal::EncryptionZoneProto* zone);
  private:
  const ::Hdfs::Internal::EncryptionZoneProto& _internal_zone() const;
  ::Hdfs::Internal::EncryptionZoneProto* _internal_mutable_zone();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetEZForPathResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::EncryptionZoneProto* zone_;
  friend struct ::TableStruct_encryption_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateEncryptionZoneRequestProto

// required string src = 1;
inline bool CreateEncryptionZoneRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateEncryptionZoneRequestProto::has_src() const {
  return _internal_has_src();
}
inline void CreateEncryptionZoneRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateEncryptionZoneRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
  return _internal_src();
}
inline void CreateEncryptionZoneRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
}
inline std::string* CreateEncryptionZoneRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& CreateEncryptionZoneRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void CreateEncryptionZoneRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateEncryptionZoneRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
}
inline void CreateEncryptionZoneRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
}
inline void CreateEncryptionZoneRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
}
inline std::string* CreateEncryptionZoneRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateEncryptionZoneRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateEncryptionZoneRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateEncryptionZoneRequestProto.src)
}

// optional string keyName = 2;
inline bool CreateEncryptionZoneRequestProto::_internal_has_keyname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateEncryptionZoneRequestProto::has_keyname() const {
  return _internal_has_keyname();
}
inline void CreateEncryptionZoneRequestProto::clear_keyname() {
  keyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateEncryptionZoneRequestProto::keyname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
  return _internal_keyname();
}
inline void CreateEncryptionZoneRequestProto::set_keyname(const std::string& value) {
  _internal_set_keyname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
}
inline std::string* CreateEncryptionZoneRequestProto::mutable_keyname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
  return _internal_mutable_keyname();
}
inline const std::string& CreateEncryptionZoneRequestProto::_internal_keyname() const {
  return keyname_.GetNoArena();
}
inline void CreateEncryptionZoneRequestProto::_internal_set_keyname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateEncryptionZoneRequestProto::set_keyname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
}
inline void CreateEncryptionZoneRequestProto::set_keyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
}
inline void CreateEncryptionZoneRequestProto::set_keyname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
}
inline std::string* CreateEncryptionZoneRequestProto::_internal_mutable_keyname() {
  _has_bits_[0] |= 0x00000002u;
  return keyname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateEncryptionZoneRequestProto::release_keyname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
  if (!_internal_has_keyname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return keyname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateEncryptionZoneRequestProto::set_allocated_keyname(std::string* keyname) {
  if (keyname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  keyname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateEncryptionZoneRequestProto.keyName)
}

// -------------------------------------------------------------------

// CreateEncryptionZoneResponseProto

// -------------------------------------------------------------------

// ListEncryptionZonesRequestProto

// required int64 id = 1;
inline bool ListEncryptionZonesRequestProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListEncryptionZonesRequestProto::has_id() const {
  return _internal_has_id();
}
inline void ListEncryptionZonesRequestProto::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListEncryptionZonesRequestProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListEncryptionZonesRequestProto::id() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListEncryptionZonesRequestProto.id)
  return _internal_id();
}
inline void ListEncryptionZonesRequestProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ListEncryptionZonesRequestProto::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListEncryptionZonesRequestProto.id)
}

// -------------------------------------------------------------------

// EncryptionZoneProto

// required int64 id = 1;
inline bool EncryptionZoneProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EncryptionZoneProto::has_id() const {
  return _internal_has_id();
}
inline void EncryptionZoneProto::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EncryptionZoneProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EncryptionZoneProto::id() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.EncryptionZoneProto.id)
  return _internal_id();
}
inline void EncryptionZoneProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void EncryptionZoneProto::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.EncryptionZoneProto.id)
}

// required string path = 2;
inline bool EncryptionZoneProto::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EncryptionZoneProto::has_path() const {
  return _internal_has_path();
}
inline void EncryptionZoneProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptionZoneProto::path() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.EncryptionZoneProto.path)
  return _internal_path();
}
inline void EncryptionZoneProto::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.EncryptionZoneProto.path)
}
inline std::string* EncryptionZoneProto::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.EncryptionZoneProto.path)
  return _internal_mutable_path();
}
inline const std::string& EncryptionZoneProto::_internal_path() const {
  return path_.GetNoArena();
}
inline void EncryptionZoneProto::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncryptionZoneProto::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.EncryptionZoneProto.path)
}
inline void EncryptionZoneProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.EncryptionZoneProto.path)
}
inline void EncryptionZoneProto::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.EncryptionZoneProto.path)
}
inline std::string* EncryptionZoneProto::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionZoneProto::release_path() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.EncryptionZoneProto.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionZoneProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.EncryptionZoneProto.path)
}

// required .Hdfs.Internal.CipherSuiteProto suite = 3;
inline bool EncryptionZoneProto::_internal_has_suite() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EncryptionZoneProto::has_suite() const {
  return _internal_has_suite();
}
inline void EncryptionZoneProto::clear_suite() {
  suite_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Hdfs::Internal::CipherSuiteProto EncryptionZoneProto::_internal_suite() const {
  return static_cast< ::Hdfs::Internal::CipherSuiteProto >(suite_);
}
inline ::Hdfs::Internal::CipherSuiteProto EncryptionZoneProto::suite() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.EncryptionZoneProto.suite)
  return _internal_suite();
}
inline void EncryptionZoneProto::_internal_set_suite(::Hdfs::Internal::CipherSuiteProto value) {
  assert(::Hdfs::Internal::CipherSuiteProto_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  suite_ = value;
}
inline void EncryptionZoneProto::set_suite(::Hdfs::Internal::CipherSuiteProto value) {
  _internal_set_suite(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.EncryptionZoneProto.suite)
}

// required .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 4;
inline bool EncryptionZoneProto::_internal_has_cryptoprotocolversion() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EncryptionZoneProto::has_cryptoprotocolversion() const {
  return _internal_has_cryptoprotocolversion();
}
inline void EncryptionZoneProto::clear_cryptoprotocolversion() {
  cryptoprotocolversion_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Hdfs::Internal::CryptoProtocolVersionProto EncryptionZoneProto::_internal_cryptoprotocolversion() const {
  return static_cast< ::Hdfs::Internal::CryptoProtocolVersionProto >(cryptoprotocolversion_);
}
inline ::Hdfs::Internal::CryptoProtocolVersionProto EncryptionZoneProto::cryptoprotocolversion() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.EncryptionZoneProto.cryptoProtocolVersion)
  return _internal_cryptoprotocolversion();
}
inline void EncryptionZoneProto::_internal_set_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value) {
  assert(::Hdfs::Internal::CryptoProtocolVersionProto_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  cryptoprotocolversion_ = value;
}
inline void EncryptionZoneProto::set_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value) {
  _internal_set_cryptoprotocolversion(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.EncryptionZoneProto.cryptoProtocolVersion)
}

// required string keyName = 5;
inline bool EncryptionZoneProto::_internal_has_keyname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EncryptionZoneProto::has_keyname() const {
  return _internal_has_keyname();
}
inline void EncryptionZoneProto::clear_keyname() {
  keyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EncryptionZoneProto::keyname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.EncryptionZoneProto.keyName)
  return _internal_keyname();
}
inline void EncryptionZoneProto::set_keyname(const std::string& value) {
  _internal_set_keyname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.EncryptionZoneProto.keyName)
}
inline std::string* EncryptionZoneProto::mutable_keyname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.EncryptionZoneProto.keyName)
  return _internal_mutable_keyname();
}
inline const std::string& EncryptionZoneProto::_internal_keyname() const {
  return keyname_.GetNoArena();
}
inline void EncryptionZoneProto::_internal_set_keyname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncryptionZoneProto::set_keyname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.EncryptionZoneProto.keyName)
}
inline void EncryptionZoneProto::set_keyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.EncryptionZoneProto.keyName)
}
inline void EncryptionZoneProto::set_keyname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  keyname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.EncryptionZoneProto.keyName)
}
inline std::string* EncryptionZoneProto::_internal_mutable_keyname() {
  _has_bits_[0] |= 0x00000002u;
  return keyname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionZoneProto::release_keyname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.EncryptionZoneProto.keyName)
  if (!_internal_has_keyname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return keyname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionZoneProto::set_allocated_keyname(std::string* keyname) {
  if (keyname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  keyname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.EncryptionZoneProto.keyName)
}

// -------------------------------------------------------------------

// ListEncryptionZonesResponseProto

// repeated .Hdfs.Internal.EncryptionZoneProto zones = 1;
inline int ListEncryptionZonesResponseProto::_internal_zones_size() const {
  return zones_.size();
}
inline int ListEncryptionZonesResponseProto::zones_size() const {
  return _internal_zones_size();
}
inline void ListEncryptionZonesResponseProto::clear_zones() {
  zones_.Clear();
}
inline ::Hdfs::Internal::EncryptionZoneProto* ListEncryptionZonesResponseProto::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListEncryptionZonesResponseProto.zones)
  return zones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::EncryptionZoneProto >*
ListEncryptionZonesResponseProto::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.ListEncryptionZonesResponseProto.zones)
  return &zones_;
}
inline const ::Hdfs::Internal::EncryptionZoneProto& ListEncryptionZonesResponseProto::_internal_zones(int index) const {
  return zones_.Get(index);
}
inline const ::Hdfs::Internal::EncryptionZoneProto& ListEncryptionZonesResponseProto::zones(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListEncryptionZonesResponseProto.zones)
  return _internal_zones(index);
}
inline ::Hdfs::Internal::EncryptionZoneProto* ListEncryptionZonesResponseProto::_internal_add_zones() {
  return zones_.Add();
}
inline ::Hdfs::Internal::EncryptionZoneProto* ListEncryptionZonesResponseProto::add_zones() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.ListEncryptionZonesResponseProto.zones)
  return _internal_add_zones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::EncryptionZoneProto >&
ListEncryptionZonesResponseProto::zones() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.ListEncryptionZonesResponseProto.zones)
  return zones_;
}

// required bool hasMore = 2;
inline bool ListEncryptionZonesResponseProto::_internal_has_hasmore() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListEncryptionZonesResponseProto::has_hasmore() const {
  return _internal_has_hasmore();
}
inline void ListEncryptionZonesResponseProto::clear_hasmore() {
  hasmore_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ListEncryptionZonesResponseProto::_internal_hasmore() const {
  return hasmore_;
}
inline bool ListEncryptionZonesResponseProto::hasmore() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListEncryptionZonesResponseProto.hasMore)
  return _internal_hasmore();
}
inline void ListEncryptionZonesResponseProto::_internal_set_hasmore(bool value) {
  _has_bits_[0] |= 0x00000001u;
  hasmore_ = value;
}
inline void ListEncryptionZonesResponseProto::set_hasmore(bool value) {
  _internal_set_hasmore(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListEncryptionZonesResponseProto.hasMore)
}

// -------------------------------------------------------------------

// GetEZForPathRequestProto

// required string src = 1;
inline bool GetEZForPathRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetEZForPathRequestProto::has_src() const {
  return _internal_has_src();
}
inline void GetEZForPathRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetEZForPathRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetEZForPathRequestProto.src)
  return _internal_src();
}
inline void GetEZForPathRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetEZForPathRequestProto.src)
}
inline std::string* GetEZForPathRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetEZForPathRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& GetEZForPathRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void GetEZForPathRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetEZForPathRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetEZForPathRequestProto.src)
}
inline void GetEZForPathRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetEZForPathRequestProto.src)
}
inline void GetEZForPathRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetEZForPathRequestProto.src)
}
inline std::string* GetEZForPathRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEZForPathRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetEZForPathRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEZForPathRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetEZForPathRequestProto.src)
}

// -------------------------------------------------------------------

// GetEZForPathResponseProto

// optional .Hdfs.Internal.EncryptionZoneProto zone = 1;
inline bool GetEZForPathResponseProto::_internal_has_zone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || zone_ != nullptr);
  return value;
}
inline bool GetEZForPathResponseProto::has_zone() const {
  return _internal_has_zone();
}
inline void GetEZForPathResponseProto::clear_zone() {
  if (zone_ != nullptr) zone_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::EncryptionZoneProto& GetEZForPathResponseProto::_internal_zone() const {
  const ::Hdfs::Internal::EncryptionZoneProto* p = zone_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::EncryptionZoneProto*>(
      &::Hdfs::Internal::_EncryptionZoneProto_default_instance_);
}
inline const ::Hdfs::Internal::EncryptionZoneProto& GetEZForPathResponseProto::zone() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetEZForPathResponseProto.zone)
  return _internal_zone();
}
inline ::Hdfs::Internal::EncryptionZoneProto* GetEZForPathResponseProto::release_zone() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetEZForPathResponseProto.zone)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::EncryptionZoneProto* temp = zone_;
  zone_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::EncryptionZoneProto* GetEZForPathResponseProto::_internal_mutable_zone() {
  _has_bits_[0] |= 0x00000001u;
  if (zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::EncryptionZoneProto>(GetArenaNoVirtual());
    zone_ = p;
  }
  return zone_;
}
inline ::Hdfs::Internal::EncryptionZoneProto* GetEZForPathResponseProto::mutable_zone() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetEZForPathResponseProto.zone)
  return _internal_mutable_zone();
}
inline void GetEZForPathResponseProto::set_allocated_zone(::Hdfs::Internal::EncryptionZoneProto* zone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zone_;
  }
  if (zone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zone, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  zone_ = zone;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetEZForPathResponseProto.zone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_encryption_2eproto
