// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientNamenodeProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientNamenodeProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ClientNamenodeProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "hdfs.pb.h"
#include "Security.pb.h"
#include "encryption.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientNamenodeProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientNamenodeProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[131]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientNamenodeProtocol_2eproto;
namespace Hdfs {
namespace Internal {
class AbandonBlockRequestProto;
class AbandonBlockRequestProtoDefaultTypeInternal;
extern AbandonBlockRequestProtoDefaultTypeInternal _AbandonBlockRequestProto_default_instance_;
class AbandonBlockResponseProto;
class AbandonBlockResponseProtoDefaultTypeInternal;
extern AbandonBlockResponseProtoDefaultTypeInternal _AbandonBlockResponseProto_default_instance_;
class AddBlockRequestProto;
class AddBlockRequestProtoDefaultTypeInternal;
extern AddBlockRequestProtoDefaultTypeInternal _AddBlockRequestProto_default_instance_;
class AddBlockResponseProto;
class AddBlockResponseProtoDefaultTypeInternal;
extern AddBlockResponseProtoDefaultTypeInternal _AddBlockResponseProto_default_instance_;
class AddCacheDirectiveRequestProto;
class AddCacheDirectiveRequestProtoDefaultTypeInternal;
extern AddCacheDirectiveRequestProtoDefaultTypeInternal _AddCacheDirectiveRequestProto_default_instance_;
class AddCacheDirectiveResponseProto;
class AddCacheDirectiveResponseProtoDefaultTypeInternal;
extern AddCacheDirectiveResponseProtoDefaultTypeInternal _AddCacheDirectiveResponseProto_default_instance_;
class AddCachePoolRequestProto;
class AddCachePoolRequestProtoDefaultTypeInternal;
extern AddCachePoolRequestProtoDefaultTypeInternal _AddCachePoolRequestProto_default_instance_;
class AddCachePoolResponseProto;
class AddCachePoolResponseProtoDefaultTypeInternal;
extern AddCachePoolResponseProtoDefaultTypeInternal _AddCachePoolResponseProto_default_instance_;
class AllowSnapshotRequestProto;
class AllowSnapshotRequestProtoDefaultTypeInternal;
extern AllowSnapshotRequestProtoDefaultTypeInternal _AllowSnapshotRequestProto_default_instance_;
class AllowSnapshotResponseProto;
class AllowSnapshotResponseProtoDefaultTypeInternal;
extern AllowSnapshotResponseProtoDefaultTypeInternal _AllowSnapshotResponseProto_default_instance_;
class AppendRequestProto;
class AppendRequestProtoDefaultTypeInternal;
extern AppendRequestProtoDefaultTypeInternal _AppendRequestProto_default_instance_;
class AppendResponseProto;
class AppendResponseProtoDefaultTypeInternal;
extern AppendResponseProtoDefaultTypeInternal _AppendResponseProto_default_instance_;
class CacheDirectiveEntryProto;
class CacheDirectiveEntryProtoDefaultTypeInternal;
extern CacheDirectiveEntryProtoDefaultTypeInternal _CacheDirectiveEntryProto_default_instance_;
class CacheDirectiveInfoExpirationProto;
class CacheDirectiveInfoExpirationProtoDefaultTypeInternal;
extern CacheDirectiveInfoExpirationProtoDefaultTypeInternal _CacheDirectiveInfoExpirationProto_default_instance_;
class CacheDirectiveInfoProto;
class CacheDirectiveInfoProtoDefaultTypeInternal;
extern CacheDirectiveInfoProtoDefaultTypeInternal _CacheDirectiveInfoProto_default_instance_;
class CacheDirectiveStatsProto;
class CacheDirectiveStatsProtoDefaultTypeInternal;
extern CacheDirectiveStatsProtoDefaultTypeInternal _CacheDirectiveStatsProto_default_instance_;
class CachePoolEntryProto;
class CachePoolEntryProtoDefaultTypeInternal;
extern CachePoolEntryProtoDefaultTypeInternal _CachePoolEntryProto_default_instance_;
class CachePoolInfoProto;
class CachePoolInfoProtoDefaultTypeInternal;
extern CachePoolInfoProtoDefaultTypeInternal _CachePoolInfoProto_default_instance_;
class CachePoolStatsProto;
class CachePoolStatsProtoDefaultTypeInternal;
extern CachePoolStatsProtoDefaultTypeInternal _CachePoolStatsProto_default_instance_;
class CompleteRequestProto;
class CompleteRequestProtoDefaultTypeInternal;
extern CompleteRequestProtoDefaultTypeInternal _CompleteRequestProto_default_instance_;
class CompleteResponseProto;
class CompleteResponseProtoDefaultTypeInternal;
extern CompleteResponseProtoDefaultTypeInternal _CompleteResponseProto_default_instance_;
class ConcatRequestProto;
class ConcatRequestProtoDefaultTypeInternal;
extern ConcatRequestProtoDefaultTypeInternal _ConcatRequestProto_default_instance_;
class ConcatResponseProto;
class ConcatResponseProtoDefaultTypeInternal;
extern ConcatResponseProtoDefaultTypeInternal _ConcatResponseProto_default_instance_;
class CreateRequestProto;
class CreateRequestProtoDefaultTypeInternal;
extern CreateRequestProtoDefaultTypeInternal _CreateRequestProto_default_instance_;
class CreateResponseProto;
class CreateResponseProtoDefaultTypeInternal;
extern CreateResponseProtoDefaultTypeInternal _CreateResponseProto_default_instance_;
class CreateSnapshotRequestProto;
class CreateSnapshotRequestProtoDefaultTypeInternal;
extern CreateSnapshotRequestProtoDefaultTypeInternal _CreateSnapshotRequestProto_default_instance_;
class CreateSnapshotResponseProto;
class CreateSnapshotResponseProtoDefaultTypeInternal;
extern CreateSnapshotResponseProtoDefaultTypeInternal _CreateSnapshotResponseProto_default_instance_;
class CreateSymlinkRequestProto;
class CreateSymlinkRequestProtoDefaultTypeInternal;
extern CreateSymlinkRequestProtoDefaultTypeInternal _CreateSymlinkRequestProto_default_instance_;
class CreateSymlinkResponseProto;
class CreateSymlinkResponseProtoDefaultTypeInternal;
extern CreateSymlinkResponseProtoDefaultTypeInternal _CreateSymlinkResponseProto_default_instance_;
class DeleteRequestProto;
class DeleteRequestProtoDefaultTypeInternal;
extern DeleteRequestProtoDefaultTypeInternal _DeleteRequestProto_default_instance_;
class DeleteResponseProto;
class DeleteResponseProtoDefaultTypeInternal;
extern DeleteResponseProtoDefaultTypeInternal _DeleteResponseProto_default_instance_;
class DeleteSnapshotRequestProto;
class DeleteSnapshotRequestProtoDefaultTypeInternal;
extern DeleteSnapshotRequestProtoDefaultTypeInternal _DeleteSnapshotRequestProto_default_instance_;
class DeleteSnapshotResponseProto;
class DeleteSnapshotResponseProtoDefaultTypeInternal;
extern DeleteSnapshotResponseProtoDefaultTypeInternal _DeleteSnapshotResponseProto_default_instance_;
class DisallowSnapshotRequestProto;
class DisallowSnapshotRequestProtoDefaultTypeInternal;
extern DisallowSnapshotRequestProtoDefaultTypeInternal _DisallowSnapshotRequestProto_default_instance_;
class DisallowSnapshotResponseProto;
class DisallowSnapshotResponseProtoDefaultTypeInternal;
extern DisallowSnapshotResponseProtoDefaultTypeInternal _DisallowSnapshotResponseProto_default_instance_;
class FinalizeUpgradeRequestProto;
class FinalizeUpgradeRequestProtoDefaultTypeInternal;
extern FinalizeUpgradeRequestProtoDefaultTypeInternal _FinalizeUpgradeRequestProto_default_instance_;
class FinalizeUpgradeResponseProto;
class FinalizeUpgradeResponseProtoDefaultTypeInternal;
extern FinalizeUpgradeResponseProtoDefaultTypeInternal _FinalizeUpgradeResponseProto_default_instance_;
class FsyncRequestProto;
class FsyncRequestProtoDefaultTypeInternal;
extern FsyncRequestProtoDefaultTypeInternal _FsyncRequestProto_default_instance_;
class FsyncResponseProto;
class FsyncResponseProtoDefaultTypeInternal;
extern FsyncResponseProtoDefaultTypeInternal _FsyncResponseProto_default_instance_;
class GetAdditionalDatanodeRequestProto;
class GetAdditionalDatanodeRequestProtoDefaultTypeInternal;
extern GetAdditionalDatanodeRequestProtoDefaultTypeInternal _GetAdditionalDatanodeRequestProto_default_instance_;
class GetAdditionalDatanodeResponseProto;
class GetAdditionalDatanodeResponseProtoDefaultTypeInternal;
extern GetAdditionalDatanodeResponseProtoDefaultTypeInternal _GetAdditionalDatanodeResponseProto_default_instance_;
class GetBlockLocationsRequestProto;
class GetBlockLocationsRequestProtoDefaultTypeInternal;
extern GetBlockLocationsRequestProtoDefaultTypeInternal _GetBlockLocationsRequestProto_default_instance_;
class GetBlockLocationsResponseProto;
class GetBlockLocationsResponseProtoDefaultTypeInternal;
extern GetBlockLocationsResponseProtoDefaultTypeInternal _GetBlockLocationsResponseProto_default_instance_;
class GetContentSummaryRequestProto;
class GetContentSummaryRequestProtoDefaultTypeInternal;
extern GetContentSummaryRequestProtoDefaultTypeInternal _GetContentSummaryRequestProto_default_instance_;
class GetContentSummaryResponseProto;
class GetContentSummaryResponseProtoDefaultTypeInternal;
extern GetContentSummaryResponseProtoDefaultTypeInternal _GetContentSummaryResponseProto_default_instance_;
class GetDataEncryptionKeyRequestProto;
class GetDataEncryptionKeyRequestProtoDefaultTypeInternal;
extern GetDataEncryptionKeyRequestProtoDefaultTypeInternal _GetDataEncryptionKeyRequestProto_default_instance_;
class GetDataEncryptionKeyResponseProto;
class GetDataEncryptionKeyResponseProtoDefaultTypeInternal;
extern GetDataEncryptionKeyResponseProtoDefaultTypeInternal _GetDataEncryptionKeyResponseProto_default_instance_;
class GetDatanodeReportRequestProto;
class GetDatanodeReportRequestProtoDefaultTypeInternal;
extern GetDatanodeReportRequestProtoDefaultTypeInternal _GetDatanodeReportRequestProto_default_instance_;
class GetDatanodeReportResponseProto;
class GetDatanodeReportResponseProtoDefaultTypeInternal;
extern GetDatanodeReportResponseProtoDefaultTypeInternal _GetDatanodeReportResponseProto_default_instance_;
class GetFileInfoRequestProto;
class GetFileInfoRequestProtoDefaultTypeInternal;
extern GetFileInfoRequestProtoDefaultTypeInternal _GetFileInfoRequestProto_default_instance_;
class GetFileInfoResponseProto;
class GetFileInfoResponseProtoDefaultTypeInternal;
extern GetFileInfoResponseProtoDefaultTypeInternal _GetFileInfoResponseProto_default_instance_;
class GetFileLinkInfoRequestProto;
class GetFileLinkInfoRequestProtoDefaultTypeInternal;
extern GetFileLinkInfoRequestProtoDefaultTypeInternal _GetFileLinkInfoRequestProto_default_instance_;
class GetFileLinkInfoResponseProto;
class GetFileLinkInfoResponseProtoDefaultTypeInternal;
extern GetFileLinkInfoResponseProtoDefaultTypeInternal _GetFileLinkInfoResponseProto_default_instance_;
class GetFsStatsResponseProto;
class GetFsStatsResponseProtoDefaultTypeInternal;
extern GetFsStatsResponseProtoDefaultTypeInternal _GetFsStatsResponseProto_default_instance_;
class GetFsStatusRequestProto;
class GetFsStatusRequestProtoDefaultTypeInternal;
extern GetFsStatusRequestProtoDefaultTypeInternal _GetFsStatusRequestProto_default_instance_;
class GetLeaseRequestProto;
class GetLeaseRequestProtoDefaultTypeInternal;
extern GetLeaseRequestProtoDefaultTypeInternal _GetLeaseRequestProto_default_instance_;
class GetLeaseResponseProto;
class GetLeaseResponseProtoDefaultTypeInternal;
extern GetLeaseResponseProtoDefaultTypeInternal _GetLeaseResponseProto_default_instance_;
class GetLinkTargetRequestProto;
class GetLinkTargetRequestProtoDefaultTypeInternal;
extern GetLinkTargetRequestProtoDefaultTypeInternal _GetLinkTargetRequestProto_default_instance_;
class GetLinkTargetResponseProto;
class GetLinkTargetResponseProtoDefaultTypeInternal;
extern GetLinkTargetResponseProtoDefaultTypeInternal _GetLinkTargetResponseProto_default_instance_;
class GetListingRequestProto;
class GetListingRequestProtoDefaultTypeInternal;
extern GetListingRequestProtoDefaultTypeInternal _GetListingRequestProto_default_instance_;
class GetListingResponseProto;
class GetListingResponseProtoDefaultTypeInternal;
extern GetListingResponseProtoDefaultTypeInternal _GetListingResponseProto_default_instance_;
class GetPreferredBlockSizeRequestProto;
class GetPreferredBlockSizeRequestProtoDefaultTypeInternal;
extern GetPreferredBlockSizeRequestProtoDefaultTypeInternal _GetPreferredBlockSizeRequestProto_default_instance_;
class GetPreferredBlockSizeResponseProto;
class GetPreferredBlockSizeResponseProtoDefaultTypeInternal;
extern GetPreferredBlockSizeResponseProtoDefaultTypeInternal _GetPreferredBlockSizeResponseProto_default_instance_;
class GetServerDefaultsRequestProto;
class GetServerDefaultsRequestProtoDefaultTypeInternal;
extern GetServerDefaultsRequestProtoDefaultTypeInternal _GetServerDefaultsRequestProto_default_instance_;
class GetServerDefaultsResponseProto;
class GetServerDefaultsResponseProtoDefaultTypeInternal;
extern GetServerDefaultsResponseProtoDefaultTypeInternal _GetServerDefaultsResponseProto_default_instance_;
class GetSnapshotDiffReportRequestProto;
class GetSnapshotDiffReportRequestProtoDefaultTypeInternal;
extern GetSnapshotDiffReportRequestProtoDefaultTypeInternal _GetSnapshotDiffReportRequestProto_default_instance_;
class GetSnapshotDiffReportResponseProto;
class GetSnapshotDiffReportResponseProtoDefaultTypeInternal;
extern GetSnapshotDiffReportResponseProtoDefaultTypeInternal _GetSnapshotDiffReportResponseProto_default_instance_;
class GetSnapshottableDirListingRequestProto;
class GetSnapshottableDirListingRequestProtoDefaultTypeInternal;
extern GetSnapshottableDirListingRequestProtoDefaultTypeInternal _GetSnapshottableDirListingRequestProto_default_instance_;
class GetSnapshottableDirListingResponseProto;
class GetSnapshottableDirListingResponseProtoDefaultTypeInternal;
extern GetSnapshottableDirListingResponseProtoDefaultTypeInternal _GetSnapshottableDirListingResponseProto_default_instance_;
class IsFileClosedRequestProto;
class IsFileClosedRequestProtoDefaultTypeInternal;
extern IsFileClosedRequestProtoDefaultTypeInternal _IsFileClosedRequestProto_default_instance_;
class IsFileClosedResponseProto;
class IsFileClosedResponseProtoDefaultTypeInternal;
extern IsFileClosedResponseProtoDefaultTypeInternal _IsFileClosedResponseProto_default_instance_;
class ListCacheDirectivesRequestProto;
class ListCacheDirectivesRequestProtoDefaultTypeInternal;
extern ListCacheDirectivesRequestProtoDefaultTypeInternal _ListCacheDirectivesRequestProto_default_instance_;
class ListCacheDirectivesResponseProto;
class ListCacheDirectivesResponseProtoDefaultTypeInternal;
extern ListCacheDirectivesResponseProtoDefaultTypeInternal _ListCacheDirectivesResponseProto_default_instance_;
class ListCachePoolsRequestProto;
class ListCachePoolsRequestProtoDefaultTypeInternal;
extern ListCachePoolsRequestProtoDefaultTypeInternal _ListCachePoolsRequestProto_default_instance_;
class ListCachePoolsResponseProto;
class ListCachePoolsResponseProtoDefaultTypeInternal;
extern ListCachePoolsResponseProtoDefaultTypeInternal _ListCachePoolsResponseProto_default_instance_;
class ListCorruptFileBlocksRequestProto;
class ListCorruptFileBlocksRequestProtoDefaultTypeInternal;
extern ListCorruptFileBlocksRequestProtoDefaultTypeInternal _ListCorruptFileBlocksRequestProto_default_instance_;
class ListCorruptFileBlocksResponseProto;
class ListCorruptFileBlocksResponseProtoDefaultTypeInternal;
extern ListCorruptFileBlocksResponseProtoDefaultTypeInternal _ListCorruptFileBlocksResponseProto_default_instance_;
class MetaSaveRequestProto;
class MetaSaveRequestProtoDefaultTypeInternal;
extern MetaSaveRequestProtoDefaultTypeInternal _MetaSaveRequestProto_default_instance_;
class MetaSaveResponseProto;
class MetaSaveResponseProtoDefaultTypeInternal;
extern MetaSaveResponseProtoDefaultTypeInternal _MetaSaveResponseProto_default_instance_;
class MkdirsRequestProto;
class MkdirsRequestProtoDefaultTypeInternal;
extern MkdirsRequestProtoDefaultTypeInternal _MkdirsRequestProto_default_instance_;
class MkdirsResponseProto;
class MkdirsResponseProtoDefaultTypeInternal;
extern MkdirsResponseProtoDefaultTypeInternal _MkdirsResponseProto_default_instance_;
class ModifyCacheDirectiveRequestProto;
class ModifyCacheDirectiveRequestProtoDefaultTypeInternal;
extern ModifyCacheDirectiveRequestProtoDefaultTypeInternal _ModifyCacheDirectiveRequestProto_default_instance_;
class ModifyCacheDirectiveResponseProto;
class ModifyCacheDirectiveResponseProtoDefaultTypeInternal;
extern ModifyCacheDirectiveResponseProtoDefaultTypeInternal _ModifyCacheDirectiveResponseProto_default_instance_;
class ModifyCachePoolRequestProto;
class ModifyCachePoolRequestProtoDefaultTypeInternal;
extern ModifyCachePoolRequestProtoDefaultTypeInternal _ModifyCachePoolRequestProto_default_instance_;
class ModifyCachePoolResponseProto;
class ModifyCachePoolResponseProtoDefaultTypeInternal;
extern ModifyCachePoolResponseProtoDefaultTypeInternal _ModifyCachePoolResponseProto_default_instance_;
class RecoverLeaseRequestProto;
class RecoverLeaseRequestProtoDefaultTypeInternal;
extern RecoverLeaseRequestProtoDefaultTypeInternal _RecoverLeaseRequestProto_default_instance_;
class RecoverLeaseResponseProto;
class RecoverLeaseResponseProtoDefaultTypeInternal;
extern RecoverLeaseResponseProtoDefaultTypeInternal _RecoverLeaseResponseProto_default_instance_;
class RefreshNodesRequestProto;
class RefreshNodesRequestProtoDefaultTypeInternal;
extern RefreshNodesRequestProtoDefaultTypeInternal _RefreshNodesRequestProto_default_instance_;
class RefreshNodesResponseProto;
class RefreshNodesResponseProtoDefaultTypeInternal;
extern RefreshNodesResponseProtoDefaultTypeInternal _RefreshNodesResponseProto_default_instance_;
class ReleaseLeaseRequestProto;
class ReleaseLeaseRequestProtoDefaultTypeInternal;
extern ReleaseLeaseRequestProtoDefaultTypeInternal _ReleaseLeaseRequestProto_default_instance_;
class ReleaseLeaseResponseProto;
class ReleaseLeaseResponseProtoDefaultTypeInternal;
extern ReleaseLeaseResponseProtoDefaultTypeInternal _ReleaseLeaseResponseProto_default_instance_;
class RemoveCacheDirectiveRequestProto;
class RemoveCacheDirectiveRequestProtoDefaultTypeInternal;
extern RemoveCacheDirectiveRequestProtoDefaultTypeInternal _RemoveCacheDirectiveRequestProto_default_instance_;
class RemoveCacheDirectiveResponseProto;
class RemoveCacheDirectiveResponseProtoDefaultTypeInternal;
extern RemoveCacheDirectiveResponseProtoDefaultTypeInternal _RemoveCacheDirectiveResponseProto_default_instance_;
class RemoveCachePoolRequestProto;
class RemoveCachePoolRequestProtoDefaultTypeInternal;
extern RemoveCachePoolRequestProtoDefaultTypeInternal _RemoveCachePoolRequestProto_default_instance_;
class RemoveCachePoolResponseProto;
class RemoveCachePoolResponseProtoDefaultTypeInternal;
extern RemoveCachePoolResponseProtoDefaultTypeInternal _RemoveCachePoolResponseProto_default_instance_;
class Rename2RequestProto;
class Rename2RequestProtoDefaultTypeInternal;
extern Rename2RequestProtoDefaultTypeInternal _Rename2RequestProto_default_instance_;
class Rename2ResponseProto;
class Rename2ResponseProtoDefaultTypeInternal;
extern Rename2ResponseProtoDefaultTypeInternal _Rename2ResponseProto_default_instance_;
class RenameRequestProto;
class RenameRequestProtoDefaultTypeInternal;
extern RenameRequestProtoDefaultTypeInternal _RenameRequestProto_default_instance_;
class RenameResponseProto;
class RenameResponseProtoDefaultTypeInternal;
extern RenameResponseProtoDefaultTypeInternal _RenameResponseProto_default_instance_;
class RenameSnapshotRequestProto;
class RenameSnapshotRequestProtoDefaultTypeInternal;
extern RenameSnapshotRequestProtoDefaultTypeInternal _RenameSnapshotRequestProto_default_instance_;
class RenameSnapshotResponseProto;
class RenameSnapshotResponseProtoDefaultTypeInternal;
extern RenameSnapshotResponseProtoDefaultTypeInternal _RenameSnapshotResponseProto_default_instance_;
class RenewLeaseRequestProto;
class RenewLeaseRequestProtoDefaultTypeInternal;
extern RenewLeaseRequestProtoDefaultTypeInternal _RenewLeaseRequestProto_default_instance_;
class RenewLeaseResponseProto;
class RenewLeaseResponseProtoDefaultTypeInternal;
extern RenewLeaseResponseProtoDefaultTypeInternal _RenewLeaseResponseProto_default_instance_;
class ReportBadBlocksRequestProto;
class ReportBadBlocksRequestProtoDefaultTypeInternal;
extern ReportBadBlocksRequestProtoDefaultTypeInternal _ReportBadBlocksRequestProto_default_instance_;
class ReportBadBlocksResponseProto;
class ReportBadBlocksResponseProtoDefaultTypeInternal;
extern ReportBadBlocksResponseProtoDefaultTypeInternal _ReportBadBlocksResponseProto_default_instance_;
class RestoreFailedStorageRequestProto;
class RestoreFailedStorageRequestProtoDefaultTypeInternal;
extern RestoreFailedStorageRequestProtoDefaultTypeInternal _RestoreFailedStorageRequestProto_default_instance_;
class RestoreFailedStorageResponseProto;
class RestoreFailedStorageResponseProtoDefaultTypeInternal;
extern RestoreFailedStorageResponseProtoDefaultTypeInternal _RestoreFailedStorageResponseProto_default_instance_;
class RollEditsRequestProto;
class RollEditsRequestProtoDefaultTypeInternal;
extern RollEditsRequestProtoDefaultTypeInternal _RollEditsRequestProto_default_instance_;
class RollEditsResponseProto;
class RollEditsResponseProtoDefaultTypeInternal;
extern RollEditsResponseProtoDefaultTypeInternal _RollEditsResponseProto_default_instance_;
class SaveNamespaceRequestProto;
class SaveNamespaceRequestProtoDefaultTypeInternal;
extern SaveNamespaceRequestProtoDefaultTypeInternal _SaveNamespaceRequestProto_default_instance_;
class SaveNamespaceResponseProto;
class SaveNamespaceResponseProtoDefaultTypeInternal;
extern SaveNamespaceResponseProtoDefaultTypeInternal _SaveNamespaceResponseProto_default_instance_;
class SetBalancerBandwidthRequestProto;
class SetBalancerBandwidthRequestProtoDefaultTypeInternal;
extern SetBalancerBandwidthRequestProtoDefaultTypeInternal _SetBalancerBandwidthRequestProto_default_instance_;
class SetBalancerBandwidthResponseProto;
class SetBalancerBandwidthResponseProtoDefaultTypeInternal;
extern SetBalancerBandwidthResponseProtoDefaultTypeInternal _SetBalancerBandwidthResponseProto_default_instance_;
class SetOwnerRequestProto;
class SetOwnerRequestProtoDefaultTypeInternal;
extern SetOwnerRequestProtoDefaultTypeInternal _SetOwnerRequestProto_default_instance_;
class SetOwnerResponseProto;
class SetOwnerResponseProtoDefaultTypeInternal;
extern SetOwnerResponseProtoDefaultTypeInternal _SetOwnerResponseProto_default_instance_;
class SetPermissionRequestProto;
class SetPermissionRequestProtoDefaultTypeInternal;
extern SetPermissionRequestProtoDefaultTypeInternal _SetPermissionRequestProto_default_instance_;
class SetPermissionResponseProto;
class SetPermissionResponseProtoDefaultTypeInternal;
extern SetPermissionResponseProtoDefaultTypeInternal _SetPermissionResponseProto_default_instance_;
class SetQuotaRequestProto;
class SetQuotaRequestProtoDefaultTypeInternal;
extern SetQuotaRequestProtoDefaultTypeInternal _SetQuotaRequestProto_default_instance_;
class SetQuotaResponseProto;
class SetQuotaResponseProtoDefaultTypeInternal;
extern SetQuotaResponseProtoDefaultTypeInternal _SetQuotaResponseProto_default_instance_;
class SetReplicationRequestProto;
class SetReplicationRequestProtoDefaultTypeInternal;
extern SetReplicationRequestProtoDefaultTypeInternal _SetReplicationRequestProto_default_instance_;
class SetReplicationResponseProto;
class SetReplicationResponseProtoDefaultTypeInternal;
extern SetReplicationResponseProtoDefaultTypeInternal _SetReplicationResponseProto_default_instance_;
class SetSafeModeRequestProto;
class SetSafeModeRequestProtoDefaultTypeInternal;
extern SetSafeModeRequestProtoDefaultTypeInternal _SetSafeModeRequestProto_default_instance_;
class SetSafeModeResponseProto;
class SetSafeModeResponseProtoDefaultTypeInternal;
extern SetSafeModeResponseProtoDefaultTypeInternal _SetSafeModeResponseProto_default_instance_;
class SetTimesRequestProto;
class SetTimesRequestProtoDefaultTypeInternal;
extern SetTimesRequestProtoDefaultTypeInternal _SetTimesRequestProto_default_instance_;
class SetTimesResponseProto;
class SetTimesResponseProtoDefaultTypeInternal;
extern SetTimesResponseProtoDefaultTypeInternal _SetTimesResponseProto_default_instance_;
class TruncateRequestProto;
class TruncateRequestProtoDefaultTypeInternal;
extern TruncateRequestProtoDefaultTypeInternal _TruncateRequestProto_default_instance_;
class TruncateResponseProto;
class TruncateResponseProtoDefaultTypeInternal;
extern TruncateResponseProtoDefaultTypeInternal _TruncateResponseProto_default_instance_;
class UpdateBlockForPipelineRequestProto;
class UpdateBlockForPipelineRequestProtoDefaultTypeInternal;
extern UpdateBlockForPipelineRequestProtoDefaultTypeInternal _UpdateBlockForPipelineRequestProto_default_instance_;
class UpdateBlockForPipelineResponseProto;
class UpdateBlockForPipelineResponseProtoDefaultTypeInternal;
extern UpdateBlockForPipelineResponseProtoDefaultTypeInternal _UpdateBlockForPipelineResponseProto_default_instance_;
class UpdatePipelineRequestProto;
class UpdatePipelineRequestProtoDefaultTypeInternal;
extern UpdatePipelineRequestProtoDefaultTypeInternal _UpdatePipelineRequestProto_default_instance_;
class UpdatePipelineResponseProto;
class UpdatePipelineResponseProtoDefaultTypeInternal;
extern UpdatePipelineResponseProtoDefaultTypeInternal _UpdatePipelineResponseProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template<> ::Hdfs::Internal::AbandonBlockRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AbandonBlockRequestProto>(Arena*);
template<> ::Hdfs::Internal::AbandonBlockResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AbandonBlockResponseProto>(Arena*);
template<> ::Hdfs::Internal::AddBlockRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AddBlockRequestProto>(Arena*);
template<> ::Hdfs::Internal::AddBlockResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AddBlockResponseProto>(Arena*);
template<> ::Hdfs::Internal::AddCacheDirectiveRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AddCacheDirectiveRequestProto>(Arena*);
template<> ::Hdfs::Internal::AddCacheDirectiveResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AddCacheDirectiveResponseProto>(Arena*);
template<> ::Hdfs::Internal::AddCachePoolRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AddCachePoolRequestProto>(Arena*);
template<> ::Hdfs::Internal::AddCachePoolResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AddCachePoolResponseProto>(Arena*);
template<> ::Hdfs::Internal::AllowSnapshotRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AllowSnapshotRequestProto>(Arena*);
template<> ::Hdfs::Internal::AllowSnapshotResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AllowSnapshotResponseProto>(Arena*);
template<> ::Hdfs::Internal::AppendRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AppendRequestProto>(Arena*);
template<> ::Hdfs::Internal::AppendResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::AppendResponseProto>(Arena*);
template<> ::Hdfs::Internal::CacheDirectiveEntryProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveEntryProto>(Arena*);
template<> ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoExpirationProto>(Arena*);
template<> ::Hdfs::Internal::CacheDirectiveInfoProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoProto>(Arena*);
template<> ::Hdfs::Internal::CacheDirectiveStatsProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveStatsProto>(Arena*);
template<> ::Hdfs::Internal::CachePoolEntryProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CachePoolEntryProto>(Arena*);
template<> ::Hdfs::Internal::CachePoolInfoProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CachePoolInfoProto>(Arena*);
template<> ::Hdfs::Internal::CachePoolStatsProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CachePoolStatsProto>(Arena*);
template<> ::Hdfs::Internal::CompleteRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CompleteRequestProto>(Arena*);
template<> ::Hdfs::Internal::CompleteResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CompleteResponseProto>(Arena*);
template<> ::Hdfs::Internal::ConcatRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ConcatRequestProto>(Arena*);
template<> ::Hdfs::Internal::ConcatResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ConcatResponseProto>(Arena*);
template<> ::Hdfs::Internal::CreateRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateRequestProto>(Arena*);
template<> ::Hdfs::Internal::CreateResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateResponseProto>(Arena*);
template<> ::Hdfs::Internal::CreateSnapshotRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSnapshotRequestProto>(Arena*);
template<> ::Hdfs::Internal::CreateSnapshotResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSnapshotResponseProto>(Arena*);
template<> ::Hdfs::Internal::CreateSymlinkRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSymlinkRequestProto>(Arena*);
template<> ::Hdfs::Internal::CreateSymlinkResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CreateSymlinkResponseProto>(Arena*);
template<> ::Hdfs::Internal::DeleteRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteRequestProto>(Arena*);
template<> ::Hdfs::Internal::DeleteResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteResponseProto>(Arena*);
template<> ::Hdfs::Internal::DeleteSnapshotRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteSnapshotRequestProto>(Arena*);
template<> ::Hdfs::Internal::DeleteSnapshotResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteSnapshotResponseProto>(Arena*);
template<> ::Hdfs::Internal::DisallowSnapshotRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DisallowSnapshotRequestProto>(Arena*);
template<> ::Hdfs::Internal::DisallowSnapshotResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DisallowSnapshotResponseProto>(Arena*);
template<> ::Hdfs::Internal::FinalizeUpgradeRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::FinalizeUpgradeRequestProto>(Arena*);
template<> ::Hdfs::Internal::FinalizeUpgradeResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::FinalizeUpgradeResponseProto>(Arena*);
template<> ::Hdfs::Internal::FsyncRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::FsyncRequestProto>(Arena*);
template<> ::Hdfs::Internal::FsyncResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::FsyncResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetAdditionalDatanodeRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetAdditionalDatanodeRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetAdditionalDatanodeResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetAdditionalDatanodeResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetBlockLocationsRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetBlockLocationsRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetBlockLocationsResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetBlockLocationsResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetContentSummaryRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetContentSummaryRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetContentSummaryResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetContentSummaryResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetDataEncryptionKeyRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetDataEncryptionKeyRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetDataEncryptionKeyResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetDataEncryptionKeyResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetDatanodeReportRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetDatanodeReportRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetDatanodeReportResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetDatanodeReportResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetFileInfoRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileInfoRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetFileInfoResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileInfoResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetFileLinkInfoRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileLinkInfoRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetFileLinkInfoResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetFileLinkInfoResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetFsStatsResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetFsStatsResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetFsStatusRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetFsStatusRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetLeaseRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetLeaseRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetLeaseResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetLeaseResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetLinkTargetRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetLinkTargetRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetLinkTargetResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetLinkTargetResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetListingRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetListingRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetListingResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetListingResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetPreferredBlockSizeRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetPreferredBlockSizeRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetPreferredBlockSizeResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetPreferredBlockSizeResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetServerDefaultsRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetServerDefaultsRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetServerDefaultsResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetServerDefaultsResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetSnapshotDiffReportRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetSnapshotDiffReportRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetSnapshotDiffReportResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetSnapshotDiffReportResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetSnapshottableDirListingRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetSnapshottableDirListingRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetSnapshottableDirListingResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetSnapshottableDirListingResponseProto>(Arena*);
template<> ::Hdfs::Internal::IsFileClosedRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::IsFileClosedRequestProto>(Arena*);
template<> ::Hdfs::Internal::IsFileClosedResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::IsFileClosedResponseProto>(Arena*);
template<> ::Hdfs::Internal::ListCacheDirectivesRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListCacheDirectivesRequestProto>(Arena*);
template<> ::Hdfs::Internal::ListCacheDirectivesResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListCacheDirectivesResponseProto>(Arena*);
template<> ::Hdfs::Internal::ListCachePoolsRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListCachePoolsRequestProto>(Arena*);
template<> ::Hdfs::Internal::ListCachePoolsResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListCachePoolsResponseProto>(Arena*);
template<> ::Hdfs::Internal::ListCorruptFileBlocksRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListCorruptFileBlocksRequestProto>(Arena*);
template<> ::Hdfs::Internal::ListCorruptFileBlocksResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ListCorruptFileBlocksResponseProto>(Arena*);
template<> ::Hdfs::Internal::MetaSaveRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::MetaSaveRequestProto>(Arena*);
template<> ::Hdfs::Internal::MetaSaveResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::MetaSaveResponseProto>(Arena*);
template<> ::Hdfs::Internal::MkdirsRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::MkdirsRequestProto>(Arena*);
template<> ::Hdfs::Internal::MkdirsResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::MkdirsResponseProto>(Arena*);
template<> ::Hdfs::Internal::ModifyCacheDirectiveRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCacheDirectiveRequestProto>(Arena*);
template<> ::Hdfs::Internal::ModifyCacheDirectiveResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCacheDirectiveResponseProto>(Arena*);
template<> ::Hdfs::Internal::ModifyCachePoolRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCachePoolRequestProto>(Arena*);
template<> ::Hdfs::Internal::ModifyCachePoolResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ModifyCachePoolResponseProto>(Arena*);
template<> ::Hdfs::Internal::RecoverLeaseRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RecoverLeaseRequestProto>(Arena*);
template<> ::Hdfs::Internal::RecoverLeaseResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RecoverLeaseResponseProto>(Arena*);
template<> ::Hdfs::Internal::RefreshNodesRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RefreshNodesRequestProto>(Arena*);
template<> ::Hdfs::Internal::RefreshNodesResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RefreshNodesResponseProto>(Arena*);
template<> ::Hdfs::Internal::ReleaseLeaseRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ReleaseLeaseRequestProto>(Arena*);
template<> ::Hdfs::Internal::ReleaseLeaseResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ReleaseLeaseResponseProto>(Arena*);
template<> ::Hdfs::Internal::RemoveCacheDirectiveRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCacheDirectiveRequestProto>(Arena*);
template<> ::Hdfs::Internal::RemoveCacheDirectiveResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCacheDirectiveResponseProto>(Arena*);
template<> ::Hdfs::Internal::RemoveCachePoolRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCachePoolRequestProto>(Arena*);
template<> ::Hdfs::Internal::RemoveCachePoolResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RemoveCachePoolResponseProto>(Arena*);
template<> ::Hdfs::Internal::Rename2RequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::Rename2RequestProto>(Arena*);
template<> ::Hdfs::Internal::Rename2ResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::Rename2ResponseProto>(Arena*);
template<> ::Hdfs::Internal::RenameRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenameRequestProto>(Arena*);
template<> ::Hdfs::Internal::RenameResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenameResponseProto>(Arena*);
template<> ::Hdfs::Internal::RenameSnapshotRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenameSnapshotRequestProto>(Arena*);
template<> ::Hdfs::Internal::RenameSnapshotResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenameSnapshotResponseProto>(Arena*);
template<> ::Hdfs::Internal::RenewLeaseRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenewLeaseRequestProto>(Arena*);
template<> ::Hdfs::Internal::RenewLeaseResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenewLeaseResponseProto>(Arena*);
template<> ::Hdfs::Internal::ReportBadBlocksRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ReportBadBlocksRequestProto>(Arena*);
template<> ::Hdfs::Internal::ReportBadBlocksResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::ReportBadBlocksResponseProto>(Arena*);
template<> ::Hdfs::Internal::RestoreFailedStorageRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RestoreFailedStorageRequestProto>(Arena*);
template<> ::Hdfs::Internal::RestoreFailedStorageResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RestoreFailedStorageResponseProto>(Arena*);
template<> ::Hdfs::Internal::RollEditsRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RollEditsRequestProto>(Arena*);
template<> ::Hdfs::Internal::RollEditsResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RollEditsResponseProto>(Arena*);
template<> ::Hdfs::Internal::SaveNamespaceRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SaveNamespaceRequestProto>(Arena*);
template<> ::Hdfs::Internal::SaveNamespaceResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SaveNamespaceResponseProto>(Arena*);
template<> ::Hdfs::Internal::SetBalancerBandwidthRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetBalancerBandwidthRequestProto>(Arena*);
template<> ::Hdfs::Internal::SetBalancerBandwidthResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetBalancerBandwidthResponseProto>(Arena*);
template<> ::Hdfs::Internal::SetOwnerRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetOwnerRequestProto>(Arena*);
template<> ::Hdfs::Internal::SetOwnerResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetOwnerResponseProto>(Arena*);
template<> ::Hdfs::Internal::SetPermissionRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetPermissionRequestProto>(Arena*);
template<> ::Hdfs::Internal::SetPermissionResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetPermissionResponseProto>(Arena*);
template<> ::Hdfs::Internal::SetQuotaRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetQuotaRequestProto>(Arena*);
template<> ::Hdfs::Internal::SetQuotaResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetQuotaResponseProto>(Arena*);
template<> ::Hdfs::Internal::SetReplicationRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetReplicationRequestProto>(Arena*);
template<> ::Hdfs::Internal::SetReplicationResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetReplicationResponseProto>(Arena*);
template<> ::Hdfs::Internal::SetSafeModeRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetSafeModeRequestProto>(Arena*);
template<> ::Hdfs::Internal::SetSafeModeResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetSafeModeResponseProto>(Arena*);
template<> ::Hdfs::Internal::SetTimesRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetTimesRequestProto>(Arena*);
template<> ::Hdfs::Internal::SetTimesResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::SetTimesResponseProto>(Arena*);
template<> ::Hdfs::Internal::TruncateRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::TruncateRequestProto>(Arena*);
template<> ::Hdfs::Internal::TruncateResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::TruncateResponseProto>(Arena*);
template<> ::Hdfs::Internal::UpdateBlockForPipelineRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::UpdateBlockForPipelineRequestProto>(Arena*);
template<> ::Hdfs::Internal::UpdateBlockForPipelineResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::UpdateBlockForPipelineResponseProto>(Arena*);
template<> ::Hdfs::Internal::UpdatePipelineRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::UpdatePipelineRequestProto>(Arena*);
template<> ::Hdfs::Internal::UpdatePipelineResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::UpdatePipelineResponseProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Hdfs {
namespace Internal {

enum CreateFlagProto : int {
  CREATE = 1,
  OVERWRITE = 2,
  APPEND = 4
};
bool CreateFlagProto_IsValid(int value);
constexpr CreateFlagProto CreateFlagProto_MIN = CREATE;
constexpr CreateFlagProto CreateFlagProto_MAX = APPEND;
constexpr int CreateFlagProto_ARRAYSIZE = CreateFlagProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateFlagProto_descriptor();
template<typename T>
inline const std::string& CreateFlagProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateFlagProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateFlagProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateFlagProto_descriptor(), enum_t_value);
}
inline bool CreateFlagProto_Parse(
    const std::string& name, CreateFlagProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateFlagProto>(
    CreateFlagProto_descriptor(), name, value);
}
enum DatanodeReportTypeProto : int {
  ALL = 1,
  LIVE = 2,
  DEAD = 3
};
bool DatanodeReportTypeProto_IsValid(int value);
constexpr DatanodeReportTypeProto DatanodeReportTypeProto_MIN = ALL;
constexpr DatanodeReportTypeProto DatanodeReportTypeProto_MAX = DEAD;
constexpr int DatanodeReportTypeProto_ARRAYSIZE = DatanodeReportTypeProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatanodeReportTypeProto_descriptor();
template<typename T>
inline const std::string& DatanodeReportTypeProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DatanodeReportTypeProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DatanodeReportTypeProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DatanodeReportTypeProto_descriptor(), enum_t_value);
}
inline bool DatanodeReportTypeProto_Parse(
    const std::string& name, DatanodeReportTypeProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DatanodeReportTypeProto>(
    DatanodeReportTypeProto_descriptor(), name, value);
}
enum SafeModeActionProto : int {
  SAFEMODE_LEAVE = 1,
  SAFEMODE_ENTER = 2,
  SAFEMODE_GET = 3
};
bool SafeModeActionProto_IsValid(int value);
constexpr SafeModeActionProto SafeModeActionProto_MIN = SAFEMODE_LEAVE;
constexpr SafeModeActionProto SafeModeActionProto_MAX = SAFEMODE_GET;
constexpr int SafeModeActionProto_ARRAYSIZE = SafeModeActionProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SafeModeActionProto_descriptor();
template<typename T>
inline const std::string& SafeModeActionProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SafeModeActionProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SafeModeActionProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SafeModeActionProto_descriptor(), enum_t_value);
}
inline bool SafeModeActionProto_Parse(
    const std::string& name, SafeModeActionProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SafeModeActionProto>(
    SafeModeActionProto_descriptor(), name, value);
}
enum CacheFlagProto : int {
  FORCE = 1
};
bool CacheFlagProto_IsValid(int value);
constexpr CacheFlagProto CacheFlagProto_MIN = FORCE;
constexpr CacheFlagProto CacheFlagProto_MAX = FORCE;
constexpr int CacheFlagProto_ARRAYSIZE = CacheFlagProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CacheFlagProto_descriptor();
template<typename T>
inline const std::string& CacheFlagProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CacheFlagProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CacheFlagProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CacheFlagProto_descriptor(), enum_t_value);
}
inline bool CacheFlagProto_Parse(
    const std::string& name, CacheFlagProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CacheFlagProto>(
    CacheFlagProto_descriptor(), name, value);
}
// ===================================================================

class GetBlockLocationsRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetBlockLocationsRequestProto) */ {
 public:
  GetBlockLocationsRequestProto();
  virtual ~GetBlockLocationsRequestProto();

  GetBlockLocationsRequestProto(const GetBlockLocationsRequestProto& from);
  GetBlockLocationsRequestProto(GetBlockLocationsRequestProto&& from) noexcept
    : GetBlockLocationsRequestProto() {
    *this = ::std::move(from);
  }

  inline GetBlockLocationsRequestProto& operator=(const GetBlockLocationsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockLocationsRequestProto& operator=(GetBlockLocationsRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockLocationsRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockLocationsRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetBlockLocationsRequestProto*>(
               &_GetBlockLocationsRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetBlockLocationsRequestProto& a, GetBlockLocationsRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockLocationsRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockLocationsRequestProto* New() const final {
    return CreateMaybeMessage<GetBlockLocationsRequestProto>(nullptr);
  }

  GetBlockLocationsRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockLocationsRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockLocationsRequestProto& from);
  void MergeFrom(const GetBlockLocationsRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockLocationsRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetBlockLocationsRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required uint64 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetBlockLocationsRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetBlockLocationsResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetBlockLocationsResponseProto) */ {
 public:
  GetBlockLocationsResponseProto();
  virtual ~GetBlockLocationsResponseProto();

  GetBlockLocationsResponseProto(const GetBlockLocationsResponseProto& from);
  GetBlockLocationsResponseProto(GetBlockLocationsResponseProto&& from) noexcept
    : GetBlockLocationsResponseProto() {
    *this = ::std::move(from);
  }

  inline GetBlockLocationsResponseProto& operator=(const GetBlockLocationsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockLocationsResponseProto& operator=(GetBlockLocationsResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockLocationsResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockLocationsResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetBlockLocationsResponseProto*>(
               &_GetBlockLocationsResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetBlockLocationsResponseProto& a, GetBlockLocationsResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockLocationsResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockLocationsResponseProto* New() const final {
    return CreateMaybeMessage<GetBlockLocationsResponseProto>(nullptr);
  }

  GetBlockLocationsResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockLocationsResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockLocationsResponseProto& from);
  void MergeFrom(const GetBlockLocationsResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockLocationsResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetBlockLocationsResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 1,
  };
  // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
  bool has_locations() const;
  private:
  bool _internal_has_locations() const;
  public:
  void clear_locations();
  const ::Hdfs::Internal::LocatedBlocksProto& locations() const;
  ::Hdfs::Internal::LocatedBlocksProto* release_locations();
  ::Hdfs::Internal::LocatedBlocksProto* mutable_locations();
  void set_allocated_locations(::Hdfs::Internal::LocatedBlocksProto* locations);
  private:
  const ::Hdfs::Internal::LocatedBlocksProto& _internal_locations() const;
  ::Hdfs::Internal::LocatedBlocksProto* _internal_mutable_locations();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetBlockLocationsResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::LocatedBlocksProto* locations_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetServerDefaultsRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetServerDefaultsRequestProto) */ {
 public:
  GetServerDefaultsRequestProto();
  virtual ~GetServerDefaultsRequestProto();

  GetServerDefaultsRequestProto(const GetServerDefaultsRequestProto& from);
  GetServerDefaultsRequestProto(GetServerDefaultsRequestProto&& from) noexcept
    : GetServerDefaultsRequestProto() {
    *this = ::std::move(from);
  }

  inline GetServerDefaultsRequestProto& operator=(const GetServerDefaultsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerDefaultsRequestProto& operator=(GetServerDefaultsRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServerDefaultsRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerDefaultsRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetServerDefaultsRequestProto*>(
               &_GetServerDefaultsRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServerDefaultsRequestProto& a, GetServerDefaultsRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerDefaultsRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerDefaultsRequestProto* New() const final {
    return CreateMaybeMessage<GetServerDefaultsRequestProto>(nullptr);
  }

  GetServerDefaultsRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerDefaultsRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServerDefaultsRequestProto& from);
  void MergeFrom(const GetServerDefaultsRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerDefaultsRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetServerDefaultsRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetServerDefaultsRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetServerDefaultsResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetServerDefaultsResponseProto) */ {
 public:
  GetServerDefaultsResponseProto();
  virtual ~GetServerDefaultsResponseProto();

  GetServerDefaultsResponseProto(const GetServerDefaultsResponseProto& from);
  GetServerDefaultsResponseProto(GetServerDefaultsResponseProto&& from) noexcept
    : GetServerDefaultsResponseProto() {
    *this = ::std::move(from);
  }

  inline GetServerDefaultsResponseProto& operator=(const GetServerDefaultsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerDefaultsResponseProto& operator=(GetServerDefaultsResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServerDefaultsResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerDefaultsResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetServerDefaultsResponseProto*>(
               &_GetServerDefaultsResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServerDefaultsResponseProto& a, GetServerDefaultsResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerDefaultsResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerDefaultsResponseProto* New() const final {
    return CreateMaybeMessage<GetServerDefaultsResponseProto>(nullptr);
  }

  GetServerDefaultsResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerDefaultsResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServerDefaultsResponseProto& from);
  void MergeFrom(const GetServerDefaultsResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerDefaultsResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetServerDefaultsResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerDefaultsFieldNumber = 1,
  };
  // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
  bool has_serverdefaults() const;
  private:
  bool _internal_has_serverdefaults() const;
  public:
  void clear_serverdefaults();
  const ::Hdfs::Internal::FsServerDefaultsProto& serverdefaults() const;
  ::Hdfs::Internal::FsServerDefaultsProto* release_serverdefaults();
  ::Hdfs::Internal::FsServerDefaultsProto* mutable_serverdefaults();
  void set_allocated_serverdefaults(::Hdfs::Internal::FsServerDefaultsProto* serverdefaults);
  private:
  const ::Hdfs::Internal::FsServerDefaultsProto& _internal_serverdefaults() const;
  ::Hdfs::Internal::FsServerDefaultsProto* _internal_mutable_serverdefaults();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetServerDefaultsResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::FsServerDefaultsProto* serverdefaults_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateRequestProto) */ {
 public:
  CreateRequestProto();
  virtual ~CreateRequestProto();

  CreateRequestProto(const CreateRequestProto& from);
  CreateRequestProto(CreateRequestProto&& from) noexcept
    : CreateRequestProto() {
    *this = ::std::move(from);
  }

  inline CreateRequestProto& operator=(const CreateRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequestProto& operator=(CreateRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequestProto* internal_default_instance() {
    return reinterpret_cast<const CreateRequestProto*>(
               &_CreateRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateRequestProto& a, CreateRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequestProto* New() const final {
    return CreateMaybeMessage<CreateRequestProto>(nullptr);
  }

  CreateRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRequestProto& from);
  void MergeFrom(const CreateRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCryptoProtocolVersionFieldNumber = 8,
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 3,
    kMaskedFieldNumber = 2,
    kCreateFlagFieldNumber = 4,
    kCreateParentFieldNumber = 5,
    kBlockSizeFieldNumber = 7,
    kReplicationFieldNumber = 6,
  };
  // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
  int cryptoprotocolversion_size() const;
  private:
  int _internal_cryptoprotocolversion_size() const;
  public:
  void clear_cryptoprotocolversion();
  private:
  ::Hdfs::Internal::CryptoProtocolVersionProto _internal_cryptoprotocolversion(int index) const;
  void _internal_add_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_cryptoprotocolversion();
  public:
  ::Hdfs::Internal::CryptoProtocolVersionProto cryptoprotocolversion(int index) const;
  void set_cryptoprotocolversion(int index, ::Hdfs::Internal::CryptoProtocolVersionProto value);
  void add_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& cryptoprotocolversion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_cryptoprotocolversion();

  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 3;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  bool has_masked() const;
  private:
  bool _internal_has_masked() const;
  public:
  void clear_masked();
  const ::Hdfs::Internal::FsPermissionProto& masked() const;
  ::Hdfs::Internal::FsPermissionProto* release_masked();
  ::Hdfs::Internal::FsPermissionProto* mutable_masked();
  void set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked);
  private:
  const ::Hdfs::Internal::FsPermissionProto& _internal_masked() const;
  ::Hdfs::Internal::FsPermissionProto* _internal_mutable_masked();
  public:

  // required uint32 createFlag = 4;
  bool has_createflag() const;
  private:
  bool _internal_has_createflag() const;
  public:
  void clear_createflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 createflag() const;
  void set_createflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_createflag() const;
  void _internal_set_createflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool createParent = 5;
  bool has_createparent() const;
  private:
  bool _internal_has_createparent() const;
  public:
  void clear_createparent();
  bool createparent() const;
  void set_createparent(bool value);
  private:
  bool _internal_createparent() const;
  void _internal_set_createparent(bool value);
  public:

  // required uint64 blockSize = 7;
  bool has_blocksize() const;
  private:
  bool _internal_has_blocksize() const;
  public:
  void clear_blocksize();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocksize() const;
  void set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blocksize() const;
  void _internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 replication = 6;
  bool has_replication() const;
  private:
  bool _internal_has_replication() const;
  public:
  void clear_replication();
  ::PROTOBUF_NAMESPACE_ID::uint32 replication() const;
  void set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replication() const;
  void _internal_set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> cryptoprotocolversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::Hdfs::Internal::FsPermissionProto* masked_;
  ::PROTOBUF_NAMESPACE_ID::uint32 createflag_;
  bool createparent_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocksize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replication_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateResponseProto) */ {
 public:
  CreateResponseProto();
  virtual ~CreateResponseProto();

  CreateResponseProto(const CreateResponseProto& from);
  CreateResponseProto(CreateResponseProto&& from) noexcept
    : CreateResponseProto() {
    *this = ::std::move(from);
  }

  inline CreateResponseProto& operator=(const CreateResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponseProto& operator=(CreateResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResponseProto* internal_default_instance() {
    return reinterpret_cast<const CreateResponseProto*>(
               &_CreateResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateResponseProto& a, CreateResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResponseProto* New() const final {
    return CreateMaybeMessage<CreateResponseProto>(nullptr);
  }

  CreateResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateResponseProto& from);
  void MergeFrom(const CreateResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsFieldNumber = 1,
  };
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  bool has_fs() const;
  private:
  bool _internal_has_fs() const;
  public:
  void clear_fs();
  const ::Hdfs::Internal::HdfsFileStatusProto& fs() const;
  ::Hdfs::Internal::HdfsFileStatusProto* release_fs();
  ::Hdfs::Internal::HdfsFileStatusProto* mutable_fs();
  void set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs);
  private:
  const ::Hdfs::Internal::HdfsFileStatusProto& _internal_fs() const;
  ::Hdfs::Internal::HdfsFileStatusProto* _internal_mutable_fs();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::HdfsFileStatusProto* fs_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AppendRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AppendRequestProto) */ {
 public:
  AppendRequestProto();
  virtual ~AppendRequestProto();

  AppendRequestProto(const AppendRequestProto& from);
  AppendRequestProto(AppendRequestProto&& from) noexcept
    : AppendRequestProto() {
    *this = ::std::move(from);
  }

  inline AppendRequestProto& operator=(const AppendRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRequestProto& operator=(AppendRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendRequestProto* internal_default_instance() {
    return reinterpret_cast<const AppendRequestProto*>(
               &_AppendRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AppendRequestProto& a, AppendRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendRequestProto* New() const final {
    return CreateMaybeMessage<AppendRequestProto>(nullptr);
  }

  AppendRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendRequestProto& from);
  void MergeFrom(const AppendRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AppendRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 2;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AppendRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AppendResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AppendResponseProto) */ {
 public:
  AppendResponseProto();
  virtual ~AppendResponseProto();

  AppendResponseProto(const AppendResponseProto& from);
  AppendResponseProto(AppendResponseProto&& from) noexcept
    : AppendResponseProto() {
    *this = ::std::move(from);
  }

  inline AppendResponseProto& operator=(const AppendResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendResponseProto& operator=(AppendResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendResponseProto* internal_default_instance() {
    return reinterpret_cast<const AppendResponseProto*>(
               &_AppendResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AppendResponseProto& a, AppendResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendResponseProto* New() const final {
    return CreateMaybeMessage<AppendResponseProto>(nullptr);
  }

  AppendResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendResponseProto& from);
  void MergeFrom(const AppendResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AppendResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kStatFieldNumber = 2,
  };
  // optional .Hdfs.Internal.LocatedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::LocatedBlockProto& block() const;
  ::Hdfs::Internal::LocatedBlockProto* release_block();
  ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);
  private:
  const ::Hdfs::Internal::LocatedBlockProto& _internal_block() const;
  ::Hdfs::Internal::LocatedBlockProto* _internal_mutable_block();
  public:

  // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::Hdfs::Internal::HdfsFileStatusProto& stat() const;
  ::Hdfs::Internal::HdfsFileStatusProto* release_stat();
  ::Hdfs::Internal::HdfsFileStatusProto* mutable_stat();
  void set_allocated_stat(::Hdfs::Internal::HdfsFileStatusProto* stat);
  private:
  const ::Hdfs::Internal::HdfsFileStatusProto& _internal_stat() const;
  ::Hdfs::Internal::HdfsFileStatusProto* _internal_mutable_stat();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AppendResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::LocatedBlockProto* block_;
  ::Hdfs::Internal::HdfsFileStatusProto* stat_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetReplicationRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetReplicationRequestProto) */ {
 public:
  SetReplicationRequestProto();
  virtual ~SetReplicationRequestProto();

  SetReplicationRequestProto(const SetReplicationRequestProto& from);
  SetReplicationRequestProto(SetReplicationRequestProto&& from) noexcept
    : SetReplicationRequestProto() {
    *this = ::std::move(from);
  }

  inline SetReplicationRequestProto& operator=(const SetReplicationRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReplicationRequestProto& operator=(SetReplicationRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReplicationRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReplicationRequestProto* internal_default_instance() {
    return reinterpret_cast<const SetReplicationRequestProto*>(
               &_SetReplicationRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetReplicationRequestProto& a, SetReplicationRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReplicationRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetReplicationRequestProto* New() const final {
    return CreateMaybeMessage<SetReplicationRequestProto>(nullptr);
  }

  SetReplicationRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReplicationRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReplicationRequestProto& from);
  void MergeFrom(const SetReplicationRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReplicationRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetReplicationRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kReplicationFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required uint32 replication = 2;
  bool has_replication() const;
  private:
  bool _internal_has_replication() const;
  public:
  void clear_replication();
  ::PROTOBUF_NAMESPACE_ID::uint32 replication() const;
  void set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replication() const;
  void _internal_set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetReplicationRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replication_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetReplicationResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetReplicationResponseProto) */ {
 public:
  SetReplicationResponseProto();
  virtual ~SetReplicationResponseProto();

  SetReplicationResponseProto(const SetReplicationResponseProto& from);
  SetReplicationResponseProto(SetReplicationResponseProto&& from) noexcept
    : SetReplicationResponseProto() {
    *this = ::std::move(from);
  }

  inline SetReplicationResponseProto& operator=(const SetReplicationResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReplicationResponseProto& operator=(SetReplicationResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReplicationResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReplicationResponseProto* internal_default_instance() {
    return reinterpret_cast<const SetReplicationResponseProto*>(
               &_SetReplicationResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetReplicationResponseProto& a, SetReplicationResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReplicationResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetReplicationResponseProto* New() const final {
    return CreateMaybeMessage<SetReplicationResponseProto>(nullptr);
  }

  SetReplicationResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReplicationResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReplicationResponseProto& from);
  void MergeFrom(const SetReplicationResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReplicationResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetReplicationResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetReplicationResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetPermissionRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetPermissionRequestProto) */ {
 public:
  SetPermissionRequestProto();
  virtual ~SetPermissionRequestProto();

  SetPermissionRequestProto(const SetPermissionRequestProto& from);
  SetPermissionRequestProto(SetPermissionRequestProto&& from) noexcept
    : SetPermissionRequestProto() {
    *this = ::std::move(from);
  }

  inline SetPermissionRequestProto& operator=(const SetPermissionRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPermissionRequestProto& operator=(SetPermissionRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPermissionRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPermissionRequestProto* internal_default_instance() {
    return reinterpret_cast<const SetPermissionRequestProto*>(
               &_SetPermissionRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetPermissionRequestProto& a, SetPermissionRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPermissionRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPermissionRequestProto* New() const final {
    return CreateMaybeMessage<SetPermissionRequestProto>(nullptr);
  }

  SetPermissionRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPermissionRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPermissionRequestProto& from);
  void MergeFrom(const SetPermissionRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPermissionRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetPermissionRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kPermissionFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required .Hdfs.Internal.FsPermissionProto permission = 2;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  const ::Hdfs::Internal::FsPermissionProto& permission() const;
  ::Hdfs::Internal::FsPermissionProto* release_permission();
  ::Hdfs::Internal::FsPermissionProto* mutable_permission();
  void set_allocated_permission(::Hdfs::Internal::FsPermissionProto* permission);
  private:
  const ::Hdfs::Internal::FsPermissionProto& _internal_permission() const;
  ::Hdfs::Internal::FsPermissionProto* _internal_mutable_permission();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetPermissionRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::Hdfs::Internal::FsPermissionProto* permission_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetPermissionResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetPermissionResponseProto) */ {
 public:
  SetPermissionResponseProto();
  virtual ~SetPermissionResponseProto();

  SetPermissionResponseProto(const SetPermissionResponseProto& from);
  SetPermissionResponseProto(SetPermissionResponseProto&& from) noexcept
    : SetPermissionResponseProto() {
    *this = ::std::move(from);
  }

  inline SetPermissionResponseProto& operator=(const SetPermissionResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPermissionResponseProto& operator=(SetPermissionResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPermissionResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPermissionResponseProto* internal_default_instance() {
    return reinterpret_cast<const SetPermissionResponseProto*>(
               &_SetPermissionResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetPermissionResponseProto& a, SetPermissionResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPermissionResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPermissionResponseProto* New() const final {
    return CreateMaybeMessage<SetPermissionResponseProto>(nullptr);
  }

  SetPermissionResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPermissionResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPermissionResponseProto& from);
  void MergeFrom(const SetPermissionResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPermissionResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetPermissionResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetPermissionResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetOwnerRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetOwnerRequestProto) */ {
 public:
  SetOwnerRequestProto();
  virtual ~SetOwnerRequestProto();

  SetOwnerRequestProto(const SetOwnerRequestProto& from);
  SetOwnerRequestProto(SetOwnerRequestProto&& from) noexcept
    : SetOwnerRequestProto() {
    *this = ::std::move(from);
  }

  inline SetOwnerRequestProto& operator=(const SetOwnerRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOwnerRequestProto& operator=(SetOwnerRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetOwnerRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetOwnerRequestProto* internal_default_instance() {
    return reinterpret_cast<const SetOwnerRequestProto*>(
               &_SetOwnerRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetOwnerRequestProto& a, SetOwnerRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOwnerRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetOwnerRequestProto* New() const final {
    return CreateMaybeMessage<SetOwnerRequestProto>(nullptr);
  }

  SetOwnerRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetOwnerRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetOwnerRequestProto& from);
  void MergeFrom(const SetOwnerRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOwnerRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetOwnerRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kGroupnameFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // optional string username = 2;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string groupname = 3;
  bool has_groupname() const;
  private:
  bool _internal_has_groupname() const;
  public:
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetOwnerRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetOwnerResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetOwnerResponseProto) */ {
 public:
  SetOwnerResponseProto();
  virtual ~SetOwnerResponseProto();

  SetOwnerResponseProto(const SetOwnerResponseProto& from);
  SetOwnerResponseProto(SetOwnerResponseProto&& from) noexcept
    : SetOwnerResponseProto() {
    *this = ::std::move(from);
  }

  inline SetOwnerResponseProto& operator=(const SetOwnerResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOwnerResponseProto& operator=(SetOwnerResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetOwnerResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetOwnerResponseProto* internal_default_instance() {
    return reinterpret_cast<const SetOwnerResponseProto*>(
               &_SetOwnerResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetOwnerResponseProto& a, SetOwnerResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOwnerResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetOwnerResponseProto* New() const final {
    return CreateMaybeMessage<SetOwnerResponseProto>(nullptr);
  }

  SetOwnerResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetOwnerResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetOwnerResponseProto& from);
  void MergeFrom(const SetOwnerResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOwnerResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetOwnerResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetOwnerResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AbandonBlockRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AbandonBlockRequestProto) */ {
 public:
  AbandonBlockRequestProto();
  virtual ~AbandonBlockRequestProto();

  AbandonBlockRequestProto(const AbandonBlockRequestProto& from);
  AbandonBlockRequestProto(AbandonBlockRequestProto&& from) noexcept
    : AbandonBlockRequestProto() {
    *this = ::std::move(from);
  }

  inline AbandonBlockRequestProto& operator=(const AbandonBlockRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbandonBlockRequestProto& operator=(AbandonBlockRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbandonBlockRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbandonBlockRequestProto* internal_default_instance() {
    return reinterpret_cast<const AbandonBlockRequestProto*>(
               &_AbandonBlockRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AbandonBlockRequestProto& a, AbandonBlockRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AbandonBlockRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbandonBlockRequestProto* New() const final {
    return CreateMaybeMessage<AbandonBlockRequestProto>(nullptr);
  }

  AbandonBlockRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbandonBlockRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbandonBlockRequestProto& from);
  void MergeFrom(const AbandonBlockRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbandonBlockRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AbandonBlockRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 2,
    kHolderFieldNumber = 3,
    kBFieldNumber = 1,
  };
  // required string src = 2;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string holder = 3;
  bool has_holder() const;
  private:
  bool _internal_has_holder() const;
  public:
  void clear_holder();
  const std::string& holder() const;
  void set_holder(const std::string& value);
  void set_holder(std::string&& value);
  void set_holder(const char* value);
  void set_holder(const char* value, size_t size);
  std::string* mutable_holder();
  std::string* release_holder();
  void set_allocated_holder(std::string* holder);
  private:
  const std::string& _internal_holder() const;
  void _internal_set_holder(const std::string& value);
  std::string* _internal_mutable_holder();
  public:

  // required .Hdfs.Internal.ExtendedBlockProto b = 1;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::Hdfs::Internal::ExtendedBlockProto& b() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_b();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_b();
  void set_allocated_b(::Hdfs::Internal::ExtendedBlockProto* b);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_b() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_b();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AbandonBlockRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr holder_;
  ::Hdfs::Internal::ExtendedBlockProto* b_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AbandonBlockResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AbandonBlockResponseProto) */ {
 public:
  AbandonBlockResponseProto();
  virtual ~AbandonBlockResponseProto();

  AbandonBlockResponseProto(const AbandonBlockResponseProto& from);
  AbandonBlockResponseProto(AbandonBlockResponseProto&& from) noexcept
    : AbandonBlockResponseProto() {
    *this = ::std::move(from);
  }

  inline AbandonBlockResponseProto& operator=(const AbandonBlockResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbandonBlockResponseProto& operator=(AbandonBlockResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbandonBlockResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbandonBlockResponseProto* internal_default_instance() {
    return reinterpret_cast<const AbandonBlockResponseProto*>(
               &_AbandonBlockResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AbandonBlockResponseProto& a, AbandonBlockResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AbandonBlockResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbandonBlockResponseProto* New() const final {
    return CreateMaybeMessage<AbandonBlockResponseProto>(nullptr);
  }

  AbandonBlockResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbandonBlockResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbandonBlockResponseProto& from);
  void MergeFrom(const AbandonBlockResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbandonBlockResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AbandonBlockResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AbandonBlockResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AddBlockRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AddBlockRequestProto) */ {
 public:
  AddBlockRequestProto();
  virtual ~AddBlockRequestProto();

  AddBlockRequestProto(const AddBlockRequestProto& from);
  AddBlockRequestProto(AddBlockRequestProto&& from) noexcept
    : AddBlockRequestProto() {
    *this = ::std::move(from);
  }

  inline AddBlockRequestProto& operator=(const AddBlockRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBlockRequestProto& operator=(AddBlockRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddBlockRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBlockRequestProto* internal_default_instance() {
    return reinterpret_cast<const AddBlockRequestProto*>(
               &_AddBlockRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddBlockRequestProto& a, AddBlockRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBlockRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddBlockRequestProto* New() const final {
    return CreateMaybeMessage<AddBlockRequestProto>(nullptr);
  }

  AddBlockRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddBlockRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddBlockRequestProto& from);
  void MergeFrom(const AddBlockRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBlockRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AddBlockRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludeNodesFieldNumber = 4,
    kFavoredNodesFieldNumber = 6,
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 2,
    kPreviousFieldNumber = 3,
    kFileIdFieldNumber = 5,
  };
  // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
  int excludenodes_size() const;
  private:
  int _internal_excludenodes_size() const;
  public:
  void clear_excludenodes();
  ::Hdfs::Internal::DatanodeInfoProto* mutable_excludenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_excludenodes();
  private:
  const ::Hdfs::Internal::DatanodeInfoProto& _internal_excludenodes(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* _internal_add_excludenodes();
  public:
  const ::Hdfs::Internal::DatanodeInfoProto& excludenodes(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* add_excludenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      excludenodes() const;

  // repeated string favoredNodes = 6;
  int favorednodes_size() const;
  private:
  int _internal_favorednodes_size() const;
  public:
  void clear_favorednodes();
  const std::string& favorednodes(int index) const;
  std::string* mutable_favorednodes(int index);
  void set_favorednodes(int index, const std::string& value);
  void set_favorednodes(int index, std::string&& value);
  void set_favorednodes(int index, const char* value);
  void set_favorednodes(int index, const char* value, size_t size);
  std::string* add_favorednodes();
  void add_favorednodes(const std::string& value);
  void add_favorednodes(std::string&& value);
  void add_favorednodes(const char* value);
  void add_favorednodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& favorednodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_favorednodes();
  private:
  const std::string& _internal_favorednodes(int index) const;
  std::string* _internal_add_favorednodes();
  public:

  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 2;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
  bool has_previous() const;
  private:
  bool _internal_has_previous() const;
  public:
  void clear_previous();
  const ::Hdfs::Internal::ExtendedBlockProto& previous() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_previous();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_previous();
  void set_allocated_previous(::Hdfs::Internal::ExtendedBlockProto* previous);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_previous() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_previous();
  public:

  // optional uint64 fileId = 5 [default = 0];
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 fileid() const;
  void set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fileid() const;
  void _internal_set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddBlockRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > excludenodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> favorednodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* previous_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fileid_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AddBlockResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AddBlockResponseProto) */ {
 public:
  AddBlockResponseProto();
  virtual ~AddBlockResponseProto();

  AddBlockResponseProto(const AddBlockResponseProto& from);
  AddBlockResponseProto(AddBlockResponseProto&& from) noexcept
    : AddBlockResponseProto() {
    *this = ::std::move(from);
  }

  inline AddBlockResponseProto& operator=(const AddBlockResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBlockResponseProto& operator=(AddBlockResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddBlockResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBlockResponseProto* internal_default_instance() {
    return reinterpret_cast<const AddBlockResponseProto*>(
               &_AddBlockResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddBlockResponseProto& a, AddBlockResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBlockResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddBlockResponseProto* New() const final {
    return CreateMaybeMessage<AddBlockResponseProto>(nullptr);
  }

  AddBlockResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddBlockResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddBlockResponseProto& from);
  void MergeFrom(const AddBlockResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBlockResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AddBlockResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::LocatedBlockProto& block() const;
  ::Hdfs::Internal::LocatedBlockProto* release_block();
  ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);
  private:
  const ::Hdfs::Internal::LocatedBlockProto& _internal_block() const;
  ::Hdfs::Internal::LocatedBlockProto* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddBlockResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::LocatedBlockProto* block_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetAdditionalDatanodeRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetAdditionalDatanodeRequestProto) */ {
 public:
  GetAdditionalDatanodeRequestProto();
  virtual ~GetAdditionalDatanodeRequestProto();

  GetAdditionalDatanodeRequestProto(const GetAdditionalDatanodeRequestProto& from);
  GetAdditionalDatanodeRequestProto(GetAdditionalDatanodeRequestProto&& from) noexcept
    : GetAdditionalDatanodeRequestProto() {
    *this = ::std::move(from);
  }

  inline GetAdditionalDatanodeRequestProto& operator=(const GetAdditionalDatanodeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAdditionalDatanodeRequestProto& operator=(GetAdditionalDatanodeRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAdditionalDatanodeRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAdditionalDatanodeRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetAdditionalDatanodeRequestProto*>(
               &_GetAdditionalDatanodeRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetAdditionalDatanodeRequestProto& a, GetAdditionalDatanodeRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAdditionalDatanodeRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAdditionalDatanodeRequestProto* New() const final {
    return CreateMaybeMessage<GetAdditionalDatanodeRequestProto>(nullptr);
  }

  GetAdditionalDatanodeRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAdditionalDatanodeRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAdditionalDatanodeRequestProto& from);
  void MergeFrom(const GetAdditionalDatanodeRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAdditionalDatanodeRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetAdditionalDatanodeRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExistingsFieldNumber = 3,
    kExcludesFieldNumber = 4,
    kExistingStorageUuidsFieldNumber = 7,
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 6,
    kBlkFieldNumber = 2,
    kNumAdditionalNodesFieldNumber = 5,
  };
  // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
  int existings_size() const;
  private:
  int _internal_existings_size() const;
  public:
  void clear_existings();
  ::Hdfs::Internal::DatanodeInfoProto* mutable_existings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_existings();
  private:
  const ::Hdfs::Internal::DatanodeInfoProto& _internal_existings(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* _internal_add_existings();
  public:
  const ::Hdfs::Internal::DatanodeInfoProto& existings(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* add_existings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      existings() const;

  // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
  int excludes_size() const;
  private:
  int _internal_excludes_size() const;
  public:
  void clear_excludes();
  ::Hdfs::Internal::DatanodeInfoProto* mutable_excludes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_excludes();
  private:
  const ::Hdfs::Internal::DatanodeInfoProto& _internal_excludes(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* _internal_add_excludes();
  public:
  const ::Hdfs::Internal::DatanodeInfoProto& excludes(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* add_excludes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      excludes() const;

  // repeated string existingStorageUuids = 7;
  int existingstorageuuids_size() const;
  private:
  int _internal_existingstorageuuids_size() const;
  public:
  void clear_existingstorageuuids();
  const std::string& existingstorageuuids(int index) const;
  std::string* mutable_existingstorageuuids(int index);
  void set_existingstorageuuids(int index, const std::string& value);
  void set_existingstorageuuids(int index, std::string&& value);
  void set_existingstorageuuids(int index, const char* value);
  void set_existingstorageuuids(int index, const char* value, size_t size);
  std::string* add_existingstorageuuids();
  void add_existingstorageuuids(const std::string& value);
  void add_existingstorageuuids(std::string&& value);
  void add_existingstorageuuids(const char* value);
  void add_existingstorageuuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& existingstorageuuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_existingstorageuuids();
  private:
  const std::string& _internal_existingstorageuuids(int index) const;
  std::string* _internal_add_existingstorageuuids();
  public:

  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 6;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
  bool has_blk() const;
  private:
  bool _internal_has_blk() const;
  public:
  void clear_blk();
  const ::Hdfs::Internal::ExtendedBlockProto& blk() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_blk();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_blk();
  void set_allocated_blk(::Hdfs::Internal::ExtendedBlockProto* blk);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_blk() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_blk();
  public:

  // required uint32 numAdditionalNodes = 5;
  bool has_numadditionalnodes() const;
  private:
  bool _internal_has_numadditionalnodes() const;
  public:
  void clear_numadditionalnodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 numadditionalnodes() const;
  void set_numadditionalnodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numadditionalnodes() const;
  void _internal_set_numadditionalnodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > existings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > excludes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> existingstorageuuids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* blk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numadditionalnodes_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetAdditionalDatanodeResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetAdditionalDatanodeResponseProto) */ {
 public:
  GetAdditionalDatanodeResponseProto();
  virtual ~GetAdditionalDatanodeResponseProto();

  GetAdditionalDatanodeResponseProto(const GetAdditionalDatanodeResponseProto& from);
  GetAdditionalDatanodeResponseProto(GetAdditionalDatanodeResponseProto&& from) noexcept
    : GetAdditionalDatanodeResponseProto() {
    *this = ::std::move(from);
  }

  inline GetAdditionalDatanodeResponseProto& operator=(const GetAdditionalDatanodeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAdditionalDatanodeResponseProto& operator=(GetAdditionalDatanodeResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAdditionalDatanodeResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAdditionalDatanodeResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetAdditionalDatanodeResponseProto*>(
               &_GetAdditionalDatanodeResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetAdditionalDatanodeResponseProto& a, GetAdditionalDatanodeResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAdditionalDatanodeResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAdditionalDatanodeResponseProto* New() const final {
    return CreateMaybeMessage<GetAdditionalDatanodeResponseProto>(nullptr);
  }

  GetAdditionalDatanodeResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAdditionalDatanodeResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAdditionalDatanodeResponseProto& from);
  void MergeFrom(const GetAdditionalDatanodeResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAdditionalDatanodeResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetAdditionalDatanodeResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::LocatedBlockProto& block() const;
  ::Hdfs::Internal::LocatedBlockProto* release_block();
  ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);
  private:
  const ::Hdfs::Internal::LocatedBlockProto& _internal_block() const;
  ::Hdfs::Internal::LocatedBlockProto* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::LocatedBlockProto* block_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CompleteRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CompleteRequestProto) */ {
 public:
  CompleteRequestProto();
  virtual ~CompleteRequestProto();

  CompleteRequestProto(const CompleteRequestProto& from);
  CompleteRequestProto(CompleteRequestProto&& from) noexcept
    : CompleteRequestProto() {
    *this = ::std::move(from);
  }

  inline CompleteRequestProto& operator=(const CompleteRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteRequestProto& operator=(CompleteRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteRequestProto* internal_default_instance() {
    return reinterpret_cast<const CompleteRequestProto*>(
               &_CompleteRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CompleteRequestProto& a, CompleteRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteRequestProto* New() const final {
    return CreateMaybeMessage<CompleteRequestProto>(nullptr);
  }

  CompleteRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteRequestProto& from);
  void MergeFrom(const CompleteRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CompleteRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 2,
    kLastFieldNumber = 3,
    kFileIdFieldNumber = 4,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 2;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
  bool has_last() const;
  private:
  bool _internal_has_last() const;
  public:
  void clear_last();
  const ::Hdfs::Internal::ExtendedBlockProto& last() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_last();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_last();
  void set_allocated_last(::Hdfs::Internal::ExtendedBlockProto* last);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_last() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_last();
  public:

  // optional uint64 fileId = 4 [default = 0];
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 fileid() const;
  void set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fileid() const;
  void _internal_set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CompleteRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* last_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fileid_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CompleteResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CompleteResponseProto) */ {
 public:
  CompleteResponseProto();
  virtual ~CompleteResponseProto();

  CompleteResponseProto(const CompleteResponseProto& from);
  CompleteResponseProto(CompleteResponseProto&& from) noexcept
    : CompleteResponseProto() {
    *this = ::std::move(from);
  }

  inline CompleteResponseProto& operator=(const CompleteResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteResponseProto& operator=(CompleteResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteResponseProto* internal_default_instance() {
    return reinterpret_cast<const CompleteResponseProto*>(
               &_CompleteResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CompleteResponseProto& a, CompleteResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteResponseProto* New() const final {
    return CreateMaybeMessage<CompleteResponseProto>(nullptr);
  }

  CompleteResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteResponseProto& from);
  void MergeFrom(const CompleteResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CompleteResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CompleteResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ReportBadBlocksRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ReportBadBlocksRequestProto) */ {
 public:
  ReportBadBlocksRequestProto();
  virtual ~ReportBadBlocksRequestProto();

  ReportBadBlocksRequestProto(const ReportBadBlocksRequestProto& from);
  ReportBadBlocksRequestProto(ReportBadBlocksRequestProto&& from) noexcept
    : ReportBadBlocksRequestProto() {
    *this = ::std::move(from);
  }

  inline ReportBadBlocksRequestProto& operator=(const ReportBadBlocksRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportBadBlocksRequestProto& operator=(ReportBadBlocksRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportBadBlocksRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportBadBlocksRequestProto* internal_default_instance() {
    return reinterpret_cast<const ReportBadBlocksRequestProto*>(
               &_ReportBadBlocksRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ReportBadBlocksRequestProto& a, ReportBadBlocksRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportBadBlocksRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportBadBlocksRequestProto* New() const final {
    return CreateMaybeMessage<ReportBadBlocksRequestProto>(nullptr);
  }

  ReportBadBlocksRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportBadBlocksRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportBadBlocksRequestProto& from);
  void MergeFrom(const ReportBadBlocksRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportBadBlocksRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ReportBadBlocksRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::Hdfs::Internal::LocatedBlockProto* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >*
      mutable_blocks();
  private:
  const ::Hdfs::Internal::LocatedBlockProto& _internal_blocks(int index) const;
  ::Hdfs::Internal::LocatedBlockProto* _internal_add_blocks();
  public:
  const ::Hdfs::Internal::LocatedBlockProto& blocks(int index) const;
  ::Hdfs::Internal::LocatedBlockProto* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReportBadBlocksRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto > blocks_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ReportBadBlocksResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ReportBadBlocksResponseProto) */ {
 public:
  ReportBadBlocksResponseProto();
  virtual ~ReportBadBlocksResponseProto();

  ReportBadBlocksResponseProto(const ReportBadBlocksResponseProto& from);
  ReportBadBlocksResponseProto(ReportBadBlocksResponseProto&& from) noexcept
    : ReportBadBlocksResponseProto() {
    *this = ::std::move(from);
  }

  inline ReportBadBlocksResponseProto& operator=(const ReportBadBlocksResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportBadBlocksResponseProto& operator=(ReportBadBlocksResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportBadBlocksResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportBadBlocksResponseProto* internal_default_instance() {
    return reinterpret_cast<const ReportBadBlocksResponseProto*>(
               &_ReportBadBlocksResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ReportBadBlocksResponseProto& a, ReportBadBlocksResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportBadBlocksResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportBadBlocksResponseProto* New() const final {
    return CreateMaybeMessage<ReportBadBlocksResponseProto>(nullptr);
  }

  ReportBadBlocksResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportBadBlocksResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportBadBlocksResponseProto& from);
  void MergeFrom(const ReportBadBlocksResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportBadBlocksResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ReportBadBlocksResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReportBadBlocksResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ConcatRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ConcatRequestProto) */ {
 public:
  ConcatRequestProto();
  virtual ~ConcatRequestProto();

  ConcatRequestProto(const ConcatRequestProto& from);
  ConcatRequestProto(ConcatRequestProto&& from) noexcept
    : ConcatRequestProto() {
    *this = ::std::move(from);
  }

  inline ConcatRequestProto& operator=(const ConcatRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatRequestProto& operator=(ConcatRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConcatRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatRequestProto* internal_default_instance() {
    return reinterpret_cast<const ConcatRequestProto*>(
               &_ConcatRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ConcatRequestProto& a, ConcatRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcatRequestProto* New() const final {
    return CreateMaybeMessage<ConcatRequestProto>(nullptr);
  }

  ConcatRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcatRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcatRequestProto& from);
  void MergeFrom(const ConcatRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ConcatRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcsFieldNumber = 2,
    kTrgFieldNumber = 1,
  };
  // repeated string srcs = 2;
  int srcs_size() const;
  private:
  int _internal_srcs_size() const;
  public:
  void clear_srcs();
  const std::string& srcs(int index) const;
  std::string* mutable_srcs(int index);
  void set_srcs(int index, const std::string& value);
  void set_srcs(int index, std::string&& value);
  void set_srcs(int index, const char* value);
  void set_srcs(int index, const char* value, size_t size);
  std::string* add_srcs();
  void add_srcs(const std::string& value);
  void add_srcs(std::string&& value);
  void add_srcs(const char* value);
  void add_srcs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& srcs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_srcs();
  private:
  const std::string& _internal_srcs(int index) const;
  std::string* _internal_add_srcs();
  public:

  // required string trg = 1;
  bool has_trg() const;
  private:
  bool _internal_has_trg() const;
  public:
  void clear_trg();
  const std::string& trg() const;
  void set_trg(const std::string& value);
  void set_trg(std::string&& value);
  void set_trg(const char* value);
  void set_trg(const char* value, size_t size);
  std::string* mutable_trg();
  std::string* release_trg();
  void set_allocated_trg(std::string* trg);
  private:
  const std::string& _internal_trg() const;
  void _internal_set_trg(const std::string& value);
  std::string* _internal_mutable_trg();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ConcatRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> srcs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trg_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ConcatResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ConcatResponseProto) */ {
 public:
  ConcatResponseProto();
  virtual ~ConcatResponseProto();

  ConcatResponseProto(const ConcatResponseProto& from);
  ConcatResponseProto(ConcatResponseProto&& from) noexcept
    : ConcatResponseProto() {
    *this = ::std::move(from);
  }

  inline ConcatResponseProto& operator=(const ConcatResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatResponseProto& operator=(ConcatResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConcatResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatResponseProto* internal_default_instance() {
    return reinterpret_cast<const ConcatResponseProto*>(
               &_ConcatResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ConcatResponseProto& a, ConcatResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcatResponseProto* New() const final {
    return CreateMaybeMessage<ConcatResponseProto>(nullptr);
  }

  ConcatResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcatResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcatResponseProto& from);
  void MergeFrom(const ConcatResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ConcatResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ConcatResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class TruncateRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.TruncateRequestProto) */ {
 public:
  TruncateRequestProto();
  virtual ~TruncateRequestProto();

  TruncateRequestProto(const TruncateRequestProto& from);
  TruncateRequestProto(TruncateRequestProto&& from) noexcept
    : TruncateRequestProto() {
    *this = ::std::move(from);
  }

  inline TruncateRequestProto& operator=(const TruncateRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TruncateRequestProto& operator=(TruncateRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TruncateRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateRequestProto* internal_default_instance() {
    return reinterpret_cast<const TruncateRequestProto*>(
               &_TruncateRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TruncateRequestProto& a, TruncateRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TruncateRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TruncateRequestProto* New() const final {
    return CreateMaybeMessage<TruncateRequestProto>(nullptr);
  }

  TruncateRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TruncateRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TruncateRequestProto& from);
  void MergeFrom(const TruncateRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncateRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.TruncateRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 3,
    kNewLengthFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 3;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // required uint64 newLength = 2;
  bool has_newlength() const;
  private:
  bool _internal_has_newlength() const;
  public:
  void clear_newlength();
  ::PROTOBUF_NAMESPACE_ID::uint64 newlength() const;
  void set_newlength(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_newlength() const;
  void _internal_set_newlength(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.TruncateRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 newlength_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class TruncateResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.TruncateResponseProto) */ {
 public:
  TruncateResponseProto();
  virtual ~TruncateResponseProto();

  TruncateResponseProto(const TruncateResponseProto& from);
  TruncateResponseProto(TruncateResponseProto&& from) noexcept
    : TruncateResponseProto() {
    *this = ::std::move(from);
  }

  inline TruncateResponseProto& operator=(const TruncateResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TruncateResponseProto& operator=(TruncateResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TruncateResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateResponseProto* internal_default_instance() {
    return reinterpret_cast<const TruncateResponseProto*>(
               &_TruncateResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TruncateResponseProto& a, TruncateResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TruncateResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TruncateResponseProto* New() const final {
    return CreateMaybeMessage<TruncateResponseProto>(nullptr);
  }

  TruncateResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TruncateResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TruncateResponseProto& from);
  void MergeFrom(const TruncateResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncateResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.TruncateResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.TruncateResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetLeaseRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetLeaseRequestProto) */ {
 public:
  GetLeaseRequestProto();
  virtual ~GetLeaseRequestProto();

  GetLeaseRequestProto(const GetLeaseRequestProto& from);
  GetLeaseRequestProto(GetLeaseRequestProto&& from) noexcept
    : GetLeaseRequestProto() {
    *this = ::std::move(from);
  }

  inline GetLeaseRequestProto& operator=(const GetLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLeaseRequestProto& operator=(GetLeaseRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLeaseRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLeaseRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetLeaseRequestProto*>(
               &_GetLeaseRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetLeaseRequestProto& a, GetLeaseRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLeaseRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLeaseRequestProto* New() const final {
    return CreateMaybeMessage<GetLeaseRequestProto>(nullptr);
  }

  GetLeaseRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLeaseRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLeaseRequestProto& from);
  void MergeFrom(const GetLeaseRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaseRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetLeaseRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 2;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLeaseRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetLeaseResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetLeaseResponseProto) */ {
 public:
  GetLeaseResponseProto();
  virtual ~GetLeaseResponseProto();

  GetLeaseResponseProto(const GetLeaseResponseProto& from);
  GetLeaseResponseProto(GetLeaseResponseProto&& from) noexcept
    : GetLeaseResponseProto() {
    *this = ::std::move(from);
  }

  inline GetLeaseResponseProto& operator=(const GetLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLeaseResponseProto& operator=(GetLeaseResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLeaseResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLeaseResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetLeaseResponseProto*>(
               &_GetLeaseResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetLeaseResponseProto& a, GetLeaseResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLeaseResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLeaseResponseProto* New() const final {
    return CreateMaybeMessage<GetLeaseResponseProto>(nullptr);
  }

  GetLeaseResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLeaseResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLeaseResponseProto& from);
  void MergeFrom(const GetLeaseResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaseResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetLeaseResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLeaseResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ReleaseLeaseRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ReleaseLeaseRequestProto) */ {
 public:
  ReleaseLeaseRequestProto();
  virtual ~ReleaseLeaseRequestProto();

  ReleaseLeaseRequestProto(const ReleaseLeaseRequestProto& from);
  ReleaseLeaseRequestProto(ReleaseLeaseRequestProto&& from) noexcept
    : ReleaseLeaseRequestProto() {
    *this = ::std::move(from);
  }

  inline ReleaseLeaseRequestProto& operator=(const ReleaseLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseLeaseRequestProto& operator=(ReleaseLeaseRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseLeaseRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseLeaseRequestProto* internal_default_instance() {
    return reinterpret_cast<const ReleaseLeaseRequestProto*>(
               &_ReleaseLeaseRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ReleaseLeaseRequestProto& a, ReleaseLeaseRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseLeaseRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseLeaseRequestProto* New() const final {
    return CreateMaybeMessage<ReleaseLeaseRequestProto>(nullptr);
  }

  ReleaseLeaseRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseLeaseRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseLeaseRequestProto& from);
  void MergeFrom(const ReleaseLeaseRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseLeaseRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ReleaseLeaseRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 2;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReleaseLeaseRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ReleaseLeaseResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ReleaseLeaseResponseProto) */ {
 public:
  ReleaseLeaseResponseProto();
  virtual ~ReleaseLeaseResponseProto();

  ReleaseLeaseResponseProto(const ReleaseLeaseResponseProto& from);
  ReleaseLeaseResponseProto(ReleaseLeaseResponseProto&& from) noexcept
    : ReleaseLeaseResponseProto() {
    *this = ::std::move(from);
  }

  inline ReleaseLeaseResponseProto& operator=(const ReleaseLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseLeaseResponseProto& operator=(ReleaseLeaseResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseLeaseResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseLeaseResponseProto* internal_default_instance() {
    return reinterpret_cast<const ReleaseLeaseResponseProto*>(
               &_ReleaseLeaseResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ReleaseLeaseResponseProto& a, ReleaseLeaseResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseLeaseResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseLeaseResponseProto* New() const final {
    return CreateMaybeMessage<ReleaseLeaseResponseProto>(nullptr);
  }

  ReleaseLeaseResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseLeaseResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseLeaseResponseProto& from);
  void MergeFrom(const ReleaseLeaseResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseLeaseResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ReleaseLeaseResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReleaseLeaseResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RenameRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenameRequestProto) */ {
 public:
  RenameRequestProto();
  virtual ~RenameRequestProto();

  RenameRequestProto(const RenameRequestProto& from);
  RenameRequestProto(RenameRequestProto&& from) noexcept
    : RenameRequestProto() {
    *this = ::std::move(from);
  }

  inline RenameRequestProto& operator=(const RenameRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameRequestProto& operator=(RenameRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameRequestProto* internal_default_instance() {
    return reinterpret_cast<const RenameRequestProto*>(
               &_RenameRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RenameRequestProto& a, RenameRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameRequestProto* New() const final {
    return CreateMaybeMessage<RenameRequestProto>(nullptr);
  }

  RenameRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameRequestProto& from);
  void MergeFrom(const RenameRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenameRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kDstFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string dst = 2;
  bool has_dst() const;
  private:
  bool _internal_has_dst() const;
  public:
  void clear_dst();
  const std::string& dst() const;
  void set_dst(const std::string& value);
  void set_dst(std::string&& value);
  void set_dst(const char* value);
  void set_dst(const char* value, size_t size);
  std::string* mutable_dst();
  std::string* release_dst();
  void set_allocated_dst(std::string* dst);
  private:
  const std::string& _internal_dst() const;
  void _internal_set_dst(const std::string& value);
  std::string* _internal_mutable_dst();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RenameResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenameResponseProto) */ {
 public:
  RenameResponseProto();
  virtual ~RenameResponseProto();

  RenameResponseProto(const RenameResponseProto& from);
  RenameResponseProto(RenameResponseProto&& from) noexcept
    : RenameResponseProto() {
    *this = ::std::move(from);
  }

  inline RenameResponseProto& operator=(const RenameResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameResponseProto& operator=(RenameResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameResponseProto* internal_default_instance() {
    return reinterpret_cast<const RenameResponseProto*>(
               &_RenameResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RenameResponseProto& a, RenameResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameResponseProto* New() const final {
    return CreateMaybeMessage<RenameResponseProto>(nullptr);
  }

  RenameResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameResponseProto& from);
  void MergeFrom(const RenameResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenameResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class Rename2RequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.Rename2RequestProto) */ {
 public:
  Rename2RequestProto();
  virtual ~Rename2RequestProto();

  Rename2RequestProto(const Rename2RequestProto& from);
  Rename2RequestProto(Rename2RequestProto&& from) noexcept
    : Rename2RequestProto() {
    *this = ::std::move(from);
  }

  inline Rename2RequestProto& operator=(const Rename2RequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rename2RequestProto& operator=(Rename2RequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rename2RequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rename2RequestProto* internal_default_instance() {
    return reinterpret_cast<const Rename2RequestProto*>(
               &_Rename2RequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Rename2RequestProto& a, Rename2RequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(Rename2RequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rename2RequestProto* New() const final {
    return CreateMaybeMessage<Rename2RequestProto>(nullptr);
  }

  Rename2RequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rename2RequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rename2RequestProto& from);
  void MergeFrom(const Rename2RequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rename2RequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.Rename2RequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kDstFieldNumber = 2,
    kOverwriteDestFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string dst = 2;
  bool has_dst() const;
  private:
  bool _internal_has_dst() const;
  public:
  void clear_dst();
  const std::string& dst() const;
  void set_dst(const std::string& value);
  void set_dst(std::string&& value);
  void set_dst(const char* value);
  void set_dst(const char* value, size_t size);
  std::string* mutable_dst();
  std::string* release_dst();
  void set_allocated_dst(std::string* dst);
  private:
  const std::string& _internal_dst() const;
  void _internal_set_dst(const std::string& value);
  std::string* _internal_mutable_dst();
  public:

  // required bool overwriteDest = 3;
  bool has_overwritedest() const;
  private:
  bool _internal_has_overwritedest() const;
  public:
  void clear_overwritedest();
  bool overwritedest() const;
  void set_overwritedest(bool value);
  private:
  bool _internal_overwritedest() const;
  void _internal_set_overwritedest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.Rename2RequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_;
  bool overwritedest_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class Rename2ResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.Rename2ResponseProto) */ {
 public:
  Rename2ResponseProto();
  virtual ~Rename2ResponseProto();

  Rename2ResponseProto(const Rename2ResponseProto& from);
  Rename2ResponseProto(Rename2ResponseProto&& from) noexcept
    : Rename2ResponseProto() {
    *this = ::std::move(from);
  }

  inline Rename2ResponseProto& operator=(const Rename2ResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rename2ResponseProto& operator=(Rename2ResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rename2ResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rename2ResponseProto* internal_default_instance() {
    return reinterpret_cast<const Rename2ResponseProto*>(
               &_Rename2ResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Rename2ResponseProto& a, Rename2ResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(Rename2ResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rename2ResponseProto* New() const final {
    return CreateMaybeMessage<Rename2ResponseProto>(nullptr);
  }

  Rename2ResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rename2ResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rename2ResponseProto& from);
  void MergeFrom(const Rename2ResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rename2ResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.Rename2ResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.Rename2ResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DeleteRequestProto) */ {
 public:
  DeleteRequestProto();
  virtual ~DeleteRequestProto();

  DeleteRequestProto(const DeleteRequestProto& from);
  DeleteRequestProto(DeleteRequestProto&& from) noexcept
    : DeleteRequestProto() {
    *this = ::std::move(from);
  }

  inline DeleteRequestProto& operator=(const DeleteRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequestProto& operator=(DeleteRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequestProto* internal_default_instance() {
    return reinterpret_cast<const DeleteRequestProto*>(
               &_DeleteRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DeleteRequestProto& a, DeleteRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequestProto* New() const final {
    return CreateMaybeMessage<DeleteRequestProto>(nullptr);
  }

  DeleteRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRequestProto& from);
  void MergeFrom(const DeleteRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DeleteRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kRecursiveFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required bool recursive = 2;
  bool has_recursive() const;
  private:
  bool _internal_has_recursive() const;
  public:
  void clear_recursive();
  bool recursive() const;
  void set_recursive(bool value);
  private:
  bool _internal_recursive() const;
  void _internal_set_recursive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  bool recursive_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DeleteResponseProto) */ {
 public:
  DeleteResponseProto();
  virtual ~DeleteResponseProto();

  DeleteResponseProto(const DeleteResponseProto& from);
  DeleteResponseProto(DeleteResponseProto&& from) noexcept
    : DeleteResponseProto() {
    *this = ::std::move(from);
  }

  inline DeleteResponseProto& operator=(const DeleteResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponseProto& operator=(DeleteResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponseProto* internal_default_instance() {
    return reinterpret_cast<const DeleteResponseProto*>(
               &_DeleteResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DeleteResponseProto& a, DeleteResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponseProto* New() const final {
    return CreateMaybeMessage<DeleteResponseProto>(nullptr);
  }

  DeleteResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResponseProto& from);
  void MergeFrom(const DeleteResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DeleteResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class MkdirsRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.MkdirsRequestProto) */ {
 public:
  MkdirsRequestProto();
  virtual ~MkdirsRequestProto();

  MkdirsRequestProto(const MkdirsRequestProto& from);
  MkdirsRequestProto(MkdirsRequestProto&& from) noexcept
    : MkdirsRequestProto() {
    *this = ::std::move(from);
  }

  inline MkdirsRequestProto& operator=(const MkdirsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkdirsRequestProto& operator=(MkdirsRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MkdirsRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MkdirsRequestProto* internal_default_instance() {
    return reinterpret_cast<const MkdirsRequestProto*>(
               &_MkdirsRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(MkdirsRequestProto& a, MkdirsRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MkdirsRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MkdirsRequestProto* New() const final {
    return CreateMaybeMessage<MkdirsRequestProto>(nullptr);
  }

  MkdirsRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MkdirsRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MkdirsRequestProto& from);
  void MergeFrom(const MkdirsRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkdirsRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.MkdirsRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kMaskedFieldNumber = 2,
    kCreateParentFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  bool has_masked() const;
  private:
  bool _internal_has_masked() const;
  public:
  void clear_masked();
  const ::Hdfs::Internal::FsPermissionProto& masked() const;
  ::Hdfs::Internal::FsPermissionProto* release_masked();
  ::Hdfs::Internal::FsPermissionProto* mutable_masked();
  void set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked);
  private:
  const ::Hdfs::Internal::FsPermissionProto& _internal_masked() const;
  ::Hdfs::Internal::FsPermissionProto* _internal_mutable_masked();
  public:

  // required bool createParent = 3;
  bool has_createparent() const;
  private:
  bool _internal_has_createparent() const;
  public:
  void clear_createparent();
  bool createparent() const;
  void set_createparent(bool value);
  private:
  bool _internal_createparent() const;
  void _internal_set_createparent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MkdirsRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::Hdfs::Internal::FsPermissionProto* masked_;
  bool createparent_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class MkdirsResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.MkdirsResponseProto) */ {
 public:
  MkdirsResponseProto();
  virtual ~MkdirsResponseProto();

  MkdirsResponseProto(const MkdirsResponseProto& from);
  MkdirsResponseProto(MkdirsResponseProto&& from) noexcept
    : MkdirsResponseProto() {
    *this = ::std::move(from);
  }

  inline MkdirsResponseProto& operator=(const MkdirsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkdirsResponseProto& operator=(MkdirsResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MkdirsResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MkdirsResponseProto* internal_default_instance() {
    return reinterpret_cast<const MkdirsResponseProto*>(
               &_MkdirsResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(MkdirsResponseProto& a, MkdirsResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MkdirsResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MkdirsResponseProto* New() const final {
    return CreateMaybeMessage<MkdirsResponseProto>(nullptr);
  }

  MkdirsResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MkdirsResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MkdirsResponseProto& from);
  void MergeFrom(const MkdirsResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkdirsResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.MkdirsResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MkdirsResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetListingRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetListingRequestProto) */ {
 public:
  GetListingRequestProto();
  virtual ~GetListingRequestProto();

  GetListingRequestProto(const GetListingRequestProto& from);
  GetListingRequestProto(GetListingRequestProto&& from) noexcept
    : GetListingRequestProto() {
    *this = ::std::move(from);
  }

  inline GetListingRequestProto& operator=(const GetListingRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListingRequestProto& operator=(GetListingRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetListingRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListingRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetListingRequestProto*>(
               &_GetListingRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetListingRequestProto& a, GetListingRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListingRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListingRequestProto* New() const final {
    return CreateMaybeMessage<GetListingRequestProto>(nullptr);
  }

  GetListingRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListingRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetListingRequestProto& from);
  void MergeFrom(const GetListingRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListingRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetListingRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kStartAfterFieldNumber = 2,
    kNeedLocationFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required bytes startAfter = 2;
  bool has_startafter() const;
  private:
  bool _internal_has_startafter() const;
  public:
  void clear_startafter();
  const std::string& startafter() const;
  void set_startafter(const std::string& value);
  void set_startafter(std::string&& value);
  void set_startafter(const char* value);
  void set_startafter(const void* value, size_t size);
  std::string* mutable_startafter();
  std::string* release_startafter();
  void set_allocated_startafter(std::string* startafter);
  private:
  const std::string& _internal_startafter() const;
  void _internal_set_startafter(const std::string& value);
  std::string* _internal_mutable_startafter();
  public:

  // required bool needLocation = 3;
  bool has_needlocation() const;
  private:
  bool _internal_has_needlocation() const;
  public:
  void clear_needlocation();
  bool needlocation() const;
  void set_needlocation(bool value);
  private:
  bool _internal_needlocation() const;
  void _internal_set_needlocation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetListingRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startafter_;
  bool needlocation_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetListingResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetListingResponseProto) */ {
 public:
  GetListingResponseProto();
  virtual ~GetListingResponseProto();

  GetListingResponseProto(const GetListingResponseProto& from);
  GetListingResponseProto(GetListingResponseProto&& from) noexcept
    : GetListingResponseProto() {
    *this = ::std::move(from);
  }

  inline GetListingResponseProto& operator=(const GetListingResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetListingResponseProto& operator=(GetListingResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetListingResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListingResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetListingResponseProto*>(
               &_GetListingResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetListingResponseProto& a, GetListingResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetListingResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetListingResponseProto* New() const final {
    return CreateMaybeMessage<GetListingResponseProto>(nullptr);
  }

  GetListingResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetListingResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetListingResponseProto& from);
  void MergeFrom(const GetListingResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListingResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetListingResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirListFieldNumber = 1,
  };
  // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
  bool has_dirlist() const;
  private:
  bool _internal_has_dirlist() const;
  public:
  void clear_dirlist();
  const ::Hdfs::Internal::DirectoryListingProto& dirlist() const;
  ::Hdfs::Internal::DirectoryListingProto* release_dirlist();
  ::Hdfs::Internal::DirectoryListingProto* mutable_dirlist();
  void set_allocated_dirlist(::Hdfs::Internal::DirectoryListingProto* dirlist);
  private:
  const ::Hdfs::Internal::DirectoryListingProto& _internal_dirlist() const;
  ::Hdfs::Internal::DirectoryListingProto* _internal_mutable_dirlist();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetListingResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::DirectoryListingProto* dirlist_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshottableDirListingRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetSnapshottableDirListingRequestProto) */ {
 public:
  GetSnapshottableDirListingRequestProto();
  virtual ~GetSnapshottableDirListingRequestProto();

  GetSnapshottableDirListingRequestProto(const GetSnapshottableDirListingRequestProto& from);
  GetSnapshottableDirListingRequestProto(GetSnapshottableDirListingRequestProto&& from) noexcept
    : GetSnapshottableDirListingRequestProto() {
    *this = ::std::move(from);
  }

  inline GetSnapshottableDirListingRequestProto& operator=(const GetSnapshottableDirListingRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshottableDirListingRequestProto& operator=(GetSnapshottableDirListingRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSnapshottableDirListingRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSnapshottableDirListingRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetSnapshottableDirListingRequestProto*>(
               &_GetSnapshottableDirListingRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetSnapshottableDirListingRequestProto& a, GetSnapshottableDirListingRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshottableDirListingRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshottableDirListingRequestProto* New() const final {
    return CreateMaybeMessage<GetSnapshottableDirListingRequestProto>(nullptr);
  }

  GetSnapshottableDirListingRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshottableDirListingRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSnapshottableDirListingRequestProto& from);
  void MergeFrom(const GetSnapshottableDirListingRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshottableDirListingRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetSnapshottableDirListingRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshottableDirListingResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetSnapshottableDirListingResponseProto) */ {
 public:
  GetSnapshottableDirListingResponseProto();
  virtual ~GetSnapshottableDirListingResponseProto();

  GetSnapshottableDirListingResponseProto(const GetSnapshottableDirListingResponseProto& from);
  GetSnapshottableDirListingResponseProto(GetSnapshottableDirListingResponseProto&& from) noexcept
    : GetSnapshottableDirListingResponseProto() {
    *this = ::std::move(from);
  }

  inline GetSnapshottableDirListingResponseProto& operator=(const GetSnapshottableDirListingResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshottableDirListingResponseProto& operator=(GetSnapshottableDirListingResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSnapshottableDirListingResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSnapshottableDirListingResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetSnapshottableDirListingResponseProto*>(
               &_GetSnapshottableDirListingResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetSnapshottableDirListingResponseProto& a, GetSnapshottableDirListingResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshottableDirListingResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshottableDirListingResponseProto* New() const final {
    return CreateMaybeMessage<GetSnapshottableDirListingResponseProto>(nullptr);
  }

  GetSnapshottableDirListingResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshottableDirListingResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSnapshottableDirListingResponseProto& from);
  void MergeFrom(const GetSnapshottableDirListingResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshottableDirListingResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetSnapshottableDirListingResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshottableDirListFieldNumber = 1,
  };
  // optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
  bool has_snapshottabledirlist() const;
  private:
  bool _internal_has_snapshottabledirlist() const;
  public:
  void clear_snapshottabledirlist();
  const ::Hdfs::Internal::SnapshottableDirectoryListingProto& snapshottabledirlist() const;
  ::Hdfs::Internal::SnapshottableDirectoryListingProto* release_snapshottabledirlist();
  ::Hdfs::Internal::SnapshottableDirectoryListingProto* mutable_snapshottabledirlist();
  void set_allocated_snapshottabledirlist(::Hdfs::Internal::SnapshottableDirectoryListingProto* snapshottabledirlist);
  private:
  const ::Hdfs::Internal::SnapshottableDirectoryListingProto& _internal_snapshottabledirlist() const;
  ::Hdfs::Internal::SnapshottableDirectoryListingProto* _internal_mutable_snapshottabledirlist();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::SnapshottableDirectoryListingProto* snapshottabledirlist_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotDiffReportRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetSnapshotDiffReportRequestProto) */ {
 public:
  GetSnapshotDiffReportRequestProto();
  virtual ~GetSnapshotDiffReportRequestProto();

  GetSnapshotDiffReportRequestProto(const GetSnapshotDiffReportRequestProto& from);
  GetSnapshotDiffReportRequestProto(GetSnapshotDiffReportRequestProto&& from) noexcept
    : GetSnapshotDiffReportRequestProto() {
    *this = ::std::move(from);
  }

  inline GetSnapshotDiffReportRequestProto& operator=(const GetSnapshotDiffReportRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotDiffReportRequestProto& operator=(GetSnapshotDiffReportRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSnapshotDiffReportRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSnapshotDiffReportRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotDiffReportRequestProto*>(
               &_GetSnapshotDiffReportRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetSnapshotDiffReportRequestProto& a, GetSnapshotDiffReportRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotDiffReportRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshotDiffReportRequestProto* New() const final {
    return CreateMaybeMessage<GetSnapshotDiffReportRequestProto>(nullptr);
  }

  GetSnapshotDiffReportRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshotDiffReportRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSnapshotDiffReportRequestProto& from);
  void MergeFrom(const GetSnapshotDiffReportRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotDiffReportRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetSnapshotDiffReportRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotRootFieldNumber = 1,
    kFromSnapshotFieldNumber = 2,
    kToSnapshotFieldNumber = 3,
  };
  // required string snapshotRoot = 1;
  bool has_snapshotroot() const;
  private:
  bool _internal_has_snapshotroot() const;
  public:
  void clear_snapshotroot();
  const std::string& snapshotroot() const;
  void set_snapshotroot(const std::string& value);
  void set_snapshotroot(std::string&& value);
  void set_snapshotroot(const char* value);
  void set_snapshotroot(const char* value, size_t size);
  std::string* mutable_snapshotroot();
  std::string* release_snapshotroot();
  void set_allocated_snapshotroot(std::string* snapshotroot);
  private:
  const std::string& _internal_snapshotroot() const;
  void _internal_set_snapshotroot(const std::string& value);
  std::string* _internal_mutable_snapshotroot();
  public:

  // required string fromSnapshot = 2;
  bool has_fromsnapshot() const;
  private:
  bool _internal_has_fromsnapshot() const;
  public:
  void clear_fromsnapshot();
  const std::string& fromsnapshot() const;
  void set_fromsnapshot(const std::string& value);
  void set_fromsnapshot(std::string&& value);
  void set_fromsnapshot(const char* value);
  void set_fromsnapshot(const char* value, size_t size);
  std::string* mutable_fromsnapshot();
  std::string* release_fromsnapshot();
  void set_allocated_fromsnapshot(std::string* fromsnapshot);
  private:
  const std::string& _internal_fromsnapshot() const;
  void _internal_set_fromsnapshot(const std::string& value);
  std::string* _internal_mutable_fromsnapshot();
  public:

  // required string toSnapshot = 3;
  bool has_tosnapshot() const;
  private:
  bool _internal_has_tosnapshot() const;
  public:
  void clear_tosnapshot();
  const std::string& tosnapshot() const;
  void set_tosnapshot(const std::string& value);
  void set_tosnapshot(std::string&& value);
  void set_tosnapshot(const char* value);
  void set_tosnapshot(const char* value, size_t size);
  std::string* mutable_tosnapshot();
  std::string* release_tosnapshot();
  void set_allocated_tosnapshot(std::string* tosnapshot);
  private:
  const std::string& _internal_tosnapshot() const;
  void _internal_set_tosnapshot(const std::string& value);
  std::string* _internal_mutable_tosnapshot();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromsnapshot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tosnapshot_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotDiffReportResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetSnapshotDiffReportResponseProto) */ {
 public:
  GetSnapshotDiffReportResponseProto();
  virtual ~GetSnapshotDiffReportResponseProto();

  GetSnapshotDiffReportResponseProto(const GetSnapshotDiffReportResponseProto& from);
  GetSnapshotDiffReportResponseProto(GetSnapshotDiffReportResponseProto&& from) noexcept
    : GetSnapshotDiffReportResponseProto() {
    *this = ::std::move(from);
  }

  inline GetSnapshotDiffReportResponseProto& operator=(const GetSnapshotDiffReportResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotDiffReportResponseProto& operator=(GetSnapshotDiffReportResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSnapshotDiffReportResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSnapshotDiffReportResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotDiffReportResponseProto*>(
               &_GetSnapshotDiffReportResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetSnapshotDiffReportResponseProto& a, GetSnapshotDiffReportResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotDiffReportResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshotDiffReportResponseProto* New() const final {
    return CreateMaybeMessage<GetSnapshotDiffReportResponseProto>(nullptr);
  }

  GetSnapshotDiffReportResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshotDiffReportResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSnapshotDiffReportResponseProto& from);
  void MergeFrom(const GetSnapshotDiffReportResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotDiffReportResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetSnapshotDiffReportResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffReportFieldNumber = 1,
  };
  // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
  bool has_diffreport() const;
  private:
  bool _internal_has_diffreport() const;
  public:
  void clear_diffreport();
  const ::Hdfs::Internal::SnapshotDiffReportProto& diffreport() const;
  ::Hdfs::Internal::SnapshotDiffReportProto* release_diffreport();
  ::Hdfs::Internal::SnapshotDiffReportProto* mutable_diffreport();
  void set_allocated_diffreport(::Hdfs::Internal::SnapshotDiffReportProto* diffreport);
  private:
  const ::Hdfs::Internal::SnapshotDiffReportProto& _internal_diffreport() const;
  ::Hdfs::Internal::SnapshotDiffReportProto* _internal_mutable_diffreport();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::SnapshotDiffReportProto* diffreport_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RenewLeaseRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenewLeaseRequestProto) */ {
 public:
  RenewLeaseRequestProto();
  virtual ~RenewLeaseRequestProto();

  RenewLeaseRequestProto(const RenewLeaseRequestProto& from);
  RenewLeaseRequestProto(RenewLeaseRequestProto&& from) noexcept
    : RenewLeaseRequestProto() {
    *this = ::std::move(from);
  }

  inline RenewLeaseRequestProto& operator=(const RenewLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenewLeaseRequestProto& operator=(RenewLeaseRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenewLeaseRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenewLeaseRequestProto* internal_default_instance() {
    return reinterpret_cast<const RenewLeaseRequestProto*>(
               &_RenewLeaseRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(RenewLeaseRequestProto& a, RenewLeaseRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenewLeaseRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenewLeaseRequestProto* New() const final {
    return CreateMaybeMessage<RenewLeaseRequestProto>(nullptr);
  }

  RenewLeaseRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenewLeaseRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenewLeaseRequestProto& from);
  void MergeFrom(const RenewLeaseRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenewLeaseRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenewLeaseRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientNameFieldNumber = 1,
  };
  // required string clientName = 1;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenewLeaseRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RenewLeaseResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenewLeaseResponseProto) */ {
 public:
  RenewLeaseResponseProto();
  virtual ~RenewLeaseResponseProto();

  RenewLeaseResponseProto(const RenewLeaseResponseProto& from);
  RenewLeaseResponseProto(RenewLeaseResponseProto&& from) noexcept
    : RenewLeaseResponseProto() {
    *this = ::std::move(from);
  }

  inline RenewLeaseResponseProto& operator=(const RenewLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenewLeaseResponseProto& operator=(RenewLeaseResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenewLeaseResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenewLeaseResponseProto* internal_default_instance() {
    return reinterpret_cast<const RenewLeaseResponseProto*>(
               &_RenewLeaseResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RenewLeaseResponseProto& a, RenewLeaseResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenewLeaseResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenewLeaseResponseProto* New() const final {
    return CreateMaybeMessage<RenewLeaseResponseProto>(nullptr);
  }

  RenewLeaseResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenewLeaseResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenewLeaseResponseProto& from);
  void MergeFrom(const RenewLeaseResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenewLeaseResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenewLeaseResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenewLeaseResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RecoverLeaseRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RecoverLeaseRequestProto) */ {
 public:
  RecoverLeaseRequestProto();
  virtual ~RecoverLeaseRequestProto();

  RecoverLeaseRequestProto(const RecoverLeaseRequestProto& from);
  RecoverLeaseRequestProto(RecoverLeaseRequestProto&& from) noexcept
    : RecoverLeaseRequestProto() {
    *this = ::std::move(from);
  }

  inline RecoverLeaseRequestProto& operator=(const RecoverLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoverLeaseRequestProto& operator=(RecoverLeaseRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecoverLeaseRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverLeaseRequestProto* internal_default_instance() {
    return reinterpret_cast<const RecoverLeaseRequestProto*>(
               &_RecoverLeaseRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(RecoverLeaseRequestProto& a, RecoverLeaseRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoverLeaseRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecoverLeaseRequestProto* New() const final {
    return CreateMaybeMessage<RecoverLeaseRequestProto>(nullptr);
  }

  RecoverLeaseRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecoverLeaseRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecoverLeaseRequestProto& from);
  void MergeFrom(const RecoverLeaseRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverLeaseRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RecoverLeaseRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kClientNameFieldNumber = 2,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string clientName = 2;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RecoverLeaseRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RecoverLeaseResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RecoverLeaseResponseProto) */ {
 public:
  RecoverLeaseResponseProto();
  virtual ~RecoverLeaseResponseProto();

  RecoverLeaseResponseProto(const RecoverLeaseResponseProto& from);
  RecoverLeaseResponseProto(RecoverLeaseResponseProto&& from) noexcept
    : RecoverLeaseResponseProto() {
    *this = ::std::move(from);
  }

  inline RecoverLeaseResponseProto& operator=(const RecoverLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoverLeaseResponseProto& operator=(RecoverLeaseResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecoverLeaseResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverLeaseResponseProto* internal_default_instance() {
    return reinterpret_cast<const RecoverLeaseResponseProto*>(
               &_RecoverLeaseResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(RecoverLeaseResponseProto& a, RecoverLeaseResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoverLeaseResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecoverLeaseResponseProto* New() const final {
    return CreateMaybeMessage<RecoverLeaseResponseProto>(nullptr);
  }

  RecoverLeaseResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecoverLeaseResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecoverLeaseResponseProto& from);
  void MergeFrom(const RecoverLeaseResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverLeaseResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RecoverLeaseResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RecoverLeaseResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetFsStatusRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetFsStatusRequestProto) */ {
 public:
  GetFsStatusRequestProto();
  virtual ~GetFsStatusRequestProto();

  GetFsStatusRequestProto(const GetFsStatusRequestProto& from);
  GetFsStatusRequestProto(GetFsStatusRequestProto&& from) noexcept
    : GetFsStatusRequestProto() {
    *this = ::std::move(from);
  }

  inline GetFsStatusRequestProto& operator=(const GetFsStatusRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFsStatusRequestProto& operator=(GetFsStatusRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFsStatusRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFsStatusRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetFsStatusRequestProto*>(
               &_GetFsStatusRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetFsStatusRequestProto& a, GetFsStatusRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFsStatusRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFsStatusRequestProto* New() const final {
    return CreateMaybeMessage<GetFsStatusRequestProto>(nullptr);
  }

  GetFsStatusRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFsStatusRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFsStatusRequestProto& from);
  void MergeFrom(const GetFsStatusRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFsStatusRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetFsStatusRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFsStatusRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetFsStatsResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetFsStatsResponseProto) */ {
 public:
  GetFsStatsResponseProto();
  virtual ~GetFsStatsResponseProto();

  GetFsStatsResponseProto(const GetFsStatsResponseProto& from);
  GetFsStatsResponseProto(GetFsStatsResponseProto&& from) noexcept
    : GetFsStatsResponseProto() {
    *this = ::std::move(from);
  }

  inline GetFsStatsResponseProto& operator=(const GetFsStatsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFsStatsResponseProto& operator=(GetFsStatsResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFsStatsResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFsStatsResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetFsStatsResponseProto*>(
               &_GetFsStatsResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetFsStatsResponseProto& a, GetFsStatsResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFsStatsResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFsStatsResponseProto* New() const final {
    return CreateMaybeMessage<GetFsStatsResponseProto>(nullptr);
  }

  GetFsStatsResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFsStatsResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFsStatsResponseProto& from);
  void MergeFrom(const GetFsStatsResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFsStatsResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetFsStatsResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFieldNumber = 1,
    kUsedFieldNumber = 2,
    kRemainingFieldNumber = 3,
    kUnderReplicatedFieldNumber = 4,
    kCorruptBlocksFieldNumber = 5,
    kMissingBlocksFieldNumber = 6,
  };
  // required uint64 capacity = 1;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 used = 2;
  bool has_used() const;
  private:
  bool _internal_has_used() const;
  public:
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 remaining = 3;
  bool has_remaining() const;
  private:
  bool _internal_has_remaining() const;
  public:
  void clear_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining() const;
  void set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining() const;
  void _internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 under_replicated = 4;
  bool has_under_replicated() const;
  private:
  bool _internal_has_under_replicated() const;
  public:
  void clear_under_replicated();
  ::PROTOBUF_NAMESPACE_ID::uint64 under_replicated() const;
  void set_under_replicated(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_under_replicated() const;
  void _internal_set_under_replicated(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 corrupt_blocks = 5;
  bool has_corrupt_blocks() const;
  private:
  bool _internal_has_corrupt_blocks() const;
  public:
  void clear_corrupt_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 corrupt_blocks() const;
  void set_corrupt_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_corrupt_blocks() const;
  void _internal_set_corrupt_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 missing_blocks = 6;
  bool has_missing_blocks() const;
  private:
  bool _internal_has_missing_blocks() const;
  public:
  void clear_missing_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 missing_blocks() const;
  void set_missing_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_missing_blocks() const;
  void _internal_set_missing_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFsStatsResponseProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint64 under_replicated_;
  ::PROTOBUF_NAMESPACE_ID::uint64 corrupt_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 missing_blocks_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetDatanodeReportRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetDatanodeReportRequestProto) */ {
 public:
  GetDatanodeReportRequestProto();
  virtual ~GetDatanodeReportRequestProto();

  GetDatanodeReportRequestProto(const GetDatanodeReportRequestProto& from);
  GetDatanodeReportRequestProto(GetDatanodeReportRequestProto&& from) noexcept
    : GetDatanodeReportRequestProto() {
    *this = ::std::move(from);
  }

  inline GetDatanodeReportRequestProto& operator=(const GetDatanodeReportRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatanodeReportRequestProto& operator=(GetDatanodeReportRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatanodeReportRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatanodeReportRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetDatanodeReportRequestProto*>(
               &_GetDatanodeReportRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetDatanodeReportRequestProto& a, GetDatanodeReportRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatanodeReportRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatanodeReportRequestProto* New() const final {
    return CreateMaybeMessage<GetDatanodeReportRequestProto>(nullptr);
  }

  GetDatanodeReportRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatanodeReportRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatanodeReportRequestProto& from);
  void MergeFrom(const GetDatanodeReportRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatanodeReportRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetDatanodeReportRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Hdfs::Internal::DatanodeReportTypeProto type() const;
  void set_type(::Hdfs::Internal::DatanodeReportTypeProto value);
  private:
  ::Hdfs::Internal::DatanodeReportTypeProto _internal_type() const;
  void _internal_set_type(::Hdfs::Internal::DatanodeReportTypeProto value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDatanodeReportRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetDatanodeReportResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetDatanodeReportResponseProto) */ {
 public:
  GetDatanodeReportResponseProto();
  virtual ~GetDatanodeReportResponseProto();

  GetDatanodeReportResponseProto(const GetDatanodeReportResponseProto& from);
  GetDatanodeReportResponseProto(GetDatanodeReportResponseProto&& from) noexcept
    : GetDatanodeReportResponseProto() {
    *this = ::std::move(from);
  }

  inline GetDatanodeReportResponseProto& operator=(const GetDatanodeReportResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatanodeReportResponseProto& operator=(GetDatanodeReportResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatanodeReportResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatanodeReportResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetDatanodeReportResponseProto*>(
               &_GetDatanodeReportResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetDatanodeReportResponseProto& a, GetDatanodeReportResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatanodeReportResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatanodeReportResponseProto* New() const final {
    return CreateMaybeMessage<GetDatanodeReportResponseProto>(nullptr);
  }

  GetDatanodeReportResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatanodeReportResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatanodeReportResponseProto& from);
  void MergeFrom(const GetDatanodeReportResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatanodeReportResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetDatanodeReportResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiFieldNumber = 1,
  };
  // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
  int di_size() const;
  private:
  int _internal_di_size() const;
  public:
  void clear_di();
  ::Hdfs::Internal::DatanodeInfoProto* mutable_di(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_di();
  private:
  const ::Hdfs::Internal::DatanodeInfoProto& _internal_di(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* _internal_add_di();
  public:
  const ::Hdfs::Internal::DatanodeInfoProto& di(int index) const;
  ::Hdfs::Internal::DatanodeInfoProto* add_di();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      di() const;

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDatanodeReportResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > di_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetPreferredBlockSizeRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetPreferredBlockSizeRequestProto) */ {
 public:
  GetPreferredBlockSizeRequestProto();
  virtual ~GetPreferredBlockSizeRequestProto();

  GetPreferredBlockSizeRequestProto(const GetPreferredBlockSizeRequestProto& from);
  GetPreferredBlockSizeRequestProto(GetPreferredBlockSizeRequestProto&& from) noexcept
    : GetPreferredBlockSizeRequestProto() {
    *this = ::std::move(from);
  }

  inline GetPreferredBlockSizeRequestProto& operator=(const GetPreferredBlockSizeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPreferredBlockSizeRequestProto& operator=(GetPreferredBlockSizeRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPreferredBlockSizeRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPreferredBlockSizeRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetPreferredBlockSizeRequestProto*>(
               &_GetPreferredBlockSizeRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetPreferredBlockSizeRequestProto& a, GetPreferredBlockSizeRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPreferredBlockSizeRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPreferredBlockSizeRequestProto* New() const final {
    return CreateMaybeMessage<GetPreferredBlockSizeRequestProto>(nullptr);
  }

  GetPreferredBlockSizeRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPreferredBlockSizeRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPreferredBlockSizeRequestProto& from);
  void MergeFrom(const GetPreferredBlockSizeRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPreferredBlockSizeRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetPreferredBlockSizeRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // required string filename = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetPreferredBlockSizeResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetPreferredBlockSizeResponseProto) */ {
 public:
  GetPreferredBlockSizeResponseProto();
  virtual ~GetPreferredBlockSizeResponseProto();

  GetPreferredBlockSizeResponseProto(const GetPreferredBlockSizeResponseProto& from);
  GetPreferredBlockSizeResponseProto(GetPreferredBlockSizeResponseProto&& from) noexcept
    : GetPreferredBlockSizeResponseProto() {
    *this = ::std::move(from);
  }

  inline GetPreferredBlockSizeResponseProto& operator=(const GetPreferredBlockSizeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPreferredBlockSizeResponseProto& operator=(GetPreferredBlockSizeResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPreferredBlockSizeResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPreferredBlockSizeResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetPreferredBlockSizeResponseProto*>(
               &_GetPreferredBlockSizeResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetPreferredBlockSizeResponseProto& a, GetPreferredBlockSizeResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPreferredBlockSizeResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPreferredBlockSizeResponseProto* New() const final {
    return CreateMaybeMessage<GetPreferredBlockSizeResponseProto>(nullptr);
  }

  GetPreferredBlockSizeResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPreferredBlockSizeResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPreferredBlockSizeResponseProto& from);
  void MergeFrom(const GetPreferredBlockSizeResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPreferredBlockSizeResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetPreferredBlockSizeResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsizeFieldNumber = 1,
  };
  // required uint64 bsize = 1;
  bool has_bsize() const;
  private:
  bool _internal_has_bsize() const;
  public:
  void clear_bsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 bsize() const;
  void set_bsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bsize() const;
  void _internal_set_bsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bsize_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetSafeModeRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetSafeModeRequestProto) */ {
 public:
  SetSafeModeRequestProto();
  virtual ~SetSafeModeRequestProto();

  SetSafeModeRequestProto(const SetSafeModeRequestProto& from);
  SetSafeModeRequestProto(SetSafeModeRequestProto&& from) noexcept
    : SetSafeModeRequestProto() {
    *this = ::std::move(from);
  }

  inline SetSafeModeRequestProto& operator=(const SetSafeModeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafeModeRequestProto& operator=(SetSafeModeRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSafeModeRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSafeModeRequestProto* internal_default_instance() {
    return reinterpret_cast<const SetSafeModeRequestProto*>(
               &_SetSafeModeRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SetSafeModeRequestProto& a, SetSafeModeRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSafeModeRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSafeModeRequestProto* New() const final {
    return CreateMaybeMessage<SetSafeModeRequestProto>(nullptr);
  }

  SetSafeModeRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSafeModeRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSafeModeRequestProto& from);
  void MergeFrom(const SetSafeModeRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSafeModeRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetSafeModeRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckedFieldNumber = 2,
    kActionFieldNumber = 1,
  };
  // optional bool checked = 2 [default = false];
  bool has_checked() const;
  private:
  bool _internal_has_checked() const;
  public:
  void clear_checked();
  bool checked() const;
  void set_checked(bool value);
  private:
  bool _internal_checked() const;
  void _internal_set_checked(bool value);
  public:

  // required .Hdfs.Internal.SafeModeActionProto action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::Hdfs::Internal::SafeModeActionProto action() const;
  void set_action(::Hdfs::Internal::SafeModeActionProto value);
  private:
  ::Hdfs::Internal::SafeModeActionProto _internal_action() const;
  void _internal_set_action(::Hdfs::Internal::SafeModeActionProto value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetSafeModeRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool checked_;
  int action_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetSafeModeResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetSafeModeResponseProto) */ {
 public:
  SetSafeModeResponseProto();
  virtual ~SetSafeModeResponseProto();

  SetSafeModeResponseProto(const SetSafeModeResponseProto& from);
  SetSafeModeResponseProto(SetSafeModeResponseProto&& from) noexcept
    : SetSafeModeResponseProto() {
    *this = ::std::move(from);
  }

  inline SetSafeModeResponseProto& operator=(const SetSafeModeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafeModeResponseProto& operator=(SetSafeModeResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSafeModeResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSafeModeResponseProto* internal_default_instance() {
    return reinterpret_cast<const SetSafeModeResponseProto*>(
               &_SetSafeModeResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SetSafeModeResponseProto& a, SetSafeModeResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSafeModeResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSafeModeResponseProto* New() const final {
    return CreateMaybeMessage<SetSafeModeResponseProto>(nullptr);
  }

  SetSafeModeResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSafeModeResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSafeModeResponseProto& from);
  void MergeFrom(const SetSafeModeResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSafeModeResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetSafeModeResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetSafeModeResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SaveNamespaceRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SaveNamespaceRequestProto) */ {
 public:
  SaveNamespaceRequestProto();
  virtual ~SaveNamespaceRequestProto();

  SaveNamespaceRequestProto(const SaveNamespaceRequestProto& from);
  SaveNamespaceRequestProto(SaveNamespaceRequestProto&& from) noexcept
    : SaveNamespaceRequestProto() {
    *this = ::std::move(from);
  }

  inline SaveNamespaceRequestProto& operator=(const SaveNamespaceRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveNamespaceRequestProto& operator=(SaveNamespaceRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveNamespaceRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveNamespaceRequestProto* internal_default_instance() {
    return reinterpret_cast<const SaveNamespaceRequestProto*>(
               &_SaveNamespaceRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SaveNamespaceRequestProto& a, SaveNamespaceRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveNamespaceRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveNamespaceRequestProto* New() const final {
    return CreateMaybeMessage<SaveNamespaceRequestProto>(nullptr);
  }

  SaveNamespaceRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveNamespaceRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveNamespaceRequestProto& from);
  void MergeFrom(const SaveNamespaceRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveNamespaceRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SaveNamespaceRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SaveNamespaceRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SaveNamespaceResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SaveNamespaceResponseProto) */ {
 public:
  SaveNamespaceResponseProto();
  virtual ~SaveNamespaceResponseProto();

  SaveNamespaceResponseProto(const SaveNamespaceResponseProto& from);
  SaveNamespaceResponseProto(SaveNamespaceResponseProto&& from) noexcept
    : SaveNamespaceResponseProto() {
    *this = ::std::move(from);
  }

  inline SaveNamespaceResponseProto& operator=(const SaveNamespaceResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveNamespaceResponseProto& operator=(SaveNamespaceResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveNamespaceResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveNamespaceResponseProto* internal_default_instance() {
    return reinterpret_cast<const SaveNamespaceResponseProto*>(
               &_SaveNamespaceResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SaveNamespaceResponseProto& a, SaveNamespaceResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveNamespaceResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveNamespaceResponseProto* New() const final {
    return CreateMaybeMessage<SaveNamespaceResponseProto>(nullptr);
  }

  SaveNamespaceResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveNamespaceResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveNamespaceResponseProto& from);
  void MergeFrom(const SaveNamespaceResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveNamespaceResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SaveNamespaceResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SaveNamespaceResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RollEditsRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RollEditsRequestProto) */ {
 public:
  RollEditsRequestProto();
  virtual ~RollEditsRequestProto();

  RollEditsRequestProto(const RollEditsRequestProto& from);
  RollEditsRequestProto(RollEditsRequestProto&& from) noexcept
    : RollEditsRequestProto() {
    *this = ::std::move(from);
  }

  inline RollEditsRequestProto& operator=(const RollEditsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollEditsRequestProto& operator=(RollEditsRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RollEditsRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollEditsRequestProto* internal_default_instance() {
    return reinterpret_cast<const RollEditsRequestProto*>(
               &_RollEditsRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RollEditsRequestProto& a, RollEditsRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RollEditsRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RollEditsRequestProto* New() const final {
    return CreateMaybeMessage<RollEditsRequestProto>(nullptr);
  }

  RollEditsRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RollEditsRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RollEditsRequestProto& from);
  void MergeFrom(const RollEditsRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollEditsRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RollEditsRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RollEditsRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RollEditsResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RollEditsResponseProto) */ {
 public:
  RollEditsResponseProto();
  virtual ~RollEditsResponseProto();

  RollEditsResponseProto(const RollEditsResponseProto& from);
  RollEditsResponseProto(RollEditsResponseProto&& from) noexcept
    : RollEditsResponseProto() {
    *this = ::std::move(from);
  }

  inline RollEditsResponseProto& operator=(const RollEditsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollEditsResponseProto& operator=(RollEditsResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RollEditsResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollEditsResponseProto* internal_default_instance() {
    return reinterpret_cast<const RollEditsResponseProto*>(
               &_RollEditsResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RollEditsResponseProto& a, RollEditsResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RollEditsResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RollEditsResponseProto* New() const final {
    return CreateMaybeMessage<RollEditsResponseProto>(nullptr);
  }

  RollEditsResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RollEditsResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RollEditsResponseProto& from);
  void MergeFrom(const RollEditsResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollEditsResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RollEditsResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewSegmentTxIdFieldNumber = 1,
  };
  // required uint64 newSegmentTxId = 1;
  bool has_newsegmenttxid() const;
  private:
  bool _internal_has_newsegmenttxid() const;
  public:
  void clear_newsegmenttxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 newsegmenttxid() const;
  void set_newsegmenttxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_newsegmenttxid() const;
  void _internal_set_newsegmenttxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RollEditsResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 newsegmenttxid_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RestoreFailedStorageRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RestoreFailedStorageRequestProto) */ {
 public:
  RestoreFailedStorageRequestProto();
  virtual ~RestoreFailedStorageRequestProto();

  RestoreFailedStorageRequestProto(const RestoreFailedStorageRequestProto& from);
  RestoreFailedStorageRequestProto(RestoreFailedStorageRequestProto&& from) noexcept
    : RestoreFailedStorageRequestProto() {
    *this = ::std::move(from);
  }

  inline RestoreFailedStorageRequestProto& operator=(const RestoreFailedStorageRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreFailedStorageRequestProto& operator=(RestoreFailedStorageRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreFailedStorageRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreFailedStorageRequestProto* internal_default_instance() {
    return reinterpret_cast<const RestoreFailedStorageRequestProto*>(
               &_RestoreFailedStorageRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(RestoreFailedStorageRequestProto& a, RestoreFailedStorageRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreFailedStorageRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreFailedStorageRequestProto* New() const final {
    return CreateMaybeMessage<RestoreFailedStorageRequestProto>(nullptr);
  }

  RestoreFailedStorageRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreFailedStorageRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreFailedStorageRequestProto& from);
  void MergeFrom(const RestoreFailedStorageRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreFailedStorageRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RestoreFailedStorageRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // required string arg = 1;
  bool has_arg() const;
  private:
  bool _internal_has_arg() const;
  public:
  void clear_arg();
  const std::string& arg() const;
  void set_arg(const std::string& value);
  void set_arg(std::string&& value);
  void set_arg(const char* value);
  void set_arg(const char* value, size_t size);
  std::string* mutable_arg();
  std::string* release_arg();
  void set_allocated_arg(std::string* arg);
  private:
  const std::string& _internal_arg() const;
  void _internal_set_arg(const std::string& value);
  std::string* _internal_mutable_arg();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RestoreFailedStorageRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arg_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RestoreFailedStorageResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RestoreFailedStorageResponseProto) */ {
 public:
  RestoreFailedStorageResponseProto();
  virtual ~RestoreFailedStorageResponseProto();

  RestoreFailedStorageResponseProto(const RestoreFailedStorageResponseProto& from);
  RestoreFailedStorageResponseProto(RestoreFailedStorageResponseProto&& from) noexcept
    : RestoreFailedStorageResponseProto() {
    *this = ::std::move(from);
  }

  inline RestoreFailedStorageResponseProto& operator=(const RestoreFailedStorageResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreFailedStorageResponseProto& operator=(RestoreFailedStorageResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreFailedStorageResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreFailedStorageResponseProto* internal_default_instance() {
    return reinterpret_cast<const RestoreFailedStorageResponseProto*>(
               &_RestoreFailedStorageResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(RestoreFailedStorageResponseProto& a, RestoreFailedStorageResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreFailedStorageResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreFailedStorageResponseProto* New() const final {
    return CreateMaybeMessage<RestoreFailedStorageResponseProto>(nullptr);
  }

  RestoreFailedStorageResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreFailedStorageResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreFailedStorageResponseProto& from);
  void MergeFrom(const RestoreFailedStorageResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreFailedStorageResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RestoreFailedStorageResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RestoreFailedStorageResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RefreshNodesRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RefreshNodesRequestProto) */ {
 public:
  RefreshNodesRequestProto();
  virtual ~RefreshNodesRequestProto();

  RefreshNodesRequestProto(const RefreshNodesRequestProto& from);
  RefreshNodesRequestProto(RefreshNodesRequestProto&& from) noexcept
    : RefreshNodesRequestProto() {
    *this = ::std::move(from);
  }

  inline RefreshNodesRequestProto& operator=(const RefreshNodesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshNodesRequestProto& operator=(RefreshNodesRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshNodesRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshNodesRequestProto* internal_default_instance() {
    return reinterpret_cast<const RefreshNodesRequestProto*>(
               &_RefreshNodesRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(RefreshNodesRequestProto& a, RefreshNodesRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshNodesRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshNodesRequestProto* New() const final {
    return CreateMaybeMessage<RefreshNodesRequestProto>(nullptr);
  }

  RefreshNodesRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshNodesRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshNodesRequestProto& from);
  void MergeFrom(const RefreshNodesRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshNodesRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RefreshNodesRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RefreshNodesRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RefreshNodesResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RefreshNodesResponseProto) */ {
 public:
  RefreshNodesResponseProto();
  virtual ~RefreshNodesResponseProto();

  RefreshNodesResponseProto(const RefreshNodesResponseProto& from);
  RefreshNodesResponseProto(RefreshNodesResponseProto&& from) noexcept
    : RefreshNodesResponseProto() {
    *this = ::std::move(from);
  }

  inline RefreshNodesResponseProto& operator=(const RefreshNodesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshNodesResponseProto& operator=(RefreshNodesResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshNodesResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshNodesResponseProto* internal_default_instance() {
    return reinterpret_cast<const RefreshNodesResponseProto*>(
               &_RefreshNodesResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RefreshNodesResponseProto& a, RefreshNodesResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshNodesResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshNodesResponseProto* New() const final {
    return CreateMaybeMessage<RefreshNodesResponseProto>(nullptr);
  }

  RefreshNodesResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshNodesResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshNodesResponseProto& from);
  void MergeFrom(const RefreshNodesResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshNodesResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RefreshNodesResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RefreshNodesResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class FinalizeUpgradeRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.FinalizeUpgradeRequestProto) */ {
 public:
  FinalizeUpgradeRequestProto();
  virtual ~FinalizeUpgradeRequestProto();

  FinalizeUpgradeRequestProto(const FinalizeUpgradeRequestProto& from);
  FinalizeUpgradeRequestProto(FinalizeUpgradeRequestProto&& from) noexcept
    : FinalizeUpgradeRequestProto() {
    *this = ::std::move(from);
  }

  inline FinalizeUpgradeRequestProto& operator=(const FinalizeUpgradeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalizeUpgradeRequestProto& operator=(FinalizeUpgradeRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinalizeUpgradeRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinalizeUpgradeRequestProto* internal_default_instance() {
    return reinterpret_cast<const FinalizeUpgradeRequestProto*>(
               &_FinalizeUpgradeRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(FinalizeUpgradeRequestProto& a, FinalizeUpgradeRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalizeUpgradeRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinalizeUpgradeRequestProto* New() const final {
    return CreateMaybeMessage<FinalizeUpgradeRequestProto>(nullptr);
  }

  FinalizeUpgradeRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinalizeUpgradeRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinalizeUpgradeRequestProto& from);
  void MergeFrom(const FinalizeUpgradeRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalizeUpgradeRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.FinalizeUpgradeRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FinalizeUpgradeRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class FinalizeUpgradeResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.FinalizeUpgradeResponseProto) */ {
 public:
  FinalizeUpgradeResponseProto();
  virtual ~FinalizeUpgradeResponseProto();

  FinalizeUpgradeResponseProto(const FinalizeUpgradeResponseProto& from);
  FinalizeUpgradeResponseProto(FinalizeUpgradeResponseProto&& from) noexcept
    : FinalizeUpgradeResponseProto() {
    *this = ::std::move(from);
  }

  inline FinalizeUpgradeResponseProto& operator=(const FinalizeUpgradeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalizeUpgradeResponseProto& operator=(FinalizeUpgradeResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinalizeUpgradeResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinalizeUpgradeResponseProto* internal_default_instance() {
    return reinterpret_cast<const FinalizeUpgradeResponseProto*>(
               &_FinalizeUpgradeResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(FinalizeUpgradeResponseProto& a, FinalizeUpgradeResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalizeUpgradeResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinalizeUpgradeResponseProto* New() const final {
    return CreateMaybeMessage<FinalizeUpgradeResponseProto>(nullptr);
  }

  FinalizeUpgradeResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinalizeUpgradeResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinalizeUpgradeResponseProto& from);
  void MergeFrom(const FinalizeUpgradeResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalizeUpgradeResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.FinalizeUpgradeResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FinalizeUpgradeResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ListCorruptFileBlocksRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListCorruptFileBlocksRequestProto) */ {
 public:
  ListCorruptFileBlocksRequestProto();
  virtual ~ListCorruptFileBlocksRequestProto();

  ListCorruptFileBlocksRequestProto(const ListCorruptFileBlocksRequestProto& from);
  ListCorruptFileBlocksRequestProto(ListCorruptFileBlocksRequestProto&& from) noexcept
    : ListCorruptFileBlocksRequestProto() {
    *this = ::std::move(from);
  }

  inline ListCorruptFileBlocksRequestProto& operator=(const ListCorruptFileBlocksRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCorruptFileBlocksRequestProto& operator=(ListCorruptFileBlocksRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCorruptFileBlocksRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCorruptFileBlocksRequestProto* internal_default_instance() {
    return reinterpret_cast<const ListCorruptFileBlocksRequestProto*>(
               &_ListCorruptFileBlocksRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ListCorruptFileBlocksRequestProto& a, ListCorruptFileBlocksRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCorruptFileBlocksRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCorruptFileBlocksRequestProto* New() const final {
    return CreateMaybeMessage<ListCorruptFileBlocksRequestProto>(nullptr);
  }

  ListCorruptFileBlocksRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCorruptFileBlocksRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCorruptFileBlocksRequestProto& from);
  void MergeFrom(const ListCorruptFileBlocksRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCorruptFileBlocksRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListCorruptFileBlocksRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kCookieFieldNumber = 2,
  };
  // required string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string cookie = 2;
  bool has_cookie() const;
  private:
  bool _internal_has_cookie() const;
  public:
  void clear_cookie();
  const std::string& cookie() const;
  void set_cookie(const std::string& value);
  void set_cookie(std::string&& value);
  void set_cookie(const char* value);
  void set_cookie(const char* value, size_t size);
  std::string* mutable_cookie();
  std::string* release_cookie();
  void set_allocated_cookie(std::string* cookie);
  private:
  const std::string& _internal_cookie() const;
  void _internal_set_cookie(const std::string& value);
  std::string* _internal_mutable_cookie();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookie_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ListCorruptFileBlocksResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListCorruptFileBlocksResponseProto) */ {
 public:
  ListCorruptFileBlocksResponseProto();
  virtual ~ListCorruptFileBlocksResponseProto();

  ListCorruptFileBlocksResponseProto(const ListCorruptFileBlocksResponseProto& from);
  ListCorruptFileBlocksResponseProto(ListCorruptFileBlocksResponseProto&& from) noexcept
    : ListCorruptFileBlocksResponseProto() {
    *this = ::std::move(from);
  }

  inline ListCorruptFileBlocksResponseProto& operator=(const ListCorruptFileBlocksResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCorruptFileBlocksResponseProto& operator=(ListCorruptFileBlocksResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCorruptFileBlocksResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCorruptFileBlocksResponseProto* internal_default_instance() {
    return reinterpret_cast<const ListCorruptFileBlocksResponseProto*>(
               &_ListCorruptFileBlocksResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ListCorruptFileBlocksResponseProto& a, ListCorruptFileBlocksResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCorruptFileBlocksResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCorruptFileBlocksResponseProto* New() const final {
    return CreateMaybeMessage<ListCorruptFileBlocksResponseProto>(nullptr);
  }

  ListCorruptFileBlocksResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCorruptFileBlocksResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCorruptFileBlocksResponseProto& from);
  void MergeFrom(const ListCorruptFileBlocksResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCorruptFileBlocksResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListCorruptFileBlocksResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorruptFieldNumber = 1,
  };
  // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
  bool has_corrupt() const;
  private:
  bool _internal_has_corrupt() const;
  public:
  void clear_corrupt();
  const ::Hdfs::Internal::CorruptFileBlocksProto& corrupt() const;
  ::Hdfs::Internal::CorruptFileBlocksProto* release_corrupt();
  ::Hdfs::Internal::CorruptFileBlocksProto* mutable_corrupt();
  void set_allocated_corrupt(::Hdfs::Internal::CorruptFileBlocksProto* corrupt);
  private:
  const ::Hdfs::Internal::CorruptFileBlocksProto& _internal_corrupt() const;
  ::Hdfs::Internal::CorruptFileBlocksProto* _internal_mutable_corrupt();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CorruptFileBlocksProto* corrupt_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class MetaSaveRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.MetaSaveRequestProto) */ {
 public:
  MetaSaveRequestProto();
  virtual ~MetaSaveRequestProto();

  MetaSaveRequestProto(const MetaSaveRequestProto& from);
  MetaSaveRequestProto(MetaSaveRequestProto&& from) noexcept
    : MetaSaveRequestProto() {
    *this = ::std::move(from);
  }

  inline MetaSaveRequestProto& operator=(const MetaSaveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaSaveRequestProto& operator=(MetaSaveRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetaSaveRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaSaveRequestProto* internal_default_instance() {
    return reinterpret_cast<const MetaSaveRequestProto*>(
               &_MetaSaveRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(MetaSaveRequestProto& a, MetaSaveRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaSaveRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaSaveRequestProto* New() const final {
    return CreateMaybeMessage<MetaSaveRequestProto>(nullptr);
  }

  MetaSaveRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaSaveRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaSaveRequestProto& from);
  void MergeFrom(const MetaSaveRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaSaveRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.MetaSaveRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // required string filename = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MetaSaveRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class MetaSaveResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.MetaSaveResponseProto) */ {
 public:
  MetaSaveResponseProto();
  virtual ~MetaSaveResponseProto();

  MetaSaveResponseProto(const MetaSaveResponseProto& from);
  MetaSaveResponseProto(MetaSaveResponseProto&& from) noexcept
    : MetaSaveResponseProto() {
    *this = ::std::move(from);
  }

  inline MetaSaveResponseProto& operator=(const MetaSaveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaSaveResponseProto& operator=(MetaSaveResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetaSaveResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaSaveResponseProto* internal_default_instance() {
    return reinterpret_cast<const MetaSaveResponseProto*>(
               &_MetaSaveResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(MetaSaveResponseProto& a, MetaSaveResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaSaveResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaSaveResponseProto* New() const final {
    return CreateMaybeMessage<MetaSaveResponseProto>(nullptr);
  }

  MetaSaveResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaSaveResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaSaveResponseProto& from);
  void MergeFrom(const MetaSaveResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaSaveResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.MetaSaveResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MetaSaveResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetFileInfoRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetFileInfoRequestProto) */ {
 public:
  GetFileInfoRequestProto();
  virtual ~GetFileInfoRequestProto();

  GetFileInfoRequestProto(const GetFileInfoRequestProto& from);
  GetFileInfoRequestProto(GetFileInfoRequestProto&& from) noexcept
    : GetFileInfoRequestProto() {
    *this = ::std::move(from);
  }

  inline GetFileInfoRequestProto& operator=(const GetFileInfoRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileInfoRequestProto& operator=(GetFileInfoRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileInfoRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileInfoRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetFileInfoRequestProto*>(
               &_GetFileInfoRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetFileInfoRequestProto& a, GetFileInfoRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileInfoRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileInfoRequestProto* New() const final {
    return CreateMaybeMessage<GetFileInfoRequestProto>(nullptr);
  }

  GetFileInfoRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileInfoRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileInfoRequestProto& from);
  void MergeFrom(const GetFileInfoRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileInfoRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetFileInfoRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileInfoRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetFileInfoResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetFileInfoResponseProto) */ {
 public:
  GetFileInfoResponseProto();
  virtual ~GetFileInfoResponseProto();

  GetFileInfoResponseProto(const GetFileInfoResponseProto& from);
  GetFileInfoResponseProto(GetFileInfoResponseProto&& from) noexcept
    : GetFileInfoResponseProto() {
    *this = ::std::move(from);
  }

  inline GetFileInfoResponseProto& operator=(const GetFileInfoResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileInfoResponseProto& operator=(GetFileInfoResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileInfoResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileInfoResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetFileInfoResponseProto*>(
               &_GetFileInfoResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetFileInfoResponseProto& a, GetFileInfoResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileInfoResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileInfoResponseProto* New() const final {
    return CreateMaybeMessage<GetFileInfoResponseProto>(nullptr);
  }

  GetFileInfoResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileInfoResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileInfoResponseProto& from);
  void MergeFrom(const GetFileInfoResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileInfoResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetFileInfoResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsFieldNumber = 1,
  };
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  bool has_fs() const;
  private:
  bool _internal_has_fs() const;
  public:
  void clear_fs();
  const ::Hdfs::Internal::HdfsFileStatusProto& fs() const;
  ::Hdfs::Internal::HdfsFileStatusProto* release_fs();
  ::Hdfs::Internal::HdfsFileStatusProto* mutable_fs();
  void set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs);
  private:
  const ::Hdfs::Internal::HdfsFileStatusProto& _internal_fs() const;
  ::Hdfs::Internal::HdfsFileStatusProto* _internal_mutable_fs();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileInfoResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::HdfsFileStatusProto* fs_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class IsFileClosedRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.IsFileClosedRequestProto) */ {
 public:
  IsFileClosedRequestProto();
  virtual ~IsFileClosedRequestProto();

  IsFileClosedRequestProto(const IsFileClosedRequestProto& from);
  IsFileClosedRequestProto(IsFileClosedRequestProto&& from) noexcept
    : IsFileClosedRequestProto() {
    *this = ::std::move(from);
  }

  inline IsFileClosedRequestProto& operator=(const IsFileClosedRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsFileClosedRequestProto& operator=(IsFileClosedRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsFileClosedRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsFileClosedRequestProto* internal_default_instance() {
    return reinterpret_cast<const IsFileClosedRequestProto*>(
               &_IsFileClosedRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(IsFileClosedRequestProto& a, IsFileClosedRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IsFileClosedRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsFileClosedRequestProto* New() const final {
    return CreateMaybeMessage<IsFileClosedRequestProto>(nullptr);
  }

  IsFileClosedRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsFileClosedRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsFileClosedRequestProto& from);
  void MergeFrom(const IsFileClosedRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsFileClosedRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.IsFileClosedRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.IsFileClosedRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class IsFileClosedResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.IsFileClosedResponseProto) */ {
 public:
  IsFileClosedResponseProto();
  virtual ~IsFileClosedResponseProto();

  IsFileClosedResponseProto(const IsFileClosedResponseProto& from);
  IsFileClosedResponseProto(IsFileClosedResponseProto&& from) noexcept
    : IsFileClosedResponseProto() {
    *this = ::std::move(from);
  }

  inline IsFileClosedResponseProto& operator=(const IsFileClosedResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsFileClosedResponseProto& operator=(IsFileClosedResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsFileClosedResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsFileClosedResponseProto* internal_default_instance() {
    return reinterpret_cast<const IsFileClosedResponseProto*>(
               &_IsFileClosedResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(IsFileClosedResponseProto& a, IsFileClosedResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IsFileClosedResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsFileClosedResponseProto* New() const final {
    return CreateMaybeMessage<IsFileClosedResponseProto>(nullptr);
  }

  IsFileClosedResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsFileClosedResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsFileClosedResponseProto& from);
  void MergeFrom(const IsFileClosedResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsFileClosedResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.IsFileClosedResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // required bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.IsFileClosedResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CacheDirectiveInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CacheDirectiveInfoProto) */ {
 public:
  CacheDirectiveInfoProto();
  virtual ~CacheDirectiveInfoProto();

  CacheDirectiveInfoProto(const CacheDirectiveInfoProto& from);
  CacheDirectiveInfoProto(CacheDirectiveInfoProto&& from) noexcept
    : CacheDirectiveInfoProto() {
    *this = ::std::move(from);
  }

  inline CacheDirectiveInfoProto& operator=(const CacheDirectiveInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheDirectiveInfoProto& operator=(CacheDirectiveInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheDirectiveInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheDirectiveInfoProto* internal_default_instance() {
    return reinterpret_cast<const CacheDirectiveInfoProto*>(
               &_CacheDirectiveInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CacheDirectiveInfoProto& a, CacheDirectiveInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheDirectiveInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheDirectiveInfoProto* New() const final {
    return CreateMaybeMessage<CacheDirectiveInfoProto>(nullptr);
  }

  CacheDirectiveInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheDirectiveInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheDirectiveInfoProto& from);
  void MergeFrom(const CacheDirectiveInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheDirectiveInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CacheDirectiveInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kPoolFieldNumber = 4,
    kExpirationFieldNumber = 5,
    kIdFieldNumber = 1,
    kReplicationFieldNumber = 3,
  };
  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string pool = 4;
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  const std::string& pool() const;
  void set_pool(const std::string& value);
  void set_pool(std::string&& value);
  void set_pool(const char* value);
  void set_pool(const char* value, size_t size);
  std::string* mutable_pool();
  std::string* release_pool();
  void set_allocated_pool(std::string* pool);
  private:
  const std::string& _internal_pool() const;
  void _internal_set_pool(const std::string& value);
  std::string* _internal_mutable_pool();
  public:

  // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
  bool has_expiration() const;
  private:
  bool _internal_has_expiration() const;
  public:
  void clear_expiration();
  const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto& expiration() const;
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* release_expiration();
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* mutable_expiration();
  void set_allocated_expiration(::Hdfs::Internal::CacheDirectiveInfoExpirationProto* expiration);
  private:
  const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto& _internal_expiration() const;
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* _internal_mutable_expiration();
  public:

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint32 replication = 3;
  bool has_replication() const;
  private:
  bool _internal_has_replication() const;
  public:
  void clear_replication();
  ::PROTOBUF_NAMESPACE_ID::uint32 replication() const;
  void set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replication() const;
  void _internal_set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_;
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* expiration_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replication_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CacheDirectiveInfoExpirationProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CacheDirectiveInfoExpirationProto) */ {
 public:
  CacheDirectiveInfoExpirationProto();
  virtual ~CacheDirectiveInfoExpirationProto();

  CacheDirectiveInfoExpirationProto(const CacheDirectiveInfoExpirationProto& from);
  CacheDirectiveInfoExpirationProto(CacheDirectiveInfoExpirationProto&& from) noexcept
    : CacheDirectiveInfoExpirationProto() {
    *this = ::std::move(from);
  }

  inline CacheDirectiveInfoExpirationProto& operator=(const CacheDirectiveInfoExpirationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheDirectiveInfoExpirationProto& operator=(CacheDirectiveInfoExpirationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheDirectiveInfoExpirationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheDirectiveInfoExpirationProto* internal_default_instance() {
    return reinterpret_cast<const CacheDirectiveInfoExpirationProto*>(
               &_CacheDirectiveInfoExpirationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CacheDirectiveInfoExpirationProto& a, CacheDirectiveInfoExpirationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheDirectiveInfoExpirationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheDirectiveInfoExpirationProto* New() const final {
    return CreateMaybeMessage<CacheDirectiveInfoExpirationProto>(nullptr);
  }

  CacheDirectiveInfoExpirationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheDirectiveInfoExpirationProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheDirectiveInfoExpirationProto& from);
  void MergeFrom(const CacheDirectiveInfoExpirationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheDirectiveInfoExpirationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CacheDirectiveInfoExpirationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMillisFieldNumber = 1,
    kIsRelativeFieldNumber = 2,
  };
  // required int64 millis = 1;
  bool has_millis() const;
  private:
  bool _internal_has_millis() const;
  public:
  void clear_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 millis() const;
  void set_millis(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_millis() const;
  void _internal_set_millis(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool isRelative = 2;
  bool has_isrelative() const;
  private:
  bool _internal_has_isrelative() const;
  public:
  void clear_isrelative();
  bool isrelative() const;
  void set_isrelative(bool value);
  private:
  bool _internal_isrelative() const;
  void _internal_set_isrelative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 millis_;
  bool isrelative_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CacheDirectiveStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CacheDirectiveStatsProto) */ {
 public:
  CacheDirectiveStatsProto();
  virtual ~CacheDirectiveStatsProto();

  CacheDirectiveStatsProto(const CacheDirectiveStatsProto& from);
  CacheDirectiveStatsProto(CacheDirectiveStatsProto&& from) noexcept
    : CacheDirectiveStatsProto() {
    *this = ::std::move(from);
  }

  inline CacheDirectiveStatsProto& operator=(const CacheDirectiveStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheDirectiveStatsProto& operator=(CacheDirectiveStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheDirectiveStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheDirectiveStatsProto* internal_default_instance() {
    return reinterpret_cast<const CacheDirectiveStatsProto*>(
               &_CacheDirectiveStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CacheDirectiveStatsProto& a, CacheDirectiveStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheDirectiveStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheDirectiveStatsProto* New() const final {
    return CreateMaybeMessage<CacheDirectiveStatsProto>(nullptr);
  }

  CacheDirectiveStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheDirectiveStatsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheDirectiveStatsProto& from);
  void MergeFrom(const CacheDirectiveStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheDirectiveStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CacheDirectiveStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesNeededFieldNumber = 1,
    kBytesCachedFieldNumber = 2,
    kFilesNeededFieldNumber = 3,
    kFilesCachedFieldNumber = 4,
    kHasExpiredFieldNumber = 5,
  };
  // required int64 bytesNeeded = 1;
  bool has_bytesneeded() const;
  private:
  bool _internal_has_bytesneeded() const;
  public:
  void clear_bytesneeded();
  ::PROTOBUF_NAMESPACE_ID::int64 bytesneeded() const;
  void set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytesneeded() const;
  void _internal_set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 bytesCached = 2;
  bool has_bytescached() const;
  private:
  bool _internal_has_bytescached() const;
  public:
  void clear_bytescached();
  ::PROTOBUF_NAMESPACE_ID::int64 bytescached() const;
  void set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytescached() const;
  void _internal_set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 filesNeeded = 3;
  bool has_filesneeded() const;
  private:
  bool _internal_has_filesneeded() const;
  public:
  void clear_filesneeded();
  ::PROTOBUF_NAMESPACE_ID::int64 filesneeded() const;
  void set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filesneeded() const;
  void _internal_set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 filesCached = 4;
  bool has_filescached() const;
  private:
  bool _internal_has_filescached() const;
  public:
  void clear_filescached();
  ::PROTOBUF_NAMESPACE_ID::int64 filescached() const;
  void set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filescached() const;
  void _internal_set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool hasExpired = 5;
  bool has_hasexpired() const;
  private:
  bool _internal_has_hasexpired() const;
  public:
  void clear_hasexpired();
  bool hasexpired() const;
  void set_hasexpired(bool value);
  private:
  bool _internal_hasexpired() const;
  void _internal_set_hasexpired(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveStatsProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytesneeded_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytescached_;
  ::PROTOBUF_NAMESPACE_ID::int64 filesneeded_;
  ::PROTOBUF_NAMESPACE_ID::int64 filescached_;
  bool hasexpired_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AddCacheDirectiveRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AddCacheDirectiveRequestProto) */ {
 public:
  AddCacheDirectiveRequestProto();
  virtual ~AddCacheDirectiveRequestProto();

  AddCacheDirectiveRequestProto(const AddCacheDirectiveRequestProto& from);
  AddCacheDirectiveRequestProto(AddCacheDirectiveRequestProto&& from) noexcept
    : AddCacheDirectiveRequestProto() {
    *this = ::std::move(from);
  }

  inline AddCacheDirectiveRequestProto& operator=(const AddCacheDirectiveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCacheDirectiveRequestProto& operator=(AddCacheDirectiveRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCacheDirectiveRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddCacheDirectiveRequestProto* internal_default_instance() {
    return reinterpret_cast<const AddCacheDirectiveRequestProto*>(
               &_AddCacheDirectiveRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(AddCacheDirectiveRequestProto& a, AddCacheDirectiveRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCacheDirectiveRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCacheDirectiveRequestProto* New() const final {
    return CreateMaybeMessage<AddCacheDirectiveRequestProto>(nullptr);
  }

  AddCacheDirectiveRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCacheDirectiveRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCacheDirectiveRequestProto& from);
  void MergeFrom(const AddCacheDirectiveRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCacheDirectiveRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AddCacheDirectiveRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kCacheFlagsFieldNumber = 2,
  };
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Hdfs::Internal::CacheDirectiveInfoProto& info() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* release_info();
  ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_info();
  void set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info);
  private:
  const ::Hdfs::Internal::CacheDirectiveInfoProto& _internal_info() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* _internal_mutable_info();
  public:

  // optional uint32 cacheFlags = 2;
  bool has_cacheflags() const;
  private:
  bool _internal_has_cacheflags() const;
  public:
  void clear_cacheflags();
  ::PROTOBUF_NAMESPACE_ID::uint32 cacheflags() const;
  void set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cacheflags() const;
  void _internal_set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCacheDirectiveRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CacheDirectiveInfoProto* info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cacheflags_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AddCacheDirectiveResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AddCacheDirectiveResponseProto) */ {
 public:
  AddCacheDirectiveResponseProto();
  virtual ~AddCacheDirectiveResponseProto();

  AddCacheDirectiveResponseProto(const AddCacheDirectiveResponseProto& from);
  AddCacheDirectiveResponseProto(AddCacheDirectiveResponseProto&& from) noexcept
    : AddCacheDirectiveResponseProto() {
    *this = ::std::move(from);
  }

  inline AddCacheDirectiveResponseProto& operator=(const AddCacheDirectiveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCacheDirectiveResponseProto& operator=(AddCacheDirectiveResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCacheDirectiveResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddCacheDirectiveResponseProto* internal_default_instance() {
    return reinterpret_cast<const AddCacheDirectiveResponseProto*>(
               &_AddCacheDirectiveResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(AddCacheDirectiveResponseProto& a, AddCacheDirectiveResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCacheDirectiveResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCacheDirectiveResponseProto* New() const final {
    return CreateMaybeMessage<AddCacheDirectiveResponseProto>(nullptr);
  }

  AddCacheDirectiveResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCacheDirectiveResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCacheDirectiveResponseProto& from);
  void MergeFrom(const AddCacheDirectiveResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCacheDirectiveResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AddCacheDirectiveResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCacheDirectiveResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ModifyCacheDirectiveRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ModifyCacheDirectiveRequestProto) */ {
 public:
  ModifyCacheDirectiveRequestProto();
  virtual ~ModifyCacheDirectiveRequestProto();

  ModifyCacheDirectiveRequestProto(const ModifyCacheDirectiveRequestProto& from);
  ModifyCacheDirectiveRequestProto(ModifyCacheDirectiveRequestProto&& from) noexcept
    : ModifyCacheDirectiveRequestProto() {
    *this = ::std::move(from);
  }

  inline ModifyCacheDirectiveRequestProto& operator=(const ModifyCacheDirectiveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyCacheDirectiveRequestProto& operator=(ModifyCacheDirectiveRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyCacheDirectiveRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyCacheDirectiveRequestProto* internal_default_instance() {
    return reinterpret_cast<const ModifyCacheDirectiveRequestProto*>(
               &_ModifyCacheDirectiveRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ModifyCacheDirectiveRequestProto& a, ModifyCacheDirectiveRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyCacheDirectiveRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyCacheDirectiveRequestProto* New() const final {
    return CreateMaybeMessage<ModifyCacheDirectiveRequestProto>(nullptr);
  }

  ModifyCacheDirectiveRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyCacheDirectiveRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyCacheDirectiveRequestProto& from);
  void MergeFrom(const ModifyCacheDirectiveRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyCacheDirectiveRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ModifyCacheDirectiveRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kCacheFlagsFieldNumber = 2,
  };
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Hdfs::Internal::CacheDirectiveInfoProto& info() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* release_info();
  ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_info();
  void set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info);
  private:
  const ::Hdfs::Internal::CacheDirectiveInfoProto& _internal_info() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* _internal_mutable_info();
  public:

  // optional uint32 cacheFlags = 2;
  bool has_cacheflags() const;
  private:
  bool _internal_has_cacheflags() const;
  public:
  void clear_cacheflags();
  ::PROTOBUF_NAMESPACE_ID::uint32 cacheflags() const;
  void set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cacheflags() const;
  void _internal_set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CacheDirectiveInfoProto* info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cacheflags_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ModifyCacheDirectiveResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ModifyCacheDirectiveResponseProto) */ {
 public:
  ModifyCacheDirectiveResponseProto();
  virtual ~ModifyCacheDirectiveResponseProto();

  ModifyCacheDirectiveResponseProto(const ModifyCacheDirectiveResponseProto& from);
  ModifyCacheDirectiveResponseProto(ModifyCacheDirectiveResponseProto&& from) noexcept
    : ModifyCacheDirectiveResponseProto() {
    *this = ::std::move(from);
  }

  inline ModifyCacheDirectiveResponseProto& operator=(const ModifyCacheDirectiveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyCacheDirectiveResponseProto& operator=(ModifyCacheDirectiveResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyCacheDirectiveResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyCacheDirectiveResponseProto* internal_default_instance() {
    return reinterpret_cast<const ModifyCacheDirectiveResponseProto*>(
               &_ModifyCacheDirectiveResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ModifyCacheDirectiveResponseProto& a, ModifyCacheDirectiveResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyCacheDirectiveResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyCacheDirectiveResponseProto* New() const final {
    return CreateMaybeMessage<ModifyCacheDirectiveResponseProto>(nullptr);
  }

  ModifyCacheDirectiveResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyCacheDirectiveResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyCacheDirectiveResponseProto& from);
  void MergeFrom(const ModifyCacheDirectiveResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyCacheDirectiveResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ModifyCacheDirectiveResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RemoveCacheDirectiveRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RemoveCacheDirectiveRequestProto) */ {
 public:
  RemoveCacheDirectiveRequestProto();
  virtual ~RemoveCacheDirectiveRequestProto();

  RemoveCacheDirectiveRequestProto(const RemoveCacheDirectiveRequestProto& from);
  RemoveCacheDirectiveRequestProto(RemoveCacheDirectiveRequestProto&& from) noexcept
    : RemoveCacheDirectiveRequestProto() {
    *this = ::std::move(from);
  }

  inline RemoveCacheDirectiveRequestProto& operator=(const RemoveCacheDirectiveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCacheDirectiveRequestProto& operator=(RemoveCacheDirectiveRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveCacheDirectiveRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveCacheDirectiveRequestProto* internal_default_instance() {
    return reinterpret_cast<const RemoveCacheDirectiveRequestProto*>(
               &_RemoveCacheDirectiveRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(RemoveCacheDirectiveRequestProto& a, RemoveCacheDirectiveRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCacheDirectiveRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveCacheDirectiveRequestProto* New() const final {
    return CreateMaybeMessage<RemoveCacheDirectiveRequestProto>(nullptr);
  }

  RemoveCacheDirectiveRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveCacheDirectiveRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveCacheDirectiveRequestProto& from);
  void MergeFrom(const RemoveCacheDirectiveRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCacheDirectiveRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RemoveCacheDirectiveRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RemoveCacheDirectiveResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RemoveCacheDirectiveResponseProto) */ {
 public:
  RemoveCacheDirectiveResponseProto();
  virtual ~RemoveCacheDirectiveResponseProto();

  RemoveCacheDirectiveResponseProto(const RemoveCacheDirectiveResponseProto& from);
  RemoveCacheDirectiveResponseProto(RemoveCacheDirectiveResponseProto&& from) noexcept
    : RemoveCacheDirectiveResponseProto() {
    *this = ::std::move(from);
  }

  inline RemoveCacheDirectiveResponseProto& operator=(const RemoveCacheDirectiveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCacheDirectiveResponseProto& operator=(RemoveCacheDirectiveResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveCacheDirectiveResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveCacheDirectiveResponseProto* internal_default_instance() {
    return reinterpret_cast<const RemoveCacheDirectiveResponseProto*>(
               &_RemoveCacheDirectiveResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(RemoveCacheDirectiveResponseProto& a, RemoveCacheDirectiveResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCacheDirectiveResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveCacheDirectiveResponseProto* New() const final {
    return CreateMaybeMessage<RemoveCacheDirectiveResponseProto>(nullptr);
  }

  RemoveCacheDirectiveResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveCacheDirectiveResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveCacheDirectiveResponseProto& from);
  void MergeFrom(const RemoveCacheDirectiveResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCacheDirectiveResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RemoveCacheDirectiveResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ListCacheDirectivesRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListCacheDirectivesRequestProto) */ {
 public:
  ListCacheDirectivesRequestProto();
  virtual ~ListCacheDirectivesRequestProto();

  ListCacheDirectivesRequestProto(const ListCacheDirectivesRequestProto& from);
  ListCacheDirectivesRequestProto(ListCacheDirectivesRequestProto&& from) noexcept
    : ListCacheDirectivesRequestProto() {
    *this = ::std::move(from);
  }

  inline ListCacheDirectivesRequestProto& operator=(const ListCacheDirectivesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCacheDirectivesRequestProto& operator=(ListCacheDirectivesRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCacheDirectivesRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCacheDirectivesRequestProto* internal_default_instance() {
    return reinterpret_cast<const ListCacheDirectivesRequestProto*>(
               &_ListCacheDirectivesRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ListCacheDirectivesRequestProto& a, ListCacheDirectivesRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCacheDirectivesRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCacheDirectivesRequestProto* New() const final {
    return CreateMaybeMessage<ListCacheDirectivesRequestProto>(nullptr);
  }

  ListCacheDirectivesRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCacheDirectivesRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCacheDirectivesRequestProto& from);
  void MergeFrom(const ListCacheDirectivesRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCacheDirectivesRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListCacheDirectivesRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 2,
    kPrevIdFieldNumber = 1,
  };
  // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::Hdfs::Internal::CacheDirectiveInfoProto& filter() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* release_filter();
  ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_filter();
  void set_allocated_filter(::Hdfs::Internal::CacheDirectiveInfoProto* filter);
  private:
  const ::Hdfs::Internal::CacheDirectiveInfoProto& _internal_filter() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* _internal_mutable_filter();
  public:

  // required int64 prevId = 1;
  bool has_previd() const;
  private:
  bool _internal_has_previd() const;
  public:
  void clear_previd();
  ::PROTOBUF_NAMESPACE_ID::int64 previd() const;
  void set_previd(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_previd() const;
  void _internal_set_previd(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCacheDirectivesRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CacheDirectiveInfoProto* filter_;
  ::PROTOBUF_NAMESPACE_ID::int64 previd_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CacheDirectiveEntryProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CacheDirectiveEntryProto) */ {
 public:
  CacheDirectiveEntryProto();
  virtual ~CacheDirectiveEntryProto();

  CacheDirectiveEntryProto(const CacheDirectiveEntryProto& from);
  CacheDirectiveEntryProto(CacheDirectiveEntryProto&& from) noexcept
    : CacheDirectiveEntryProto() {
    *this = ::std::move(from);
  }

  inline CacheDirectiveEntryProto& operator=(const CacheDirectiveEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheDirectiveEntryProto& operator=(CacheDirectiveEntryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheDirectiveEntryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheDirectiveEntryProto* internal_default_instance() {
    return reinterpret_cast<const CacheDirectiveEntryProto*>(
               &_CacheDirectiveEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CacheDirectiveEntryProto& a, CacheDirectiveEntryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheDirectiveEntryProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheDirectiveEntryProto* New() const final {
    return CreateMaybeMessage<CacheDirectiveEntryProto>(nullptr);
  }

  CacheDirectiveEntryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheDirectiveEntryProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheDirectiveEntryProto& from);
  void MergeFrom(const CacheDirectiveEntryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheDirectiveEntryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CacheDirectiveEntryProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Hdfs::Internal::CacheDirectiveInfoProto& info() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* release_info();
  ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_info();
  void set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info);
  private:
  const ::Hdfs::Internal::CacheDirectiveInfoProto& _internal_info() const;
  ::Hdfs::Internal::CacheDirectiveInfoProto* _internal_mutable_info();
  public:

  // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::Hdfs::Internal::CacheDirectiveStatsProto& stats() const;
  ::Hdfs::Internal::CacheDirectiveStatsProto* release_stats();
  ::Hdfs::Internal::CacheDirectiveStatsProto* mutable_stats();
  void set_allocated_stats(::Hdfs::Internal::CacheDirectiveStatsProto* stats);
  private:
  const ::Hdfs::Internal::CacheDirectiveStatsProto& _internal_stats() const;
  ::Hdfs::Internal::CacheDirectiveStatsProto* _internal_mutable_stats();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveEntryProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CacheDirectiveInfoProto* info_;
  ::Hdfs::Internal::CacheDirectiveStatsProto* stats_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ListCacheDirectivesResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListCacheDirectivesResponseProto) */ {
 public:
  ListCacheDirectivesResponseProto();
  virtual ~ListCacheDirectivesResponseProto();

  ListCacheDirectivesResponseProto(const ListCacheDirectivesResponseProto& from);
  ListCacheDirectivesResponseProto(ListCacheDirectivesResponseProto&& from) noexcept
    : ListCacheDirectivesResponseProto() {
    *this = ::std::move(from);
  }

  inline ListCacheDirectivesResponseProto& operator=(const ListCacheDirectivesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCacheDirectivesResponseProto& operator=(ListCacheDirectivesResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCacheDirectivesResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCacheDirectivesResponseProto* internal_default_instance() {
    return reinterpret_cast<const ListCacheDirectivesResponseProto*>(
               &_ListCacheDirectivesResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ListCacheDirectivesResponseProto& a, ListCacheDirectivesResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCacheDirectivesResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCacheDirectivesResponseProto* New() const final {
    return CreateMaybeMessage<ListCacheDirectivesResponseProto>(nullptr);
  }

  ListCacheDirectivesResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCacheDirectivesResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCacheDirectivesResponseProto& from);
  void MergeFrom(const ListCacheDirectivesResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCacheDirectivesResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListCacheDirectivesResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
    kHasMoreFieldNumber = 2,
  };
  // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::Hdfs::Internal::CacheDirectiveEntryProto* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >*
      mutable_elements();
  private:
  const ::Hdfs::Internal::CacheDirectiveEntryProto& _internal_elements(int index) const;
  ::Hdfs::Internal::CacheDirectiveEntryProto* _internal_add_elements();
  public:
  const ::Hdfs::Internal::CacheDirectiveEntryProto& elements(int index) const;
  ::Hdfs::Internal::CacheDirectiveEntryProto* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >&
      elements() const;

  // required bool hasMore = 2;
  bool has_hasmore() const;
  private:
  bool _internal_has_hasmore() const;
  public:
  void clear_hasmore();
  bool hasmore() const;
  void set_hasmore(bool value);
  private:
  bool _internal_hasmore() const;
  void _internal_set_hasmore(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCacheDirectivesResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto > elements_;
  bool hasmore_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CachePoolInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CachePoolInfoProto) */ {
 public:
  CachePoolInfoProto();
  virtual ~CachePoolInfoProto();

  CachePoolInfoProto(const CachePoolInfoProto& from);
  CachePoolInfoProto(CachePoolInfoProto&& from) noexcept
    : CachePoolInfoProto() {
    *this = ::std::move(from);
  }

  inline CachePoolInfoProto& operator=(const CachePoolInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachePoolInfoProto& operator=(CachePoolInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CachePoolInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CachePoolInfoProto* internal_default_instance() {
    return reinterpret_cast<const CachePoolInfoProto*>(
               &_CachePoolInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CachePoolInfoProto& a, CachePoolInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CachePoolInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CachePoolInfoProto* New() const final {
    return CreateMaybeMessage<CachePoolInfoProto>(nullptr);
  }

  CachePoolInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CachePoolInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CachePoolInfoProto& from);
  void MergeFrom(const CachePoolInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachePoolInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CachePoolInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolNameFieldNumber = 1,
    kOwnerNameFieldNumber = 2,
    kGroupNameFieldNumber = 3,
    kLimitFieldNumber = 5,
    kMaxRelativeExpiryFieldNumber = 6,
    kModeFieldNumber = 4,
  };
  // optional string poolName = 1;
  bool has_poolname() const;
  private:
  bool _internal_has_poolname() const;
  public:
  void clear_poolname();
  const std::string& poolname() const;
  void set_poolname(const std::string& value);
  void set_poolname(std::string&& value);
  void set_poolname(const char* value);
  void set_poolname(const char* value, size_t size);
  std::string* mutable_poolname();
  std::string* release_poolname();
  void set_allocated_poolname(std::string* poolname);
  private:
  const std::string& _internal_poolname() const;
  void _internal_set_poolname(const std::string& value);
  std::string* _internal_mutable_poolname();
  public:

  // optional string ownerName = 2;
  bool has_ownername() const;
  private:
  bool _internal_has_ownername() const;
  public:
  void clear_ownername();
  const std::string& ownername() const;
  void set_ownername(const std::string& value);
  void set_ownername(std::string&& value);
  void set_ownername(const char* value);
  void set_ownername(const char* value, size_t size);
  std::string* mutable_ownername();
  std::string* release_ownername();
  void set_allocated_ownername(std::string* ownername);
  private:
  const std::string& _internal_ownername() const;
  void _internal_set_ownername(const std::string& value);
  std::string* _internal_mutable_ownername();
  public:

  // optional string groupName = 3;
  bool has_groupname() const;
  private:
  bool _internal_has_groupname() const;
  public:
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // optional int64 limit = 5;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 maxRelativeExpiry = 6;
  bool has_maxrelativeexpiry() const;
  private:
  bool _internal_has_maxrelativeexpiry() const;
  public:
  void clear_maxrelativeexpiry();
  ::PROTOBUF_NAMESPACE_ID::int64 maxrelativeexpiry() const;
  void set_maxrelativeexpiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxrelativeexpiry() const;
  void _internal_set_maxrelativeexpiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CachePoolInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxrelativeexpiry_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CachePoolStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CachePoolStatsProto) */ {
 public:
  CachePoolStatsProto();
  virtual ~CachePoolStatsProto();

  CachePoolStatsProto(const CachePoolStatsProto& from);
  CachePoolStatsProto(CachePoolStatsProto&& from) noexcept
    : CachePoolStatsProto() {
    *this = ::std::move(from);
  }

  inline CachePoolStatsProto& operator=(const CachePoolStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachePoolStatsProto& operator=(CachePoolStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CachePoolStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CachePoolStatsProto* internal_default_instance() {
    return reinterpret_cast<const CachePoolStatsProto*>(
               &_CachePoolStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CachePoolStatsProto& a, CachePoolStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CachePoolStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CachePoolStatsProto* New() const final {
    return CreateMaybeMessage<CachePoolStatsProto>(nullptr);
  }

  CachePoolStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CachePoolStatsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CachePoolStatsProto& from);
  void MergeFrom(const CachePoolStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachePoolStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CachePoolStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesNeededFieldNumber = 1,
    kBytesCachedFieldNumber = 2,
    kBytesOverlimitFieldNumber = 3,
    kFilesNeededFieldNumber = 4,
    kFilesCachedFieldNumber = 5,
  };
  // required int64 bytesNeeded = 1;
  bool has_bytesneeded() const;
  private:
  bool _internal_has_bytesneeded() const;
  public:
  void clear_bytesneeded();
  ::PROTOBUF_NAMESPACE_ID::int64 bytesneeded() const;
  void set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytesneeded() const;
  void _internal_set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 bytesCached = 2;
  bool has_bytescached() const;
  private:
  bool _internal_has_bytescached() const;
  public:
  void clear_bytescached();
  ::PROTOBUF_NAMESPACE_ID::int64 bytescached() const;
  void set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytescached() const;
  void _internal_set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 bytesOverlimit = 3;
  bool has_bytesoverlimit() const;
  private:
  bool _internal_has_bytesoverlimit() const;
  public:
  void clear_bytesoverlimit();
  ::PROTOBUF_NAMESPACE_ID::int64 bytesoverlimit() const;
  void set_bytesoverlimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytesoverlimit() const;
  void _internal_set_bytesoverlimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 filesNeeded = 4;
  bool has_filesneeded() const;
  private:
  bool _internal_has_filesneeded() const;
  public:
  void clear_filesneeded();
  ::PROTOBUF_NAMESPACE_ID::int64 filesneeded() const;
  void set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filesneeded() const;
  void _internal_set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 filesCached = 5;
  bool has_filescached() const;
  private:
  bool _internal_has_filescached() const;
  public:
  void clear_filescached();
  ::PROTOBUF_NAMESPACE_ID::int64 filescached() const;
  void set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filescached() const;
  void _internal_set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CachePoolStatsProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytesneeded_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytescached_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytesoverlimit_;
  ::PROTOBUF_NAMESPACE_ID::int64 filesneeded_;
  ::PROTOBUF_NAMESPACE_ID::int64 filescached_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AddCachePoolRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AddCachePoolRequestProto) */ {
 public:
  AddCachePoolRequestProto();
  virtual ~AddCachePoolRequestProto();

  AddCachePoolRequestProto(const AddCachePoolRequestProto& from);
  AddCachePoolRequestProto(AddCachePoolRequestProto&& from) noexcept
    : AddCachePoolRequestProto() {
    *this = ::std::move(from);
  }

  inline AddCachePoolRequestProto& operator=(const AddCachePoolRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCachePoolRequestProto& operator=(AddCachePoolRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCachePoolRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddCachePoolRequestProto* internal_default_instance() {
    return reinterpret_cast<const AddCachePoolRequestProto*>(
               &_AddCachePoolRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(AddCachePoolRequestProto& a, AddCachePoolRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCachePoolRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCachePoolRequestProto* New() const final {
    return CreateMaybeMessage<AddCachePoolRequestProto>(nullptr);
  }

  AddCachePoolRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCachePoolRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCachePoolRequestProto& from);
  void MergeFrom(const AddCachePoolRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCachePoolRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AddCachePoolRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Hdfs::Internal::CachePoolInfoProto& info() const;
  ::Hdfs::Internal::CachePoolInfoProto* release_info();
  ::Hdfs::Internal::CachePoolInfoProto* mutable_info();
  void set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info);
  private:
  const ::Hdfs::Internal::CachePoolInfoProto& _internal_info() const;
  ::Hdfs::Internal::CachePoolInfoProto* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCachePoolRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CachePoolInfoProto* info_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AddCachePoolResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AddCachePoolResponseProto) */ {
 public:
  AddCachePoolResponseProto();
  virtual ~AddCachePoolResponseProto();

  AddCachePoolResponseProto(const AddCachePoolResponseProto& from);
  AddCachePoolResponseProto(AddCachePoolResponseProto&& from) noexcept
    : AddCachePoolResponseProto() {
    *this = ::std::move(from);
  }

  inline AddCachePoolResponseProto& operator=(const AddCachePoolResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCachePoolResponseProto& operator=(AddCachePoolResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCachePoolResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddCachePoolResponseProto* internal_default_instance() {
    return reinterpret_cast<const AddCachePoolResponseProto*>(
               &_AddCachePoolResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(AddCachePoolResponseProto& a, AddCachePoolResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCachePoolResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCachePoolResponseProto* New() const final {
    return CreateMaybeMessage<AddCachePoolResponseProto>(nullptr);
  }

  AddCachePoolResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCachePoolResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCachePoolResponseProto& from);
  void MergeFrom(const AddCachePoolResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCachePoolResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AddCachePoolResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCachePoolResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ModifyCachePoolRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ModifyCachePoolRequestProto) */ {
 public:
  ModifyCachePoolRequestProto();
  virtual ~ModifyCachePoolRequestProto();

  ModifyCachePoolRequestProto(const ModifyCachePoolRequestProto& from);
  ModifyCachePoolRequestProto(ModifyCachePoolRequestProto&& from) noexcept
    : ModifyCachePoolRequestProto() {
    *this = ::std::move(from);
  }

  inline ModifyCachePoolRequestProto& operator=(const ModifyCachePoolRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyCachePoolRequestProto& operator=(ModifyCachePoolRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyCachePoolRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyCachePoolRequestProto* internal_default_instance() {
    return reinterpret_cast<const ModifyCachePoolRequestProto*>(
               &_ModifyCachePoolRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ModifyCachePoolRequestProto& a, ModifyCachePoolRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyCachePoolRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyCachePoolRequestProto* New() const final {
    return CreateMaybeMessage<ModifyCachePoolRequestProto>(nullptr);
  }

  ModifyCachePoolRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyCachePoolRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyCachePoolRequestProto& from);
  void MergeFrom(const ModifyCachePoolRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyCachePoolRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ModifyCachePoolRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Hdfs::Internal::CachePoolInfoProto& info() const;
  ::Hdfs::Internal::CachePoolInfoProto* release_info();
  ::Hdfs::Internal::CachePoolInfoProto* mutable_info();
  void set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info);
  private:
  const ::Hdfs::Internal::CachePoolInfoProto& _internal_info() const;
  ::Hdfs::Internal::CachePoolInfoProto* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCachePoolRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CachePoolInfoProto* info_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ModifyCachePoolResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ModifyCachePoolResponseProto) */ {
 public:
  ModifyCachePoolResponseProto();
  virtual ~ModifyCachePoolResponseProto();

  ModifyCachePoolResponseProto(const ModifyCachePoolResponseProto& from);
  ModifyCachePoolResponseProto(ModifyCachePoolResponseProto&& from) noexcept
    : ModifyCachePoolResponseProto() {
    *this = ::std::move(from);
  }

  inline ModifyCachePoolResponseProto& operator=(const ModifyCachePoolResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyCachePoolResponseProto& operator=(ModifyCachePoolResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyCachePoolResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyCachePoolResponseProto* internal_default_instance() {
    return reinterpret_cast<const ModifyCachePoolResponseProto*>(
               &_ModifyCachePoolResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ModifyCachePoolResponseProto& a, ModifyCachePoolResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyCachePoolResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyCachePoolResponseProto* New() const final {
    return CreateMaybeMessage<ModifyCachePoolResponseProto>(nullptr);
  }

  ModifyCachePoolResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyCachePoolResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyCachePoolResponseProto& from);
  void MergeFrom(const ModifyCachePoolResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyCachePoolResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ModifyCachePoolResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCachePoolResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RemoveCachePoolRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RemoveCachePoolRequestProto) */ {
 public:
  RemoveCachePoolRequestProto();
  virtual ~RemoveCachePoolRequestProto();

  RemoveCachePoolRequestProto(const RemoveCachePoolRequestProto& from);
  RemoveCachePoolRequestProto(RemoveCachePoolRequestProto&& from) noexcept
    : RemoveCachePoolRequestProto() {
    *this = ::std::move(from);
  }

  inline RemoveCachePoolRequestProto& operator=(const RemoveCachePoolRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCachePoolRequestProto& operator=(RemoveCachePoolRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveCachePoolRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveCachePoolRequestProto* internal_default_instance() {
    return reinterpret_cast<const RemoveCachePoolRequestProto*>(
               &_RemoveCachePoolRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(RemoveCachePoolRequestProto& a, RemoveCachePoolRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCachePoolRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveCachePoolRequestProto* New() const final {
    return CreateMaybeMessage<RemoveCachePoolRequestProto>(nullptr);
  }

  RemoveCachePoolRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveCachePoolRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveCachePoolRequestProto& from);
  void MergeFrom(const RemoveCachePoolRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCachePoolRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RemoveCachePoolRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolNameFieldNumber = 1,
  };
  // required string poolName = 1;
  bool has_poolname() const;
  private:
  bool _internal_has_poolname() const;
  public:
  void clear_poolname();
  const std::string& poolname() const;
  void set_poolname(const std::string& value);
  void set_poolname(std::string&& value);
  void set_poolname(const char* value);
  void set_poolname(const char* value, size_t size);
  std::string* mutable_poolname();
  std::string* release_poolname();
  void set_allocated_poolname(std::string* poolname);
  private:
  const std::string& _internal_poolname() const;
  void _internal_set_poolname(const std::string& value);
  std::string* _internal_mutable_poolname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCachePoolRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RemoveCachePoolResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RemoveCachePoolResponseProto) */ {
 public:
  RemoveCachePoolResponseProto();
  virtual ~RemoveCachePoolResponseProto();

  RemoveCachePoolResponseProto(const RemoveCachePoolResponseProto& from);
  RemoveCachePoolResponseProto(RemoveCachePoolResponseProto&& from) noexcept
    : RemoveCachePoolResponseProto() {
    *this = ::std::move(from);
  }

  inline RemoveCachePoolResponseProto& operator=(const RemoveCachePoolResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCachePoolResponseProto& operator=(RemoveCachePoolResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveCachePoolResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveCachePoolResponseProto* internal_default_instance() {
    return reinterpret_cast<const RemoveCachePoolResponseProto*>(
               &_RemoveCachePoolResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(RemoveCachePoolResponseProto& a, RemoveCachePoolResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCachePoolResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveCachePoolResponseProto* New() const final {
    return CreateMaybeMessage<RemoveCachePoolResponseProto>(nullptr);
  }

  RemoveCachePoolResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveCachePoolResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveCachePoolResponseProto& from);
  void MergeFrom(const RemoveCachePoolResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCachePoolResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RemoveCachePoolResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCachePoolResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ListCachePoolsRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListCachePoolsRequestProto) */ {
 public:
  ListCachePoolsRequestProto();
  virtual ~ListCachePoolsRequestProto();

  ListCachePoolsRequestProto(const ListCachePoolsRequestProto& from);
  ListCachePoolsRequestProto(ListCachePoolsRequestProto&& from) noexcept
    : ListCachePoolsRequestProto() {
    *this = ::std::move(from);
  }

  inline ListCachePoolsRequestProto& operator=(const ListCachePoolsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCachePoolsRequestProto& operator=(ListCachePoolsRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCachePoolsRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCachePoolsRequestProto* internal_default_instance() {
    return reinterpret_cast<const ListCachePoolsRequestProto*>(
               &_ListCachePoolsRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ListCachePoolsRequestProto& a, ListCachePoolsRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCachePoolsRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCachePoolsRequestProto* New() const final {
    return CreateMaybeMessage<ListCachePoolsRequestProto>(nullptr);
  }

  ListCachePoolsRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCachePoolsRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCachePoolsRequestProto& from);
  void MergeFrom(const ListCachePoolsRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCachePoolsRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListCachePoolsRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevPoolNameFieldNumber = 1,
  };
  // required string prevPoolName = 1;
  bool has_prevpoolname() const;
  private:
  bool _internal_has_prevpoolname() const;
  public:
  void clear_prevpoolname();
  const std::string& prevpoolname() const;
  void set_prevpoolname(const std::string& value);
  void set_prevpoolname(std::string&& value);
  void set_prevpoolname(const char* value);
  void set_prevpoolname(const char* value, size_t size);
  std::string* mutable_prevpoolname();
  std::string* release_prevpoolname();
  void set_allocated_prevpoolname(std::string* prevpoolname);
  private:
  const std::string& _internal_prevpoolname() const;
  void _internal_set_prevpoolname(const std::string& value);
  std::string* _internal_mutable_prevpoolname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCachePoolsRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevpoolname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class ListCachePoolsResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.ListCachePoolsResponseProto) */ {
 public:
  ListCachePoolsResponseProto();
  virtual ~ListCachePoolsResponseProto();

  ListCachePoolsResponseProto(const ListCachePoolsResponseProto& from);
  ListCachePoolsResponseProto(ListCachePoolsResponseProto&& from) noexcept
    : ListCachePoolsResponseProto() {
    *this = ::std::move(from);
  }

  inline ListCachePoolsResponseProto& operator=(const ListCachePoolsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCachePoolsResponseProto& operator=(ListCachePoolsResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCachePoolsResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCachePoolsResponseProto* internal_default_instance() {
    return reinterpret_cast<const ListCachePoolsResponseProto*>(
               &_ListCachePoolsResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(ListCachePoolsResponseProto& a, ListCachePoolsResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCachePoolsResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCachePoolsResponseProto* New() const final {
    return CreateMaybeMessage<ListCachePoolsResponseProto>(nullptr);
  }

  ListCachePoolsResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCachePoolsResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCachePoolsResponseProto& from);
  void MergeFrom(const ListCachePoolsResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCachePoolsResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.ListCachePoolsResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kHasMoreFieldNumber = 2,
  };
  // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Hdfs::Internal::CachePoolEntryProto* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >*
      mutable_entries();
  private:
  const ::Hdfs::Internal::CachePoolEntryProto& _internal_entries(int index) const;
  ::Hdfs::Internal::CachePoolEntryProto* _internal_add_entries();
  public:
  const ::Hdfs::Internal::CachePoolEntryProto& entries(int index) const;
  ::Hdfs::Internal::CachePoolEntryProto* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >&
      entries() const;

  // required bool hasMore = 2;
  bool has_hasmore() const;
  private:
  bool _internal_has_hasmore() const;
  public:
  void clear_hasmore();
  bool hasmore() const;
  void set_hasmore(bool value);
  private:
  bool _internal_hasmore() const;
  void _internal_set_hasmore(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCachePoolsResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto > entries_;
  bool hasmore_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CachePoolEntryProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CachePoolEntryProto) */ {
 public:
  CachePoolEntryProto();
  virtual ~CachePoolEntryProto();

  CachePoolEntryProto(const CachePoolEntryProto& from);
  CachePoolEntryProto(CachePoolEntryProto&& from) noexcept
    : CachePoolEntryProto() {
    *this = ::std::move(from);
  }

  inline CachePoolEntryProto& operator=(const CachePoolEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachePoolEntryProto& operator=(CachePoolEntryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CachePoolEntryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CachePoolEntryProto* internal_default_instance() {
    return reinterpret_cast<const CachePoolEntryProto*>(
               &_CachePoolEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CachePoolEntryProto& a, CachePoolEntryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CachePoolEntryProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CachePoolEntryProto* New() const final {
    return CreateMaybeMessage<CachePoolEntryProto>(nullptr);
  }

  CachePoolEntryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CachePoolEntryProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CachePoolEntryProto& from);
  void MergeFrom(const CachePoolEntryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachePoolEntryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CachePoolEntryProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Hdfs::Internal::CachePoolInfoProto& info() const;
  ::Hdfs::Internal::CachePoolInfoProto* release_info();
  ::Hdfs::Internal::CachePoolInfoProto* mutable_info();
  void set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info);
  private:
  const ::Hdfs::Internal::CachePoolInfoProto& _internal_info() const;
  ::Hdfs::Internal::CachePoolInfoProto* _internal_mutable_info();
  public:

  // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::Hdfs::Internal::CachePoolStatsProto& stats() const;
  ::Hdfs::Internal::CachePoolStatsProto* release_stats();
  ::Hdfs::Internal::CachePoolStatsProto* mutable_stats();
  void set_allocated_stats(::Hdfs::Internal::CachePoolStatsProto* stats);
  private:
  const ::Hdfs::Internal::CachePoolStatsProto& _internal_stats() const;
  ::Hdfs::Internal::CachePoolStatsProto* _internal_mutable_stats();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CachePoolEntryProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::CachePoolInfoProto* info_;
  ::Hdfs::Internal::CachePoolStatsProto* stats_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetFileLinkInfoRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetFileLinkInfoRequestProto) */ {
 public:
  GetFileLinkInfoRequestProto();
  virtual ~GetFileLinkInfoRequestProto();

  GetFileLinkInfoRequestProto(const GetFileLinkInfoRequestProto& from);
  GetFileLinkInfoRequestProto(GetFileLinkInfoRequestProto&& from) noexcept
    : GetFileLinkInfoRequestProto() {
    *this = ::std::move(from);
  }

  inline GetFileLinkInfoRequestProto& operator=(const GetFileLinkInfoRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileLinkInfoRequestProto& operator=(GetFileLinkInfoRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileLinkInfoRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileLinkInfoRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetFileLinkInfoRequestProto*>(
               &_GetFileLinkInfoRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GetFileLinkInfoRequestProto& a, GetFileLinkInfoRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileLinkInfoRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileLinkInfoRequestProto* New() const final {
    return CreateMaybeMessage<GetFileLinkInfoRequestProto>(nullptr);
  }

  GetFileLinkInfoRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileLinkInfoRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileLinkInfoRequestProto& from);
  void MergeFrom(const GetFileLinkInfoRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileLinkInfoRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetFileLinkInfoRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileLinkInfoRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetFileLinkInfoResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetFileLinkInfoResponseProto) */ {
 public:
  GetFileLinkInfoResponseProto();
  virtual ~GetFileLinkInfoResponseProto();

  GetFileLinkInfoResponseProto(const GetFileLinkInfoResponseProto& from);
  GetFileLinkInfoResponseProto(GetFileLinkInfoResponseProto&& from) noexcept
    : GetFileLinkInfoResponseProto() {
    *this = ::std::move(from);
  }

  inline GetFileLinkInfoResponseProto& operator=(const GetFileLinkInfoResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileLinkInfoResponseProto& operator=(GetFileLinkInfoResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileLinkInfoResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileLinkInfoResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetFileLinkInfoResponseProto*>(
               &_GetFileLinkInfoResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GetFileLinkInfoResponseProto& a, GetFileLinkInfoResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileLinkInfoResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileLinkInfoResponseProto* New() const final {
    return CreateMaybeMessage<GetFileLinkInfoResponseProto>(nullptr);
  }

  GetFileLinkInfoResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileLinkInfoResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileLinkInfoResponseProto& from);
  void MergeFrom(const GetFileLinkInfoResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileLinkInfoResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetFileLinkInfoResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsFieldNumber = 1,
  };
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  bool has_fs() const;
  private:
  bool _internal_has_fs() const;
  public:
  void clear_fs();
  const ::Hdfs::Internal::HdfsFileStatusProto& fs() const;
  ::Hdfs::Internal::HdfsFileStatusProto* release_fs();
  ::Hdfs::Internal::HdfsFileStatusProto* mutable_fs();
  void set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs);
  private:
  const ::Hdfs::Internal::HdfsFileStatusProto& _internal_fs() const;
  ::Hdfs::Internal::HdfsFileStatusProto* _internal_mutable_fs();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileLinkInfoResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::HdfsFileStatusProto* fs_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetContentSummaryRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetContentSummaryRequestProto) */ {
 public:
  GetContentSummaryRequestProto();
  virtual ~GetContentSummaryRequestProto();

  GetContentSummaryRequestProto(const GetContentSummaryRequestProto& from);
  GetContentSummaryRequestProto(GetContentSummaryRequestProto&& from) noexcept
    : GetContentSummaryRequestProto() {
    *this = ::std::move(from);
  }

  inline GetContentSummaryRequestProto& operator=(const GetContentSummaryRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContentSummaryRequestProto& operator=(GetContentSummaryRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContentSummaryRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContentSummaryRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetContentSummaryRequestProto*>(
               &_GetContentSummaryRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(GetContentSummaryRequestProto& a, GetContentSummaryRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContentSummaryRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContentSummaryRequestProto* New() const final {
    return CreateMaybeMessage<GetContentSummaryRequestProto>(nullptr);
  }

  GetContentSummaryRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContentSummaryRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContentSummaryRequestProto& from);
  void MergeFrom(const GetContentSummaryRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContentSummaryRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetContentSummaryRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetContentSummaryRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetContentSummaryResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetContentSummaryResponseProto) */ {
 public:
  GetContentSummaryResponseProto();
  virtual ~GetContentSummaryResponseProto();

  GetContentSummaryResponseProto(const GetContentSummaryResponseProto& from);
  GetContentSummaryResponseProto(GetContentSummaryResponseProto&& from) noexcept
    : GetContentSummaryResponseProto() {
    *this = ::std::move(from);
  }

  inline GetContentSummaryResponseProto& operator=(const GetContentSummaryResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContentSummaryResponseProto& operator=(GetContentSummaryResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetContentSummaryResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContentSummaryResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetContentSummaryResponseProto*>(
               &_GetContentSummaryResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(GetContentSummaryResponseProto& a, GetContentSummaryResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContentSummaryResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContentSummaryResponseProto* New() const final {
    return CreateMaybeMessage<GetContentSummaryResponseProto>(nullptr);
  }

  GetContentSummaryResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContentSummaryResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetContentSummaryResponseProto& from);
  void MergeFrom(const GetContentSummaryResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContentSummaryResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetContentSummaryResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
  };
  // required .Hdfs.Internal.ContentSummaryProto summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::Hdfs::Internal::ContentSummaryProto& summary() const;
  ::Hdfs::Internal::ContentSummaryProto* release_summary();
  ::Hdfs::Internal::ContentSummaryProto* mutable_summary();
  void set_allocated_summary(::Hdfs::Internal::ContentSummaryProto* summary);
  private:
  const ::Hdfs::Internal::ContentSummaryProto& _internal_summary() const;
  ::Hdfs::Internal::ContentSummaryProto* _internal_mutable_summary();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetContentSummaryResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::ContentSummaryProto* summary_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetQuotaRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetQuotaRequestProto) */ {
 public:
  SetQuotaRequestProto();
  virtual ~SetQuotaRequestProto();

  SetQuotaRequestProto(const SetQuotaRequestProto& from);
  SetQuotaRequestProto(SetQuotaRequestProto&& from) noexcept
    : SetQuotaRequestProto() {
    *this = ::std::move(from);
  }

  inline SetQuotaRequestProto& operator=(const SetQuotaRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetQuotaRequestProto& operator=(SetQuotaRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetQuotaRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetQuotaRequestProto* internal_default_instance() {
    return reinterpret_cast<const SetQuotaRequestProto*>(
               &_SetQuotaRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SetQuotaRequestProto& a, SetQuotaRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetQuotaRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetQuotaRequestProto* New() const final {
    return CreateMaybeMessage<SetQuotaRequestProto>(nullptr);
  }

  SetQuotaRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetQuotaRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetQuotaRequestProto& from);
  void MergeFrom(const SetQuotaRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetQuotaRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetQuotaRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNamespaceQuotaFieldNumber = 2,
    kDiskspaceQuotaFieldNumber = 3,
  };
  // required string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required uint64 namespaceQuota = 2;
  bool has_namespacequota() const;
  private:
  bool _internal_has_namespacequota() const;
  public:
  void clear_namespacequota();
  ::PROTOBUF_NAMESPACE_ID::uint64 namespacequota() const;
  void set_namespacequota(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_namespacequota() const;
  void _internal_set_namespacequota(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 diskspaceQuota = 3;
  bool has_diskspacequota() const;
  private:
  bool _internal_has_diskspacequota() const;
  public:
  void clear_diskspacequota();
  ::PROTOBUF_NAMESPACE_ID::uint64 diskspacequota() const;
  void set_diskspacequota(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_diskspacequota() const;
  void _internal_set_diskspacequota(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetQuotaRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 namespacequota_;
  ::PROTOBUF_NAMESPACE_ID::uint64 diskspacequota_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetQuotaResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetQuotaResponseProto) */ {
 public:
  SetQuotaResponseProto();
  virtual ~SetQuotaResponseProto();

  SetQuotaResponseProto(const SetQuotaResponseProto& from);
  SetQuotaResponseProto(SetQuotaResponseProto&& from) noexcept
    : SetQuotaResponseProto() {
    *this = ::std::move(from);
  }

  inline SetQuotaResponseProto& operator=(const SetQuotaResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetQuotaResponseProto& operator=(SetQuotaResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetQuotaResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetQuotaResponseProto* internal_default_instance() {
    return reinterpret_cast<const SetQuotaResponseProto*>(
               &_SetQuotaResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SetQuotaResponseProto& a, SetQuotaResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetQuotaResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetQuotaResponseProto* New() const final {
    return CreateMaybeMessage<SetQuotaResponseProto>(nullptr);
  }

  SetQuotaResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetQuotaResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetQuotaResponseProto& from);
  void MergeFrom(const SetQuotaResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetQuotaResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetQuotaResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetQuotaResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class FsyncRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.FsyncRequestProto) */ {
 public:
  FsyncRequestProto();
  virtual ~FsyncRequestProto();

  FsyncRequestProto(const FsyncRequestProto& from);
  FsyncRequestProto(FsyncRequestProto&& from) noexcept
    : FsyncRequestProto() {
    *this = ::std::move(from);
  }

  inline FsyncRequestProto& operator=(const FsyncRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FsyncRequestProto& operator=(FsyncRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FsyncRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FsyncRequestProto* internal_default_instance() {
    return reinterpret_cast<const FsyncRequestProto*>(
               &_FsyncRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(FsyncRequestProto& a, FsyncRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FsyncRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FsyncRequestProto* New() const final {
    return CreateMaybeMessage<FsyncRequestProto>(nullptr);
  }

  FsyncRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FsyncRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FsyncRequestProto& from);
  void MergeFrom(const FsyncRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FsyncRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.FsyncRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kClientFieldNumber = 2,
    kLastBlockLengthFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string client = 2;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const std::string& client() const;
  void set_client(const std::string& value);
  void set_client(std::string&& value);
  void set_client(const char* value);
  void set_client(const char* value, size_t size);
  std::string* mutable_client();
  std::string* release_client();
  void set_allocated_client(std::string* client);
  private:
  const std::string& _internal_client() const;
  void _internal_set_client(const std::string& value);
  std::string* _internal_mutable_client();
  public:

  // optional sint64 lastBlockLength = 3 [default = -1];
  bool has_lastblocklength() const;
  private:
  bool _internal_has_lastblocklength() const;
  public:
  void clear_lastblocklength();
  ::PROTOBUF_NAMESPACE_ID::int64 lastblocklength() const;
  void set_lastblocklength(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastblocklength() const;
  void _internal_set_lastblocklength(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FsyncRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastblocklength_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class FsyncResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.FsyncResponseProto) */ {
 public:
  FsyncResponseProto();
  virtual ~FsyncResponseProto();

  FsyncResponseProto(const FsyncResponseProto& from);
  FsyncResponseProto(FsyncResponseProto&& from) noexcept
    : FsyncResponseProto() {
    *this = ::std::move(from);
  }

  inline FsyncResponseProto& operator=(const FsyncResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FsyncResponseProto& operator=(FsyncResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FsyncResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FsyncResponseProto* internal_default_instance() {
    return reinterpret_cast<const FsyncResponseProto*>(
               &_FsyncResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(FsyncResponseProto& a, FsyncResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FsyncResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FsyncResponseProto* New() const final {
    return CreateMaybeMessage<FsyncResponseProto>(nullptr);
  }

  FsyncResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FsyncResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FsyncResponseProto& from);
  void MergeFrom(const FsyncResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FsyncResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.FsyncResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FsyncResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetTimesRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetTimesRequestProto) */ {
 public:
  SetTimesRequestProto();
  virtual ~SetTimesRequestProto();

  SetTimesRequestProto(const SetTimesRequestProto& from);
  SetTimesRequestProto(SetTimesRequestProto&& from) noexcept
    : SetTimesRequestProto() {
    *this = ::std::move(from);
  }

  inline SetTimesRequestProto& operator=(const SetTimesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTimesRequestProto& operator=(SetTimesRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTimesRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTimesRequestProto* internal_default_instance() {
    return reinterpret_cast<const SetTimesRequestProto*>(
               &_SetTimesRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(SetTimesRequestProto& a, SetTimesRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTimesRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTimesRequestProto* New() const final {
    return CreateMaybeMessage<SetTimesRequestProto>(nullptr);
  }

  SetTimesRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTimesRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTimesRequestProto& from);
  void MergeFrom(const SetTimesRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTimesRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetTimesRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kMtimeFieldNumber = 2,
    kAtimeFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required uint64 mtime = 2;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 atime = 3;
  bool has_atime() const;
  private:
  bool _internal_has_atime() const;
  public:
  void clear_atime();
  ::PROTOBUF_NAMESPACE_ID::uint64 atime() const;
  void set_atime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_atime() const;
  void _internal_set_atime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetTimesRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 atime_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetTimesResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetTimesResponseProto) */ {
 public:
  SetTimesResponseProto();
  virtual ~SetTimesResponseProto();

  SetTimesResponseProto(const SetTimesResponseProto& from);
  SetTimesResponseProto(SetTimesResponseProto&& from) noexcept
    : SetTimesResponseProto() {
    *this = ::std::move(from);
  }

  inline SetTimesResponseProto& operator=(const SetTimesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTimesResponseProto& operator=(SetTimesResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTimesResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTimesResponseProto* internal_default_instance() {
    return reinterpret_cast<const SetTimesResponseProto*>(
               &_SetTimesResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SetTimesResponseProto& a, SetTimesResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTimesResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTimesResponseProto* New() const final {
    return CreateMaybeMessage<SetTimesResponseProto>(nullptr);
  }

  SetTimesResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTimesResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTimesResponseProto& from);
  void MergeFrom(const SetTimesResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTimesResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetTimesResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetTimesResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateSymlinkRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateSymlinkRequestProto) */ {
 public:
  CreateSymlinkRequestProto();
  virtual ~CreateSymlinkRequestProto();

  CreateSymlinkRequestProto(const CreateSymlinkRequestProto& from);
  CreateSymlinkRequestProto(CreateSymlinkRequestProto&& from) noexcept
    : CreateSymlinkRequestProto() {
    *this = ::std::move(from);
  }

  inline CreateSymlinkRequestProto& operator=(const CreateSymlinkRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSymlinkRequestProto& operator=(CreateSymlinkRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSymlinkRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSymlinkRequestProto* internal_default_instance() {
    return reinterpret_cast<const CreateSymlinkRequestProto*>(
               &_CreateSymlinkRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CreateSymlinkRequestProto& a, CreateSymlinkRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSymlinkRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSymlinkRequestProto* New() const final {
    return CreateMaybeMessage<CreateSymlinkRequestProto>(nullptr);
  }

  CreateSymlinkRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSymlinkRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSymlinkRequestProto& from);
  void MergeFrom(const CreateSymlinkRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSymlinkRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateSymlinkRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kLinkFieldNumber = 2,
    kDirPermFieldNumber = 3,
    kCreateParentFieldNumber = 4,
  };
  // required string target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // required string link = 2;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const std::string& link() const;
  void set_link(const std::string& value);
  void set_link(std::string&& value);
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  std::string* mutable_link();
  std::string* release_link();
  void set_allocated_link(std::string* link);
  private:
  const std::string& _internal_link() const;
  void _internal_set_link(const std::string& value);
  std::string* _internal_mutable_link();
  public:

  // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
  bool has_dirperm() const;
  private:
  bool _internal_has_dirperm() const;
  public:
  void clear_dirperm();
  const ::Hdfs::Internal::FsPermissionProto& dirperm() const;
  ::Hdfs::Internal::FsPermissionProto* release_dirperm();
  ::Hdfs::Internal::FsPermissionProto* mutable_dirperm();
  void set_allocated_dirperm(::Hdfs::Internal::FsPermissionProto* dirperm);
  private:
  const ::Hdfs::Internal::FsPermissionProto& _internal_dirperm() const;
  ::Hdfs::Internal::FsPermissionProto* _internal_mutable_dirperm();
  public:

  // required bool createParent = 4;
  bool has_createparent() const;
  private:
  bool _internal_has_createparent() const;
  public:
  void clear_createparent();
  bool createparent() const;
  void set_createparent(bool value);
  private:
  bool _internal_createparent() const;
  void _internal_set_createparent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSymlinkRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_;
  ::Hdfs::Internal::FsPermissionProto* dirperm_;
  bool createparent_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateSymlinkResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateSymlinkResponseProto) */ {
 public:
  CreateSymlinkResponseProto();
  virtual ~CreateSymlinkResponseProto();

  CreateSymlinkResponseProto(const CreateSymlinkResponseProto& from);
  CreateSymlinkResponseProto(CreateSymlinkResponseProto&& from) noexcept
    : CreateSymlinkResponseProto() {
    *this = ::std::move(from);
  }

  inline CreateSymlinkResponseProto& operator=(const CreateSymlinkResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSymlinkResponseProto& operator=(CreateSymlinkResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSymlinkResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSymlinkResponseProto* internal_default_instance() {
    return reinterpret_cast<const CreateSymlinkResponseProto*>(
               &_CreateSymlinkResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CreateSymlinkResponseProto& a, CreateSymlinkResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSymlinkResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSymlinkResponseProto* New() const final {
    return CreateMaybeMessage<CreateSymlinkResponseProto>(nullptr);
  }

  CreateSymlinkResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSymlinkResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSymlinkResponseProto& from);
  void MergeFrom(const CreateSymlinkResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSymlinkResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateSymlinkResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSymlinkResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetLinkTargetRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetLinkTargetRequestProto) */ {
 public:
  GetLinkTargetRequestProto();
  virtual ~GetLinkTargetRequestProto();

  GetLinkTargetRequestProto(const GetLinkTargetRequestProto& from);
  GetLinkTargetRequestProto(GetLinkTargetRequestProto&& from) noexcept
    : GetLinkTargetRequestProto() {
    *this = ::std::move(from);
  }

  inline GetLinkTargetRequestProto& operator=(const GetLinkTargetRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinkTargetRequestProto& operator=(GetLinkTargetRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLinkTargetRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLinkTargetRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetLinkTargetRequestProto*>(
               &_GetLinkTargetRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(GetLinkTargetRequestProto& a, GetLinkTargetRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinkTargetRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLinkTargetRequestProto* New() const final {
    return CreateMaybeMessage<GetLinkTargetRequestProto>(nullptr);
  }

  GetLinkTargetRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLinkTargetRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLinkTargetRequestProto& from);
  void MergeFrom(const GetLinkTargetRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLinkTargetRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetLinkTargetRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLinkTargetRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetLinkTargetResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetLinkTargetResponseProto) */ {
 public:
  GetLinkTargetResponseProto();
  virtual ~GetLinkTargetResponseProto();

  GetLinkTargetResponseProto(const GetLinkTargetResponseProto& from);
  GetLinkTargetResponseProto(GetLinkTargetResponseProto&& from) noexcept
    : GetLinkTargetResponseProto() {
    *this = ::std::move(from);
  }

  inline GetLinkTargetResponseProto& operator=(const GetLinkTargetResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinkTargetResponseProto& operator=(GetLinkTargetResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLinkTargetResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLinkTargetResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetLinkTargetResponseProto*>(
               &_GetLinkTargetResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(GetLinkTargetResponseProto& a, GetLinkTargetResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinkTargetResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLinkTargetResponseProto* New() const final {
    return CreateMaybeMessage<GetLinkTargetResponseProto>(nullptr);
  }

  GetLinkTargetResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLinkTargetResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLinkTargetResponseProto& from);
  void MergeFrom(const GetLinkTargetResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLinkTargetResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetLinkTargetResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPathFieldNumber = 1,
  };
  // optional string targetPath = 1;
  bool has_targetpath() const;
  private:
  bool _internal_has_targetpath() const;
  public:
  void clear_targetpath();
  const std::string& targetpath() const;
  void set_targetpath(const std::string& value);
  void set_targetpath(std::string&& value);
  void set_targetpath(const char* value);
  void set_targetpath(const char* value, size_t size);
  std::string* mutable_targetpath();
  std::string* release_targetpath();
  void set_allocated_targetpath(std::string* targetpath);
  private:
  const std::string& _internal_targetpath() const;
  void _internal_set_targetpath(const std::string& value);
  std::string* _internal_mutable_targetpath();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLinkTargetResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetpath_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class UpdateBlockForPipelineRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.UpdateBlockForPipelineRequestProto) */ {
 public:
  UpdateBlockForPipelineRequestProto();
  virtual ~UpdateBlockForPipelineRequestProto();

  UpdateBlockForPipelineRequestProto(const UpdateBlockForPipelineRequestProto& from);
  UpdateBlockForPipelineRequestProto(UpdateBlockForPipelineRequestProto&& from) noexcept
    : UpdateBlockForPipelineRequestProto() {
    *this = ::std::move(from);
  }

  inline UpdateBlockForPipelineRequestProto& operator=(const UpdateBlockForPipelineRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBlockForPipelineRequestProto& operator=(UpdateBlockForPipelineRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBlockForPipelineRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBlockForPipelineRequestProto* internal_default_instance() {
    return reinterpret_cast<const UpdateBlockForPipelineRequestProto*>(
               &_UpdateBlockForPipelineRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(UpdateBlockForPipelineRequestProto& a, UpdateBlockForPipelineRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBlockForPipelineRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBlockForPipelineRequestProto* New() const final {
    return CreateMaybeMessage<UpdateBlockForPipelineRequestProto>(nullptr);
  }

  UpdateBlockForPipelineRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBlockForPipelineRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBlockForPipelineRequestProto& from);
  void MergeFrom(const UpdateBlockForPipelineRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBlockForPipelineRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.UpdateBlockForPipelineRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientNameFieldNumber = 2,
    kBlockFieldNumber = 1,
  };
  // required string clientName = 2;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::ExtendedBlockProto& block() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_block();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_block() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* block_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class UpdateBlockForPipelineResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.UpdateBlockForPipelineResponseProto) */ {
 public:
  UpdateBlockForPipelineResponseProto();
  virtual ~UpdateBlockForPipelineResponseProto();

  UpdateBlockForPipelineResponseProto(const UpdateBlockForPipelineResponseProto& from);
  UpdateBlockForPipelineResponseProto(UpdateBlockForPipelineResponseProto&& from) noexcept
    : UpdateBlockForPipelineResponseProto() {
    *this = ::std::move(from);
  }

  inline UpdateBlockForPipelineResponseProto& operator=(const UpdateBlockForPipelineResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBlockForPipelineResponseProto& operator=(UpdateBlockForPipelineResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBlockForPipelineResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBlockForPipelineResponseProto* internal_default_instance() {
    return reinterpret_cast<const UpdateBlockForPipelineResponseProto*>(
               &_UpdateBlockForPipelineResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(UpdateBlockForPipelineResponseProto& a, UpdateBlockForPipelineResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBlockForPipelineResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBlockForPipelineResponseProto* New() const final {
    return CreateMaybeMessage<UpdateBlockForPipelineResponseProto>(nullptr);
  }

  UpdateBlockForPipelineResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBlockForPipelineResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBlockForPipelineResponseProto& from);
  void MergeFrom(const UpdateBlockForPipelineResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBlockForPipelineResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.UpdateBlockForPipelineResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::LocatedBlockProto& block() const;
  ::Hdfs::Internal::LocatedBlockProto* release_block();
  ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);
  private:
  const ::Hdfs::Internal::LocatedBlockProto& _internal_block() const;
  ::Hdfs::Internal::LocatedBlockProto* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::LocatedBlockProto* block_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class UpdatePipelineRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.UpdatePipelineRequestProto) */ {
 public:
  UpdatePipelineRequestProto();
  virtual ~UpdatePipelineRequestProto();

  UpdatePipelineRequestProto(const UpdatePipelineRequestProto& from);
  UpdatePipelineRequestProto(UpdatePipelineRequestProto&& from) noexcept
    : UpdatePipelineRequestProto() {
    *this = ::std::move(from);
  }

  inline UpdatePipelineRequestProto& operator=(const UpdatePipelineRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePipelineRequestProto& operator=(UpdatePipelineRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePipelineRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePipelineRequestProto* internal_default_instance() {
    return reinterpret_cast<const UpdatePipelineRequestProto*>(
               &_UpdatePipelineRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(UpdatePipelineRequestProto& a, UpdatePipelineRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePipelineRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePipelineRequestProto* New() const final {
    return CreateMaybeMessage<UpdatePipelineRequestProto>(nullptr);
  }

  UpdatePipelineRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePipelineRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePipelineRequestProto& from);
  void MergeFrom(const UpdatePipelineRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePipelineRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.UpdatePipelineRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewNodesFieldNumber = 4,
    kStorageIDsFieldNumber = 5,
    kClientNameFieldNumber = 1,
    kOldBlockFieldNumber = 2,
    kNewBlockFieldNumber = 3,
  };
  // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
  int newnodes_size() const;
  private:
  int _internal_newnodes_size() const;
  public:
  void clear_newnodes();
  ::Hdfs::Internal::DatanodeIDProto* mutable_newnodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >*
      mutable_newnodes();
  private:
  const ::Hdfs::Internal::DatanodeIDProto& _internal_newnodes(int index) const;
  ::Hdfs::Internal::DatanodeIDProto* _internal_add_newnodes();
  public:
  const ::Hdfs::Internal::DatanodeIDProto& newnodes(int index) const;
  ::Hdfs::Internal::DatanodeIDProto* add_newnodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >&
      newnodes() const;

  // repeated string storageIDs = 5;
  int storageids_size() const;
  private:
  int _internal_storageids_size() const;
  public:
  void clear_storageids();
  const std::string& storageids(int index) const;
  std::string* mutable_storageids(int index);
  void set_storageids(int index, const std::string& value);
  void set_storageids(int index, std::string&& value);
  void set_storageids(int index, const char* value);
  void set_storageids(int index, const char* value, size_t size);
  std::string* add_storageids();
  void add_storageids(const std::string& value);
  void add_storageids(std::string&& value);
  void add_storageids(const char* value);
  void add_storageids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& storageids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_storageids();
  private:
  const std::string& _internal_storageids(int index) const;
  std::string* _internal_add_storageids();
  public:

  // required string clientName = 1;
  bool has_clientname() const;
  private:
  bool _internal_has_clientname() const;
  public:
  void clear_clientname();
  const std::string& clientname() const;
  void set_clientname(const std::string& value);
  void set_clientname(std::string&& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  std::string* mutable_clientname();
  std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
  bool has_oldblock() const;
  private:
  bool _internal_has_oldblock() const;
  public:
  void clear_oldblock();
  const ::Hdfs::Internal::ExtendedBlockProto& oldblock() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_oldblock();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_oldblock();
  void set_allocated_oldblock(::Hdfs::Internal::ExtendedBlockProto* oldblock);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_oldblock() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_oldblock();
  public:

  // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
  bool has_newblock() const;
  private:
  bool _internal_has_newblock() const;
  public:
  void clear_newblock();
  const ::Hdfs::Internal::ExtendedBlockProto& newblock() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_newblock();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_newblock();
  void set_allocated_newblock(::Hdfs::Internal::ExtendedBlockProto* newblock);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_newblock() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_newblock();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdatePipelineRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto > newnodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> storageids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* oldblock_;
  ::Hdfs::Internal::ExtendedBlockProto* newblock_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class UpdatePipelineResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.UpdatePipelineResponseProto) */ {
 public:
  UpdatePipelineResponseProto();
  virtual ~UpdatePipelineResponseProto();

  UpdatePipelineResponseProto(const UpdatePipelineResponseProto& from);
  UpdatePipelineResponseProto(UpdatePipelineResponseProto&& from) noexcept
    : UpdatePipelineResponseProto() {
    *this = ::std::move(from);
  }

  inline UpdatePipelineResponseProto& operator=(const UpdatePipelineResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePipelineResponseProto& operator=(UpdatePipelineResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePipelineResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePipelineResponseProto* internal_default_instance() {
    return reinterpret_cast<const UpdatePipelineResponseProto*>(
               &_UpdatePipelineResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(UpdatePipelineResponseProto& a, UpdatePipelineResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePipelineResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePipelineResponseProto* New() const final {
    return CreateMaybeMessage<UpdatePipelineResponseProto>(nullptr);
  }

  UpdatePipelineResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePipelineResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePipelineResponseProto& from);
  void MergeFrom(const UpdatePipelineResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePipelineResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.UpdatePipelineResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdatePipelineResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetBalancerBandwidthRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetBalancerBandwidthRequestProto) */ {
 public:
  SetBalancerBandwidthRequestProto();
  virtual ~SetBalancerBandwidthRequestProto();

  SetBalancerBandwidthRequestProto(const SetBalancerBandwidthRequestProto& from);
  SetBalancerBandwidthRequestProto(SetBalancerBandwidthRequestProto&& from) noexcept
    : SetBalancerBandwidthRequestProto() {
    *this = ::std::move(from);
  }

  inline SetBalancerBandwidthRequestProto& operator=(const SetBalancerBandwidthRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBalancerBandwidthRequestProto& operator=(SetBalancerBandwidthRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBalancerBandwidthRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBalancerBandwidthRequestProto* internal_default_instance() {
    return reinterpret_cast<const SetBalancerBandwidthRequestProto*>(
               &_SetBalancerBandwidthRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SetBalancerBandwidthRequestProto& a, SetBalancerBandwidthRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBalancerBandwidthRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBalancerBandwidthRequestProto* New() const final {
    return CreateMaybeMessage<SetBalancerBandwidthRequestProto>(nullptr);
  }

  SetBalancerBandwidthRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBalancerBandwidthRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBalancerBandwidthRequestProto& from);
  void MergeFrom(const SetBalancerBandwidthRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBalancerBandwidthRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetBalancerBandwidthRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandwidthFieldNumber = 1,
  };
  // required int64 bandwidth = 1;
  bool has_bandwidth() const;
  private:
  bool _internal_has_bandwidth() const;
  public:
  void clear_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::int64 bandwidth() const;
  void set_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bandwidth() const;
  void _internal_set_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetBalancerBandwidthRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 bandwidth_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class SetBalancerBandwidthResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.SetBalancerBandwidthResponseProto) */ {
 public:
  SetBalancerBandwidthResponseProto();
  virtual ~SetBalancerBandwidthResponseProto();

  SetBalancerBandwidthResponseProto(const SetBalancerBandwidthResponseProto& from);
  SetBalancerBandwidthResponseProto(SetBalancerBandwidthResponseProto&& from) noexcept
    : SetBalancerBandwidthResponseProto() {
    *this = ::std::move(from);
  }

  inline SetBalancerBandwidthResponseProto& operator=(const SetBalancerBandwidthResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBalancerBandwidthResponseProto& operator=(SetBalancerBandwidthResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBalancerBandwidthResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBalancerBandwidthResponseProto* internal_default_instance() {
    return reinterpret_cast<const SetBalancerBandwidthResponseProto*>(
               &_SetBalancerBandwidthResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(SetBalancerBandwidthResponseProto& a, SetBalancerBandwidthResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBalancerBandwidthResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBalancerBandwidthResponseProto* New() const final {
    return CreateMaybeMessage<SetBalancerBandwidthResponseProto>(nullptr);
  }

  SetBalancerBandwidthResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBalancerBandwidthResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBalancerBandwidthResponseProto& from);
  void MergeFrom(const SetBalancerBandwidthResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBalancerBandwidthResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.SetBalancerBandwidthResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetBalancerBandwidthResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetDataEncryptionKeyRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetDataEncryptionKeyRequestProto) */ {
 public:
  GetDataEncryptionKeyRequestProto();
  virtual ~GetDataEncryptionKeyRequestProto();

  GetDataEncryptionKeyRequestProto(const GetDataEncryptionKeyRequestProto& from);
  GetDataEncryptionKeyRequestProto(GetDataEncryptionKeyRequestProto&& from) noexcept
    : GetDataEncryptionKeyRequestProto() {
    *this = ::std::move(from);
  }

  inline GetDataEncryptionKeyRequestProto& operator=(const GetDataEncryptionKeyRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataEncryptionKeyRequestProto& operator=(GetDataEncryptionKeyRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataEncryptionKeyRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataEncryptionKeyRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetDataEncryptionKeyRequestProto*>(
               &_GetDataEncryptionKeyRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(GetDataEncryptionKeyRequestProto& a, GetDataEncryptionKeyRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataEncryptionKeyRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataEncryptionKeyRequestProto* New() const final {
    return CreateMaybeMessage<GetDataEncryptionKeyRequestProto>(nullptr);
  }

  GetDataEncryptionKeyRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataEncryptionKeyRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataEncryptionKeyRequestProto& from);
  void MergeFrom(const GetDataEncryptionKeyRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataEncryptionKeyRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetDataEncryptionKeyRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetDataEncryptionKeyResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetDataEncryptionKeyResponseProto) */ {
 public:
  GetDataEncryptionKeyResponseProto();
  virtual ~GetDataEncryptionKeyResponseProto();

  GetDataEncryptionKeyResponseProto(const GetDataEncryptionKeyResponseProto& from);
  GetDataEncryptionKeyResponseProto(GetDataEncryptionKeyResponseProto&& from) noexcept
    : GetDataEncryptionKeyResponseProto() {
    *this = ::std::move(from);
  }

  inline GetDataEncryptionKeyResponseProto& operator=(const GetDataEncryptionKeyResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataEncryptionKeyResponseProto& operator=(GetDataEncryptionKeyResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataEncryptionKeyResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataEncryptionKeyResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetDataEncryptionKeyResponseProto*>(
               &_GetDataEncryptionKeyResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(GetDataEncryptionKeyResponseProto& a, GetDataEncryptionKeyResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataEncryptionKeyResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataEncryptionKeyResponseProto* New() const final {
    return CreateMaybeMessage<GetDataEncryptionKeyResponseProto>(nullptr);
  }

  GetDataEncryptionKeyResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataEncryptionKeyResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataEncryptionKeyResponseProto& from);
  void MergeFrom(const GetDataEncryptionKeyResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataEncryptionKeyResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetDataEncryptionKeyResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataEncryptionKeyFieldNumber = 1,
  };
  // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
  bool has_dataencryptionkey() const;
  private:
  bool _internal_has_dataencryptionkey() const;
  public:
  void clear_dataencryptionkey();
  const ::Hdfs::Internal::DataEncryptionKeyProto& dataencryptionkey() const;
  ::Hdfs::Internal::DataEncryptionKeyProto* release_dataencryptionkey();
  ::Hdfs::Internal::DataEncryptionKeyProto* mutable_dataencryptionkey();
  void set_allocated_dataencryptionkey(::Hdfs::Internal::DataEncryptionKeyProto* dataencryptionkey);
  private:
  const ::Hdfs::Internal::DataEncryptionKeyProto& _internal_dataencryptionkey() const;
  ::Hdfs::Internal::DataEncryptionKeyProto* _internal_mutable_dataencryptionkey();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::DataEncryptionKeyProto* dataencryptionkey_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateSnapshotRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateSnapshotRequestProto) */ {
 public:
  CreateSnapshotRequestProto();
  virtual ~CreateSnapshotRequestProto();

  CreateSnapshotRequestProto(const CreateSnapshotRequestProto& from);
  CreateSnapshotRequestProto(CreateSnapshotRequestProto&& from) noexcept
    : CreateSnapshotRequestProto() {
    *this = ::std::move(from);
  }

  inline CreateSnapshotRequestProto& operator=(const CreateSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSnapshotRequestProto& operator=(CreateSnapshotRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSnapshotRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSnapshotRequestProto* internal_default_instance() {
    return reinterpret_cast<const CreateSnapshotRequestProto*>(
               &_CreateSnapshotRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CreateSnapshotRequestProto& a, CreateSnapshotRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSnapshotRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSnapshotRequestProto* New() const final {
    return CreateMaybeMessage<CreateSnapshotRequestProto>(nullptr);
  }

  CreateSnapshotRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSnapshotRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSnapshotRequestProto& from);
  void MergeFrom(const CreateSnapshotRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSnapshotRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateSnapshotRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotRootFieldNumber = 1,
    kSnapshotNameFieldNumber = 2,
  };
  // required string snapshotRoot = 1;
  bool has_snapshotroot() const;
  private:
  bool _internal_has_snapshotroot() const;
  public:
  void clear_snapshotroot();
  const std::string& snapshotroot() const;
  void set_snapshotroot(const std::string& value);
  void set_snapshotroot(std::string&& value);
  void set_snapshotroot(const char* value);
  void set_snapshotroot(const char* value, size_t size);
  std::string* mutable_snapshotroot();
  std::string* release_snapshotroot();
  void set_allocated_snapshotroot(std::string* snapshotroot);
  private:
  const std::string& _internal_snapshotroot() const;
  void _internal_set_snapshotroot(const std::string& value);
  std::string* _internal_mutable_snapshotroot();
  public:

  // optional string snapshotName = 2;
  bool has_snapshotname() const;
  private:
  bool _internal_has_snapshotname() const;
  public:
  void clear_snapshotname();
  const std::string& snapshotname() const;
  void set_snapshotname(const std::string& value);
  void set_snapshotname(std::string&& value);
  void set_snapshotname(const char* value);
  void set_snapshotname(const char* value, size_t size);
  std::string* mutable_snapshotname();
  std::string* release_snapshotname();
  void set_allocated_snapshotname(std::string* snapshotname);
  private:
  const std::string& _internal_snapshotname() const;
  void _internal_set_snapshotname(const std::string& value);
  std::string* _internal_mutable_snapshotname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSnapshotRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class CreateSnapshotResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CreateSnapshotResponseProto) */ {
 public:
  CreateSnapshotResponseProto();
  virtual ~CreateSnapshotResponseProto();

  CreateSnapshotResponseProto(const CreateSnapshotResponseProto& from);
  CreateSnapshotResponseProto(CreateSnapshotResponseProto&& from) noexcept
    : CreateSnapshotResponseProto() {
    *this = ::std::move(from);
  }

  inline CreateSnapshotResponseProto& operator=(const CreateSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSnapshotResponseProto& operator=(CreateSnapshotResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSnapshotResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSnapshotResponseProto* internal_default_instance() {
    return reinterpret_cast<const CreateSnapshotResponseProto*>(
               &_CreateSnapshotResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CreateSnapshotResponseProto& a, CreateSnapshotResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSnapshotResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSnapshotResponseProto* New() const final {
    return CreateMaybeMessage<CreateSnapshotResponseProto>(nullptr);
  }

  CreateSnapshotResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSnapshotResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSnapshotResponseProto& from);
  void MergeFrom(const CreateSnapshotResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSnapshotResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CreateSnapshotResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotPathFieldNumber = 1,
  };
  // required string snapshotPath = 1;
  bool has_snapshotpath() const;
  private:
  bool _internal_has_snapshotpath() const;
  public:
  void clear_snapshotpath();
  const std::string& snapshotpath() const;
  void set_snapshotpath(const std::string& value);
  void set_snapshotpath(std::string&& value);
  void set_snapshotpath(const char* value);
  void set_snapshotpath(const char* value, size_t size);
  std::string* mutable_snapshotpath();
  std::string* release_snapshotpath();
  void set_allocated_snapshotpath(std::string* snapshotpath);
  private:
  const std::string& _internal_snapshotpath() const;
  void _internal_set_snapshotpath(const std::string& value);
  std::string* _internal_mutable_snapshotpath();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSnapshotResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotpath_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RenameSnapshotRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenameSnapshotRequestProto) */ {
 public:
  RenameSnapshotRequestProto();
  virtual ~RenameSnapshotRequestProto();

  RenameSnapshotRequestProto(const RenameSnapshotRequestProto& from);
  RenameSnapshotRequestProto(RenameSnapshotRequestProto&& from) noexcept
    : RenameSnapshotRequestProto() {
    *this = ::std::move(from);
  }

  inline RenameSnapshotRequestProto& operator=(const RenameSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameSnapshotRequestProto& operator=(RenameSnapshotRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameSnapshotRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameSnapshotRequestProto* internal_default_instance() {
    return reinterpret_cast<const RenameSnapshotRequestProto*>(
               &_RenameSnapshotRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(RenameSnapshotRequestProto& a, RenameSnapshotRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameSnapshotRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameSnapshotRequestProto* New() const final {
    return CreateMaybeMessage<RenameSnapshotRequestProto>(nullptr);
  }

  RenameSnapshotRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameSnapshotRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameSnapshotRequestProto& from);
  void MergeFrom(const RenameSnapshotRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameSnapshotRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenameSnapshotRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotRootFieldNumber = 1,
    kSnapshotOldNameFieldNumber = 2,
    kSnapshotNewNameFieldNumber = 3,
  };
  // required string snapshotRoot = 1;
  bool has_snapshotroot() const;
  private:
  bool _internal_has_snapshotroot() const;
  public:
  void clear_snapshotroot();
  const std::string& snapshotroot() const;
  void set_snapshotroot(const std::string& value);
  void set_snapshotroot(std::string&& value);
  void set_snapshotroot(const char* value);
  void set_snapshotroot(const char* value, size_t size);
  std::string* mutable_snapshotroot();
  std::string* release_snapshotroot();
  void set_allocated_snapshotroot(std::string* snapshotroot);
  private:
  const std::string& _internal_snapshotroot() const;
  void _internal_set_snapshotroot(const std::string& value);
  std::string* _internal_mutable_snapshotroot();
  public:

  // required string snapshotOldName = 2;
  bool has_snapshotoldname() const;
  private:
  bool _internal_has_snapshotoldname() const;
  public:
  void clear_snapshotoldname();
  const std::string& snapshotoldname() const;
  void set_snapshotoldname(const std::string& value);
  void set_snapshotoldname(std::string&& value);
  void set_snapshotoldname(const char* value);
  void set_snapshotoldname(const char* value, size_t size);
  std::string* mutable_snapshotoldname();
  std::string* release_snapshotoldname();
  void set_allocated_snapshotoldname(std::string* snapshotoldname);
  private:
  const std::string& _internal_snapshotoldname() const;
  void _internal_set_snapshotoldname(const std::string& value);
  std::string* _internal_mutable_snapshotoldname();
  public:

  // required string snapshotNewName = 3;
  bool has_snapshotnewname() const;
  private:
  bool _internal_has_snapshotnewname() const;
  public:
  void clear_snapshotnewname();
  const std::string& snapshotnewname() const;
  void set_snapshotnewname(const std::string& value);
  void set_snapshotnewname(std::string&& value);
  void set_snapshotnewname(const char* value);
  void set_snapshotnewname(const char* value, size_t size);
  std::string* mutable_snapshotnewname();
  std::string* release_snapshotnewname();
  void set_allocated_snapshotnewname(std::string* snapshotnewname);
  private:
  const std::string& _internal_snapshotnewname() const;
  void _internal_set_snapshotnewname(const std::string& value);
  std::string* _internal_mutable_snapshotnewname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameSnapshotRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotoldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotnewname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RenameSnapshotResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenameSnapshotResponseProto) */ {
 public:
  RenameSnapshotResponseProto();
  virtual ~RenameSnapshotResponseProto();

  RenameSnapshotResponseProto(const RenameSnapshotResponseProto& from);
  RenameSnapshotResponseProto(RenameSnapshotResponseProto&& from) noexcept
    : RenameSnapshotResponseProto() {
    *this = ::std::move(from);
  }

  inline RenameSnapshotResponseProto& operator=(const RenameSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenameSnapshotResponseProto& operator=(RenameSnapshotResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenameSnapshotResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameSnapshotResponseProto* internal_default_instance() {
    return reinterpret_cast<const RenameSnapshotResponseProto*>(
               &_RenameSnapshotResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(RenameSnapshotResponseProto& a, RenameSnapshotResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenameSnapshotResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenameSnapshotResponseProto* New() const final {
    return CreateMaybeMessage<RenameSnapshotResponseProto>(nullptr);
  }

  RenameSnapshotResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenameSnapshotResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenameSnapshotResponseProto& from);
  void MergeFrom(const RenameSnapshotResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameSnapshotResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenameSnapshotResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameSnapshotResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AllowSnapshotRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AllowSnapshotRequestProto) */ {
 public:
  AllowSnapshotRequestProto();
  virtual ~AllowSnapshotRequestProto();

  AllowSnapshotRequestProto(const AllowSnapshotRequestProto& from);
  AllowSnapshotRequestProto(AllowSnapshotRequestProto&& from) noexcept
    : AllowSnapshotRequestProto() {
    *this = ::std::move(from);
  }

  inline AllowSnapshotRequestProto& operator=(const AllowSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowSnapshotRequestProto& operator=(AllowSnapshotRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllowSnapshotRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowSnapshotRequestProto* internal_default_instance() {
    return reinterpret_cast<const AllowSnapshotRequestProto*>(
               &_AllowSnapshotRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(AllowSnapshotRequestProto& a, AllowSnapshotRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowSnapshotRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowSnapshotRequestProto* New() const final {
    return CreateMaybeMessage<AllowSnapshotRequestProto>(nullptr);
  }

  AllowSnapshotRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowSnapshotRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllowSnapshotRequestProto& from);
  void MergeFrom(const AllowSnapshotRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowSnapshotRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AllowSnapshotRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotRootFieldNumber = 1,
  };
  // required string snapshotRoot = 1;
  bool has_snapshotroot() const;
  private:
  bool _internal_has_snapshotroot() const;
  public:
  void clear_snapshotroot();
  const std::string& snapshotroot() const;
  void set_snapshotroot(const std::string& value);
  void set_snapshotroot(std::string&& value);
  void set_snapshotroot(const char* value);
  void set_snapshotroot(const char* value, size_t size);
  std::string* mutable_snapshotroot();
  std::string* release_snapshotroot();
  void set_allocated_snapshotroot(std::string* snapshotroot);
  private:
  const std::string& _internal_snapshotroot() const;
  void _internal_set_snapshotroot(const std::string& value);
  std::string* _internal_mutable_snapshotroot();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AllowSnapshotRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotroot_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class AllowSnapshotResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.AllowSnapshotResponseProto) */ {
 public:
  AllowSnapshotResponseProto();
  virtual ~AllowSnapshotResponseProto();

  AllowSnapshotResponseProto(const AllowSnapshotResponseProto& from);
  AllowSnapshotResponseProto(AllowSnapshotResponseProto&& from) noexcept
    : AllowSnapshotResponseProto() {
    *this = ::std::move(from);
  }

  inline AllowSnapshotResponseProto& operator=(const AllowSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowSnapshotResponseProto& operator=(AllowSnapshotResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllowSnapshotResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowSnapshotResponseProto* internal_default_instance() {
    return reinterpret_cast<const AllowSnapshotResponseProto*>(
               &_AllowSnapshotResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(AllowSnapshotResponseProto& a, AllowSnapshotResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowSnapshotResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowSnapshotResponseProto* New() const final {
    return CreateMaybeMessage<AllowSnapshotResponseProto>(nullptr);
  }

  AllowSnapshotResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowSnapshotResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllowSnapshotResponseProto& from);
  void MergeFrom(const AllowSnapshotResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowSnapshotResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.AllowSnapshotResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AllowSnapshotResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DisallowSnapshotRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DisallowSnapshotRequestProto) */ {
 public:
  DisallowSnapshotRequestProto();
  virtual ~DisallowSnapshotRequestProto();

  DisallowSnapshotRequestProto(const DisallowSnapshotRequestProto& from);
  DisallowSnapshotRequestProto(DisallowSnapshotRequestProto&& from) noexcept
    : DisallowSnapshotRequestProto() {
    *this = ::std::move(from);
  }

  inline DisallowSnapshotRequestProto& operator=(const DisallowSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisallowSnapshotRequestProto& operator=(DisallowSnapshotRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisallowSnapshotRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisallowSnapshotRequestProto* internal_default_instance() {
    return reinterpret_cast<const DisallowSnapshotRequestProto*>(
               &_DisallowSnapshotRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(DisallowSnapshotRequestProto& a, DisallowSnapshotRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisallowSnapshotRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisallowSnapshotRequestProto* New() const final {
    return CreateMaybeMessage<DisallowSnapshotRequestProto>(nullptr);
  }

  DisallowSnapshotRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisallowSnapshotRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisallowSnapshotRequestProto& from);
  void MergeFrom(const DisallowSnapshotRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisallowSnapshotRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DisallowSnapshotRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotRootFieldNumber = 1,
  };
  // required string snapshotRoot = 1;
  bool has_snapshotroot() const;
  private:
  bool _internal_has_snapshotroot() const;
  public:
  void clear_snapshotroot();
  const std::string& snapshotroot() const;
  void set_snapshotroot(const std::string& value);
  void set_snapshotroot(std::string&& value);
  void set_snapshotroot(const char* value);
  void set_snapshotroot(const char* value, size_t size);
  std::string* mutable_snapshotroot();
  std::string* release_snapshotroot();
  void set_allocated_snapshotroot(std::string* snapshotroot);
  private:
  const std::string& _internal_snapshotroot() const;
  void _internal_set_snapshotroot(const std::string& value);
  std::string* _internal_mutable_snapshotroot();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DisallowSnapshotRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotroot_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DisallowSnapshotResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DisallowSnapshotResponseProto) */ {
 public:
  DisallowSnapshotResponseProto();
  virtual ~DisallowSnapshotResponseProto();

  DisallowSnapshotResponseProto(const DisallowSnapshotResponseProto& from);
  DisallowSnapshotResponseProto(DisallowSnapshotResponseProto&& from) noexcept
    : DisallowSnapshotResponseProto() {
    *this = ::std::move(from);
  }

  inline DisallowSnapshotResponseProto& operator=(const DisallowSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisallowSnapshotResponseProto& operator=(DisallowSnapshotResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisallowSnapshotResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisallowSnapshotResponseProto* internal_default_instance() {
    return reinterpret_cast<const DisallowSnapshotResponseProto*>(
               &_DisallowSnapshotResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(DisallowSnapshotResponseProto& a, DisallowSnapshotResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisallowSnapshotResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisallowSnapshotResponseProto* New() const final {
    return CreateMaybeMessage<DisallowSnapshotResponseProto>(nullptr);
  }

  DisallowSnapshotResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisallowSnapshotResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisallowSnapshotResponseProto& from);
  void MergeFrom(const DisallowSnapshotResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisallowSnapshotResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DisallowSnapshotResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DisallowSnapshotResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeleteSnapshotRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DeleteSnapshotRequestProto) */ {
 public:
  DeleteSnapshotRequestProto();
  virtual ~DeleteSnapshotRequestProto();

  DeleteSnapshotRequestProto(const DeleteSnapshotRequestProto& from);
  DeleteSnapshotRequestProto(DeleteSnapshotRequestProto&& from) noexcept
    : DeleteSnapshotRequestProto() {
    *this = ::std::move(from);
  }

  inline DeleteSnapshotRequestProto& operator=(const DeleteSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSnapshotRequestProto& operator=(DeleteSnapshotRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSnapshotRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSnapshotRequestProto* internal_default_instance() {
    return reinterpret_cast<const DeleteSnapshotRequestProto*>(
               &_DeleteSnapshotRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(DeleteSnapshotRequestProto& a, DeleteSnapshotRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSnapshotRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSnapshotRequestProto* New() const final {
    return CreateMaybeMessage<DeleteSnapshotRequestProto>(nullptr);
  }

  DeleteSnapshotRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSnapshotRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSnapshotRequestProto& from);
  void MergeFrom(const DeleteSnapshotRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSnapshotRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DeleteSnapshotRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotRootFieldNumber = 1,
    kSnapshotNameFieldNumber = 2,
  };
  // required string snapshotRoot = 1;
  bool has_snapshotroot() const;
  private:
  bool _internal_has_snapshotroot() const;
  public:
  void clear_snapshotroot();
  const std::string& snapshotroot() const;
  void set_snapshotroot(const std::string& value);
  void set_snapshotroot(std::string&& value);
  void set_snapshotroot(const char* value);
  void set_snapshotroot(const char* value, size_t size);
  std::string* mutable_snapshotroot();
  std::string* release_snapshotroot();
  void set_allocated_snapshotroot(std::string* snapshotroot);
  private:
  const std::string& _internal_snapshotroot() const;
  void _internal_set_snapshotroot(const std::string& value);
  std::string* _internal_mutable_snapshotroot();
  public:

  // required string snapshotName = 2;
  bool has_snapshotname() const;
  private:
  bool _internal_has_snapshotname() const;
  public:
  void clear_snapshotname();
  const std::string& snapshotname() const;
  void set_snapshotname(const std::string& value);
  void set_snapshotname(std::string&& value);
  void set_snapshotname(const char* value);
  void set_snapshotname(const char* value, size_t size);
  std::string* mutable_snapshotname();
  std::string* release_snapshotname();
  void set_allocated_snapshotname(std::string* snapshotname);
  private:
  const std::string& _internal_snapshotname() const;
  void _internal_set_snapshotname(const std::string& value);
  std::string* _internal_mutable_snapshotname();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteSnapshotRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshotname_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeleteSnapshotResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DeleteSnapshotResponseProto) */ {
 public:
  DeleteSnapshotResponseProto();
  virtual ~DeleteSnapshotResponseProto();

  DeleteSnapshotResponseProto(const DeleteSnapshotResponseProto& from);
  DeleteSnapshotResponseProto(DeleteSnapshotResponseProto&& from) noexcept
    : DeleteSnapshotResponseProto() {
    *this = ::std::move(from);
  }

  inline DeleteSnapshotResponseProto& operator=(const DeleteSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSnapshotResponseProto& operator=(DeleteSnapshotResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSnapshotResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSnapshotResponseProto* internal_default_instance() {
    return reinterpret_cast<const DeleteSnapshotResponseProto*>(
               &_DeleteSnapshotResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(DeleteSnapshotResponseProto& a, DeleteSnapshotResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSnapshotResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSnapshotResponseProto* New() const final {
    return CreateMaybeMessage<DeleteSnapshotResponseProto>(nullptr);
  }

  DeleteSnapshotResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSnapshotResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSnapshotResponseProto& from);
  void MergeFrom(const DeleteSnapshotResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSnapshotResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DeleteSnapshotResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientNamenodeProtocol_2eproto);
    return ::descriptor_table_ClientNamenodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteSnapshotResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientNamenodeProtocol_2eproto;
};
// ===================================================================

class ClientNamenodeProtocol_Stub;

class ClientNamenodeProtocol : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ClientNamenodeProtocol() {};
 public:
  virtual ~ClientNamenodeProtocol();

  typedef ClientNamenodeProtocol_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void getBlockLocations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetBlockLocationsRequestProto* request,
                       ::Hdfs::Internal::GetBlockLocationsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getServerDefaults(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetServerDefaultsRequestProto* request,
                       ::Hdfs::Internal::GetServerDefaultsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateRequestProto* request,
                       ::Hdfs::Internal::CreateResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void append(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AppendRequestProto* request,
                       ::Hdfs::Internal::AppendResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setReplication(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetReplicationRequestProto* request,
                       ::Hdfs::Internal::SetReplicationResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setPermission(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetPermissionRequestProto* request,
                       ::Hdfs::Internal::SetPermissionResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setOwner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetOwnerRequestProto* request,
                       ::Hdfs::Internal::SetOwnerResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void abandonBlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AbandonBlockRequestProto* request,
                       ::Hdfs::Internal::AbandonBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void addBlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AddBlockRequestProto* request,
                       ::Hdfs::Internal::AddBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getAdditionalDatanode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto* request,
                       ::Hdfs::Internal::GetAdditionalDatanodeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void complete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CompleteRequestProto* request,
                       ::Hdfs::Internal::CompleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void reportBadBlocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ReportBadBlocksRequestProto* request,
                       ::Hdfs::Internal::ReportBadBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void concat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ConcatRequestProto* request,
                       ::Hdfs::Internal::ConcatResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void truncate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::TruncateRequestProto* request,
                       ::Hdfs::Internal::TruncateResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetLeaseRequestProto* request,
                       ::Hdfs::Internal::GetLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void releaseLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ReleaseLeaseRequestProto* request,
                       ::Hdfs::Internal::ReleaseLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void rename(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenameRequestProto* request,
                       ::Hdfs::Internal::RenameResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void rename2(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::Rename2RequestProto* request,
                       ::Hdfs::Internal::Rename2ResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void deleteFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DeleteRequestProto* request,
                       ::Hdfs::Internal::DeleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void mkdirs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::MkdirsRequestProto* request,
                       ::Hdfs::Internal::MkdirsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getListing(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetListingRequestProto* request,
                       ::Hdfs::Internal::GetListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void renewLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenewLeaseRequestProto* request,
                       ::Hdfs::Internal::RenewLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void recoverLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RecoverLeaseRequestProto* request,
                       ::Hdfs::Internal::RecoverLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getFsStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetFsStatusRequestProto* request,
                       ::Hdfs::Internal::GetFsStatsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getDatanodeReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetDatanodeReportRequestProto* request,
                       ::Hdfs::Internal::GetDatanodeReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getPreferredBlockSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto* request,
                       ::Hdfs::Internal::GetPreferredBlockSizeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setSafeMode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetSafeModeRequestProto* request,
                       ::Hdfs::Internal::SetSafeModeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void saveNamespace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SaveNamespaceRequestProto* request,
                       ::Hdfs::Internal::SaveNamespaceResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void rollEdits(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RollEditsRequestProto* request,
                       ::Hdfs::Internal::RollEditsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void restoreFailedStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RestoreFailedStorageRequestProto* request,
                       ::Hdfs::Internal::RestoreFailedStorageResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void refreshNodes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RefreshNodesRequestProto* request,
                       ::Hdfs::Internal::RefreshNodesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void finalizeUpgrade(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::FinalizeUpgradeRequestProto* request,
                       ::Hdfs::Internal::FinalizeUpgradeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listCorruptFileBlocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto* request,
                       ::Hdfs::Internal::ListCorruptFileBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void metaSave(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::MetaSaveRequestProto* request,
                       ::Hdfs::Internal::MetaSaveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getFileInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetFileInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void addCacheDirective(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AddCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::AddCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void modifyCacheDirective(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::ModifyCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void removeCacheDirective(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::RemoveCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listCacheDirectives(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListCacheDirectivesRequestProto* request,
                       ::Hdfs::Internal::ListCacheDirectivesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void addCachePool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AddCachePoolRequestProto* request,
                       ::Hdfs::Internal::AddCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void modifyCachePool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCachePoolRequestProto* request,
                       ::Hdfs::Internal::ModifyCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void removeCachePool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCachePoolRequestProto* request,
                       ::Hdfs::Internal::RemoveCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listCachePools(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListCachePoolsRequestProto* request,
                       ::Hdfs::Internal::ListCachePoolsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getFileLinkInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetFileLinkInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileLinkInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getContentSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetContentSummaryRequestProto* request,
                       ::Hdfs::Internal::GetContentSummaryResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setQuota(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetQuotaRequestProto* request,
                       ::Hdfs::Internal::SetQuotaResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void fsync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::FsyncRequestProto* request,
                       ::Hdfs::Internal::FsyncResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetTimesRequestProto* request,
                       ::Hdfs::Internal::SetTimesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void createSymlink(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateSymlinkRequestProto* request,
                       ::Hdfs::Internal::CreateSymlinkResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getLinkTarget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetLinkTargetRequestProto* request,
                       ::Hdfs::Internal::GetLinkTargetResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void updateBlockForPipeline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto* request,
                       ::Hdfs::Internal::UpdateBlockForPipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void updatePipeline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::UpdatePipelineRequestProto* request,
                       ::Hdfs::Internal::UpdatePipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getDelegationToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::GetDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void renewDelegationToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenewDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::RenewDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void cancelDelegationToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CancelDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::CancelDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setBalancerBandwidth(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetBalancerBandwidthRequestProto* request,
                       ::Hdfs::Internal::SetBalancerBandwidthResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getDataEncryptionKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto* request,
                       ::Hdfs::Internal::GetDataEncryptionKeyResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void createSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateSnapshotRequestProto* request,
                       ::Hdfs::Internal::CreateSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void renameSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenameSnapshotRequestProto* request,
                       ::Hdfs::Internal::RenameSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void allowSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AllowSnapshotRequestProto* request,
                       ::Hdfs::Internal::AllowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void disallowSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DisallowSnapshotRequestProto* request,
                       ::Hdfs::Internal::DisallowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getSnapshottableDirListing(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto* request,
                       ::Hdfs::Internal::GetSnapshottableDirListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void deleteSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DeleteSnapshotRequestProto* request,
                       ::Hdfs::Internal::DeleteSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getSnapshotDiffReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto* request,
                       ::Hdfs::Internal::GetSnapshotDiffReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void isFileClosed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::IsFileClosedRequestProto* request,
                       ::Hdfs::Internal::IsFileClosedResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void createEncryptionZone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateEncryptionZoneRequestProto* request,
                       ::Hdfs::Internal::CreateEncryptionZoneResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listEncryptionZones(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListEncryptionZonesRequestProto* request,
                       ::Hdfs::Internal::ListEncryptionZonesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getEZForPath(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetEZForPathRequestProto* request,
                       ::Hdfs::Internal::GetEZForPathResponseProto* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientNamenodeProtocol);
};

class ClientNamenodeProtocol_Stub : public ClientNamenodeProtocol {
 public:
  ClientNamenodeProtocol_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ClientNamenodeProtocol_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ClientNamenodeProtocol_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ClientNamenodeProtocol ------------------------------------------

  void getBlockLocations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetBlockLocationsRequestProto* request,
                       ::Hdfs::Internal::GetBlockLocationsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getServerDefaults(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetServerDefaultsRequestProto* request,
                       ::Hdfs::Internal::GetServerDefaultsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateRequestProto* request,
                       ::Hdfs::Internal::CreateResponseProto* response,
                       ::google::protobuf::Closure* done);
  void append(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AppendRequestProto* request,
                       ::Hdfs::Internal::AppendResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setReplication(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetReplicationRequestProto* request,
                       ::Hdfs::Internal::SetReplicationResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setPermission(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetPermissionRequestProto* request,
                       ::Hdfs::Internal::SetPermissionResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setOwner(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetOwnerRequestProto* request,
                       ::Hdfs::Internal::SetOwnerResponseProto* response,
                       ::google::protobuf::Closure* done);
  void abandonBlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AbandonBlockRequestProto* request,
                       ::Hdfs::Internal::AbandonBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  void addBlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AddBlockRequestProto* request,
                       ::Hdfs::Internal::AddBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getAdditionalDatanode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto* request,
                       ::Hdfs::Internal::GetAdditionalDatanodeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void complete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CompleteRequestProto* request,
                       ::Hdfs::Internal::CompleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  void reportBadBlocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ReportBadBlocksRequestProto* request,
                       ::Hdfs::Internal::ReportBadBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  void concat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ConcatRequestProto* request,
                       ::Hdfs::Internal::ConcatResponseProto* response,
                       ::google::protobuf::Closure* done);
  void truncate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::TruncateRequestProto* request,
                       ::Hdfs::Internal::TruncateResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetLeaseRequestProto* request,
                       ::Hdfs::Internal::GetLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void releaseLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ReleaseLeaseRequestProto* request,
                       ::Hdfs::Internal::ReleaseLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void rename(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenameRequestProto* request,
                       ::Hdfs::Internal::RenameResponseProto* response,
                       ::google::protobuf::Closure* done);
  void rename2(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::Rename2RequestProto* request,
                       ::Hdfs::Internal::Rename2ResponseProto* response,
                       ::google::protobuf::Closure* done);
  void deleteFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DeleteRequestProto* request,
                       ::Hdfs::Internal::DeleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  void mkdirs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::MkdirsRequestProto* request,
                       ::Hdfs::Internal::MkdirsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getListing(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetListingRequestProto* request,
                       ::Hdfs::Internal::GetListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  void renewLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenewLeaseRequestProto* request,
                       ::Hdfs::Internal::RenewLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void recoverLease(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RecoverLeaseRequestProto* request,
                       ::Hdfs::Internal::RecoverLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getFsStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetFsStatusRequestProto* request,
                       ::Hdfs::Internal::GetFsStatsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getDatanodeReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetDatanodeReportRequestProto* request,
                       ::Hdfs::Internal::GetDatanodeReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getPreferredBlockSize(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto* request,
                       ::Hdfs::Internal::GetPreferredBlockSizeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setSafeMode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetSafeModeRequestProto* request,
                       ::Hdfs::Internal::SetSafeModeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void saveNamespace(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SaveNamespaceRequestProto* request,
                       ::Hdfs::Internal::SaveNamespaceResponseProto* response,
                       ::google::protobuf::Closure* done);
  void rollEdits(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RollEditsRequestProto* request,
                       ::Hdfs::Internal::RollEditsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void restoreFailedStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RestoreFailedStorageRequestProto* request,
                       ::Hdfs::Internal::RestoreFailedStorageResponseProto* response,
                       ::google::protobuf::Closure* done);
  void refreshNodes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RefreshNodesRequestProto* request,
                       ::Hdfs::Internal::RefreshNodesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void finalizeUpgrade(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::FinalizeUpgradeRequestProto* request,
                       ::Hdfs::Internal::FinalizeUpgradeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listCorruptFileBlocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto* request,
                       ::Hdfs::Internal::ListCorruptFileBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  void metaSave(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::MetaSaveRequestProto* request,
                       ::Hdfs::Internal::MetaSaveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getFileInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetFileInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  void addCacheDirective(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AddCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::AddCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void modifyCacheDirective(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::ModifyCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void removeCacheDirective(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::RemoveCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listCacheDirectives(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListCacheDirectivesRequestProto* request,
                       ::Hdfs::Internal::ListCacheDirectivesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void addCachePool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AddCachePoolRequestProto* request,
                       ::Hdfs::Internal::AddCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  void modifyCachePool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCachePoolRequestProto* request,
                       ::Hdfs::Internal::ModifyCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  void removeCachePool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCachePoolRequestProto* request,
                       ::Hdfs::Internal::RemoveCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listCachePools(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListCachePoolsRequestProto* request,
                       ::Hdfs::Internal::ListCachePoolsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getFileLinkInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetFileLinkInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileLinkInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getContentSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetContentSummaryRequestProto* request,
                       ::Hdfs::Internal::GetContentSummaryResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setQuota(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetQuotaRequestProto* request,
                       ::Hdfs::Internal::SetQuotaResponseProto* response,
                       ::google::protobuf::Closure* done);
  void fsync(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::FsyncRequestProto* request,
                       ::Hdfs::Internal::FsyncResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetTimesRequestProto* request,
                       ::Hdfs::Internal::SetTimesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void createSymlink(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateSymlinkRequestProto* request,
                       ::Hdfs::Internal::CreateSymlinkResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getLinkTarget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetLinkTargetRequestProto* request,
                       ::Hdfs::Internal::GetLinkTargetResponseProto* response,
                       ::google::protobuf::Closure* done);
  void updateBlockForPipeline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto* request,
                       ::Hdfs::Internal::UpdateBlockForPipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  void updatePipeline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::UpdatePipelineRequestProto* request,
                       ::Hdfs::Internal::UpdatePipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getDelegationToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::GetDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  void renewDelegationToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenewDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::RenewDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  void cancelDelegationToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CancelDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::CancelDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setBalancerBandwidth(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::SetBalancerBandwidthRequestProto* request,
                       ::Hdfs::Internal::SetBalancerBandwidthResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getDataEncryptionKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto* request,
                       ::Hdfs::Internal::GetDataEncryptionKeyResponseProto* response,
                       ::google::protobuf::Closure* done);
  void createSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateSnapshotRequestProto* request,
                       ::Hdfs::Internal::CreateSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void renameSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RenameSnapshotRequestProto* request,
                       ::Hdfs::Internal::RenameSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void allowSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::AllowSnapshotRequestProto* request,
                       ::Hdfs::Internal::AllowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void disallowSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DisallowSnapshotRequestProto* request,
                       ::Hdfs::Internal::DisallowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getSnapshottableDirListing(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto* request,
                       ::Hdfs::Internal::GetSnapshottableDirListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  void deleteSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DeleteSnapshotRequestProto* request,
                       ::Hdfs::Internal::DeleteSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getSnapshotDiffReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto* request,
                       ::Hdfs::Internal::GetSnapshotDiffReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  void isFileClosed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::IsFileClosedRequestProto* request,
                       ::Hdfs::Internal::IsFileClosedResponseProto* response,
                       ::google::protobuf::Closure* done);
  void createEncryptionZone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::CreateEncryptionZoneRequestProto* request,
                       ::Hdfs::Internal::CreateEncryptionZoneResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listEncryptionZones(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::ListEncryptionZonesRequestProto* request,
                       ::Hdfs::Internal::ListEncryptionZonesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getEZForPath(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetEZForPathRequestProto* request,
                       ::Hdfs::Internal::GetEZForPathResponseProto* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientNamenodeProtocol_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetBlockLocationsRequestProto

// required string src = 1;
inline bool GetBlockLocationsRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBlockLocationsRequestProto::has_src() const {
  return _internal_has_src();
}
inline void GetBlockLocationsRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBlockLocationsRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocationsRequestProto.src)
  return _internal_src();
}
inline void GetBlockLocationsRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetBlockLocationsRequestProto.src)
}
inline std::string* GetBlockLocationsRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetBlockLocationsRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& GetBlockLocationsRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void GetBlockLocationsRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockLocationsRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetBlockLocationsRequestProto.src)
}
inline void GetBlockLocationsRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetBlockLocationsRequestProto.src)
}
inline void GetBlockLocationsRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetBlockLocationsRequestProto.src)
}
inline std::string* GetBlockLocationsRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockLocationsRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetBlockLocationsRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockLocationsRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetBlockLocationsRequestProto.src)
}

// required uint64 offset = 2;
inline bool GetBlockLocationsRequestProto::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetBlockLocationsRequestProto::has_offset() const {
  return _internal_has_offset();
}
inline void GetBlockLocationsRequestProto::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockLocationsRequestProto::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockLocationsRequestProto::offset() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocationsRequestProto.offset)
  return _internal_offset();
}
inline void GetBlockLocationsRequestProto::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void GetBlockLocationsRequestProto::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetBlockLocationsRequestProto.offset)
}

// required uint64 length = 3;
inline bool GetBlockLocationsRequestProto::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetBlockLocationsRequestProto::has_length() const {
  return _internal_has_length();
}
inline void GetBlockLocationsRequestProto::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockLocationsRequestProto::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockLocationsRequestProto::length() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocationsRequestProto.length)
  return _internal_length();
}
inline void GetBlockLocationsRequestProto::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void GetBlockLocationsRequestProto::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetBlockLocationsRequestProto.length)
}

// -------------------------------------------------------------------

// GetBlockLocationsResponseProto

// optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
inline bool GetBlockLocationsResponseProto::_internal_has_locations() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || locations_ != nullptr);
  return value;
}
inline bool GetBlockLocationsResponseProto::has_locations() const {
  return _internal_has_locations();
}
inline const ::Hdfs::Internal::LocatedBlocksProto& GetBlockLocationsResponseProto::_internal_locations() const {
  const ::Hdfs::Internal::LocatedBlocksProto* p = locations_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::LocatedBlocksProto*>(
      &::Hdfs::Internal::_LocatedBlocksProto_default_instance_);
}
inline const ::Hdfs::Internal::LocatedBlocksProto& GetBlockLocationsResponseProto::locations() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocationsResponseProto.locations)
  return _internal_locations();
}
inline ::Hdfs::Internal::LocatedBlocksProto* GetBlockLocationsResponseProto::release_locations() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetBlockLocationsResponseProto.locations)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::LocatedBlocksProto* temp = locations_;
  locations_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::LocatedBlocksProto* GetBlockLocationsResponseProto::_internal_mutable_locations() {
  _has_bits_[0] |= 0x00000001u;
  if (locations_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::LocatedBlocksProto>(GetArenaNoVirtual());
    locations_ = p;
  }
  return locations_;
}
inline ::Hdfs::Internal::LocatedBlocksProto* GetBlockLocationsResponseProto::mutable_locations() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetBlockLocationsResponseProto.locations)
  return _internal_mutable_locations();
}
inline void GetBlockLocationsResponseProto::set_allocated_locations(::Hdfs::Internal::LocatedBlocksProto* locations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(locations_);
  }
  if (locations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      locations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locations, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locations_ = locations;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetBlockLocationsResponseProto.locations)
}

// -------------------------------------------------------------------

// GetServerDefaultsRequestProto

// -------------------------------------------------------------------

// GetServerDefaultsResponseProto

// required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
inline bool GetServerDefaultsResponseProto::_internal_has_serverdefaults() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || serverdefaults_ != nullptr);
  return value;
}
inline bool GetServerDefaultsResponseProto::has_serverdefaults() const {
  return _internal_has_serverdefaults();
}
inline const ::Hdfs::Internal::FsServerDefaultsProto& GetServerDefaultsResponseProto::_internal_serverdefaults() const {
  const ::Hdfs::Internal::FsServerDefaultsProto* p = serverdefaults_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::FsServerDefaultsProto*>(
      &::Hdfs::Internal::_FsServerDefaultsProto_default_instance_);
}
inline const ::Hdfs::Internal::FsServerDefaultsProto& GetServerDefaultsResponseProto::serverdefaults() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetServerDefaultsResponseProto.serverDefaults)
  return _internal_serverdefaults();
}
inline ::Hdfs::Internal::FsServerDefaultsProto* GetServerDefaultsResponseProto::release_serverdefaults() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetServerDefaultsResponseProto.serverDefaults)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::FsServerDefaultsProto* temp = serverdefaults_;
  serverdefaults_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::FsServerDefaultsProto* GetServerDefaultsResponseProto::_internal_mutable_serverdefaults() {
  _has_bits_[0] |= 0x00000001u;
  if (serverdefaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::FsServerDefaultsProto>(GetArenaNoVirtual());
    serverdefaults_ = p;
  }
  return serverdefaults_;
}
inline ::Hdfs::Internal::FsServerDefaultsProto* GetServerDefaultsResponseProto::mutable_serverdefaults() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetServerDefaultsResponseProto.serverDefaults)
  return _internal_mutable_serverdefaults();
}
inline void GetServerDefaultsResponseProto::set_allocated_serverdefaults(::Hdfs::Internal::FsServerDefaultsProto* serverdefaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(serverdefaults_);
  }
  if (serverdefaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serverdefaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serverdefaults, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serverdefaults_ = serverdefaults;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetServerDefaultsResponseProto.serverDefaults)
}

// -------------------------------------------------------------------

// CreateRequestProto

// required string src = 1;
inline bool CreateRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateRequestProto::has_src() const {
  return _internal_has_src();
}
inline void CreateRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.src)
  return _internal_src();
}
inline void CreateRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateRequestProto.src)
}
inline std::string* CreateRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& CreateRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void CreateRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateRequestProto.src)
}
inline void CreateRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateRequestProto.src)
}
inline void CreateRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateRequestProto.src)
}
inline std::string* CreateRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateRequestProto.src)
}

// required .Hdfs.Internal.FsPermissionProto masked = 2;
inline bool CreateRequestProto::_internal_has_masked() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || masked_ != nullptr);
  return value;
}
inline bool CreateRequestProto::has_masked() const {
  return _internal_has_masked();
}
inline const ::Hdfs::Internal::FsPermissionProto& CreateRequestProto::_internal_masked() const {
  const ::Hdfs::Internal::FsPermissionProto* p = masked_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::FsPermissionProto*>(
      &::Hdfs::Internal::_FsPermissionProto_default_instance_);
}
inline const ::Hdfs::Internal::FsPermissionProto& CreateRequestProto::masked() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.masked)
  return _internal_masked();
}
inline ::Hdfs::Internal::FsPermissionProto* CreateRequestProto::release_masked() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateRequestProto.masked)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::FsPermissionProto* temp = masked_;
  masked_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateRequestProto::_internal_mutable_masked() {
  _has_bits_[0] |= 0x00000004u;
  if (masked_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::FsPermissionProto>(GetArenaNoVirtual());
    masked_ = p;
  }
  return masked_;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateRequestProto::mutable_masked() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateRequestProto.masked)
  return _internal_mutable_masked();
}
inline void CreateRequestProto::set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(masked_);
  }
  if (masked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      masked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  masked_ = masked;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateRequestProto.masked)
}

// required string clientName = 3;
inline bool CreateRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void CreateRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.clientName)
  return _internal_clientname();
}
inline void CreateRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateRequestProto.clientName)
}
inline std::string* CreateRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& CreateRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void CreateRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateRequestProto.clientName)
}
inline void CreateRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateRequestProto.clientName)
}
inline void CreateRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateRequestProto.clientName)
}
inline std::string* CreateRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateRequestProto.clientName)
}

// required uint32 createFlag = 4;
inline bool CreateRequestProto::_internal_has_createflag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateRequestProto::has_createflag() const {
  return _internal_has_createflag();
}
inline void CreateRequestProto::clear_createflag() {
  createflag_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRequestProto::_internal_createflag() const {
  return createflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRequestProto::createflag() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.createFlag)
  return _internal_createflag();
}
inline void CreateRequestProto::_internal_set_createflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  createflag_ = value;
}
inline void CreateRequestProto::set_createflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_createflag(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateRequestProto.createFlag)
}

// required bool createParent = 5;
inline bool CreateRequestProto::_internal_has_createparent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CreateRequestProto::has_createparent() const {
  return _internal_has_createparent();
}
inline void CreateRequestProto::clear_createparent() {
  createparent_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CreateRequestProto::_internal_createparent() const {
  return createparent_;
}
inline bool CreateRequestProto::createparent() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.createParent)
  return _internal_createparent();
}
inline void CreateRequestProto::_internal_set_createparent(bool value) {
  _has_bits_[0] |= 0x00000010u;
  createparent_ = value;
}
inline void CreateRequestProto::set_createparent(bool value) {
  _internal_set_createparent(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateRequestProto.createParent)
}

// required uint32 replication = 6;
inline bool CreateRequestProto::_internal_has_replication() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CreateRequestProto::has_replication() const {
  return _internal_has_replication();
}
inline void CreateRequestProto::clear_replication() {
  replication_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRequestProto::_internal_replication() const {
  return replication_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRequestProto::replication() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.replication)
  return _internal_replication();
}
inline void CreateRequestProto::_internal_set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  replication_ = value;
}
inline void CreateRequestProto::set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replication(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateRequestProto.replication)
}

// required uint64 blockSize = 7;
inline bool CreateRequestProto::_internal_has_blocksize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CreateRequestProto::has_blocksize() const {
  return _internal_has_blocksize();
}
inline void CreateRequestProto::clear_blocksize() {
  blocksize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateRequestProto::_internal_blocksize() const {
  return blocksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateRequestProto::blocksize() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.blockSize)
  return _internal_blocksize();
}
inline void CreateRequestProto::_internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  blocksize_ = value;
}
inline void CreateRequestProto::set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blocksize(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateRequestProto.blockSize)
}

// repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
inline int CreateRequestProto::_internal_cryptoprotocolversion_size() const {
  return cryptoprotocolversion_.size();
}
inline int CreateRequestProto::cryptoprotocolversion_size() const {
  return _internal_cryptoprotocolversion_size();
}
inline void CreateRequestProto::clear_cryptoprotocolversion() {
  cryptoprotocolversion_.Clear();
}
inline ::Hdfs::Internal::CryptoProtocolVersionProto CreateRequestProto::_internal_cryptoprotocolversion(int index) const {
  return static_cast< ::Hdfs::Internal::CryptoProtocolVersionProto >(cryptoprotocolversion_.Get(index));
}
inline ::Hdfs::Internal::CryptoProtocolVersionProto CreateRequestProto::cryptoprotocolversion(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateRequestProto.cryptoProtocolVersion)
  return _internal_cryptoprotocolversion(index);
}
inline void CreateRequestProto::set_cryptoprotocolversion(int index, ::Hdfs::Internal::CryptoProtocolVersionProto value) {
  assert(::Hdfs::Internal::CryptoProtocolVersionProto_IsValid(value));
  cryptoprotocolversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateRequestProto.cryptoProtocolVersion)
}
inline void CreateRequestProto::_internal_add_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value) {
  assert(::Hdfs::Internal::CryptoProtocolVersionProto_IsValid(value));
  cryptoprotocolversion_.Add(value);
}
inline void CreateRequestProto::add_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value) {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.CreateRequestProto.cryptoProtocolVersion)
  _internal_add_cryptoprotocolversion(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CreateRequestProto::cryptoprotocolversion() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.CreateRequestProto.cryptoProtocolVersion)
  return cryptoprotocolversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateRequestProto::_internal_mutable_cryptoprotocolversion() {
  return &cryptoprotocolversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateRequestProto::mutable_cryptoprotocolversion() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.CreateRequestProto.cryptoProtocolVersion)
  return _internal_mutable_cryptoprotocolversion();
}

// -------------------------------------------------------------------

// CreateResponseProto

// optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
inline bool CreateResponseProto::_internal_has_fs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fs_ != nullptr);
  return value;
}
inline bool CreateResponseProto::has_fs() const {
  return _internal_has_fs();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& CreateResponseProto::_internal_fs() const {
  const ::Hdfs::Internal::HdfsFileStatusProto* p = fs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::HdfsFileStatusProto*>(
      &::Hdfs::Internal::_HdfsFileStatusProto_default_instance_);
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& CreateResponseProto::fs() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateResponseProto.fs)
  return _internal_fs();
}
inline ::Hdfs::Internal::HdfsFileStatusProto* CreateResponseProto::release_fs() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateResponseProto.fs)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::HdfsFileStatusProto* temp = fs_;
  fs_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* CreateResponseProto::_internal_mutable_fs() {
  _has_bits_[0] |= 0x00000001u;
  if (fs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::HdfsFileStatusProto>(GetArenaNoVirtual());
    fs_ = p;
  }
  return fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* CreateResponseProto::mutable_fs() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateResponseProto.fs)
  return _internal_mutable_fs();
}
inline void CreateResponseProto::set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fs_);
  }
  if (fs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fs_ = fs;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateResponseProto.fs)
}

// -------------------------------------------------------------------

// AppendRequestProto

// required string src = 1;
inline bool AppendRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppendRequestProto::has_src() const {
  return _internal_has_src();
}
inline void AppendRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppendRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AppendRequestProto.src)
  return _internal_src();
}
inline void AppendRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AppendRequestProto.src)
}
inline std::string* AppendRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AppendRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& AppendRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void AppendRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppendRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.AppendRequestProto.src)
}
inline void AppendRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AppendRequestProto.src)
}
inline void AppendRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AppendRequestProto.src)
}
inline std::string* AppendRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AppendRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AppendRequestProto.src)
}

// required string clientName = 2;
inline bool AppendRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppendRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void AppendRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppendRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AppendRequestProto.clientName)
  return _internal_clientname();
}
inline void AppendRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AppendRequestProto.clientName)
}
inline std::string* AppendRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AppendRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& AppendRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void AppendRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppendRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.AppendRequestProto.clientName)
}
inline void AppendRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AppendRequestProto.clientName)
}
inline void AppendRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AppendRequestProto.clientName)
}
inline std::string* AppendRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AppendRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AppendRequestProto.clientName)
}

// -------------------------------------------------------------------

// AppendResponseProto

// optional .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool AppendResponseProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool AppendResponseProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& AppendResponseProto::_internal_block() const {
  const ::Hdfs::Internal::LocatedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::LocatedBlockProto*>(
      &::Hdfs::Internal::_LocatedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::LocatedBlockProto& AppendResponseProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AppendResponseProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::LocatedBlockProto* AppendResponseProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AppendResponseProto.block)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::LocatedBlockProto* AppendResponseProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::LocatedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* AppendResponseProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AppendResponseProto.block)
  return _internal_mutable_block();
}
inline void AppendResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AppendResponseProto.block)
}

// optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
inline bool AppendResponseProto::_internal_has_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stat_ != nullptr);
  return value;
}
inline bool AppendResponseProto::has_stat() const {
  return _internal_has_stat();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& AppendResponseProto::_internal_stat() const {
  const ::Hdfs::Internal::HdfsFileStatusProto* p = stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::HdfsFileStatusProto*>(
      &::Hdfs::Internal::_HdfsFileStatusProto_default_instance_);
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& AppendResponseProto::stat() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AppendResponseProto.stat)
  return _internal_stat();
}
inline ::Hdfs::Internal::HdfsFileStatusProto* AppendResponseProto::release_stat() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AppendResponseProto.stat)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::HdfsFileStatusProto* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* AppendResponseProto::_internal_mutable_stat() {
  _has_bits_[0] |= 0x00000002u;
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::HdfsFileStatusProto>(GetArenaNoVirtual());
    stat_ = p;
  }
  return stat_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* AppendResponseProto::mutable_stat() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AppendResponseProto.stat)
  return _internal_mutable_stat();
}
inline void AppendResponseProto::set_allocated_stat(::Hdfs::Internal::HdfsFileStatusProto* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AppendResponseProto.stat)
}

// -------------------------------------------------------------------

// SetReplicationRequestProto

// required string src = 1;
inline bool SetReplicationRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetReplicationRequestProto::has_src() const {
  return _internal_has_src();
}
inline void SetReplicationRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetReplicationRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetReplicationRequestProto.src)
  return _internal_src();
}
inline void SetReplicationRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetReplicationRequestProto.src)
}
inline std::string* SetReplicationRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetReplicationRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& SetReplicationRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void SetReplicationRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetReplicationRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.SetReplicationRequestProto.src)
}
inline void SetReplicationRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.SetReplicationRequestProto.src)
}
inline void SetReplicationRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.SetReplicationRequestProto.src)
}
inline std::string* SetReplicationRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetReplicationRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetReplicationRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetReplicationRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetReplicationRequestProto.src)
}

// required uint32 replication = 2;
inline bool SetReplicationRequestProto::_internal_has_replication() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetReplicationRequestProto::has_replication() const {
  return _internal_has_replication();
}
inline void SetReplicationRequestProto::clear_replication() {
  replication_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetReplicationRequestProto::_internal_replication() const {
  return replication_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetReplicationRequestProto::replication() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetReplicationRequestProto.replication)
  return _internal_replication();
}
inline void SetReplicationRequestProto::_internal_set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  replication_ = value;
}
inline void SetReplicationRequestProto::set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replication(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetReplicationRequestProto.replication)
}

// -------------------------------------------------------------------

// SetReplicationResponseProto

// required bool result = 1;
inline bool SetReplicationResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetReplicationResponseProto::has_result() const {
  return _internal_has_result();
}
inline void SetReplicationResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SetReplicationResponseProto::_internal_result() const {
  return result_;
}
inline bool SetReplicationResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetReplicationResponseProto.result)
  return _internal_result();
}
inline void SetReplicationResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void SetReplicationResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetReplicationResponseProto.result)
}

// -------------------------------------------------------------------

// SetPermissionRequestProto

// required string src = 1;
inline bool SetPermissionRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetPermissionRequestProto::has_src() const {
  return _internal_has_src();
}
inline void SetPermissionRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetPermissionRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetPermissionRequestProto.src)
  return _internal_src();
}
inline void SetPermissionRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetPermissionRequestProto.src)
}
inline std::string* SetPermissionRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetPermissionRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& SetPermissionRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void SetPermissionRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPermissionRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.SetPermissionRequestProto.src)
}
inline void SetPermissionRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.SetPermissionRequestProto.src)
}
inline void SetPermissionRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.SetPermissionRequestProto.src)
}
inline std::string* SetPermissionRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPermissionRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetPermissionRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPermissionRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetPermissionRequestProto.src)
}

// required .Hdfs.Internal.FsPermissionProto permission = 2;
inline bool SetPermissionRequestProto::_internal_has_permission() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || permission_ != nullptr);
  return value;
}
inline bool SetPermissionRequestProto::has_permission() const {
  return _internal_has_permission();
}
inline const ::Hdfs::Internal::FsPermissionProto& SetPermissionRequestProto::_internal_permission() const {
  const ::Hdfs::Internal::FsPermissionProto* p = permission_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::FsPermissionProto*>(
      &::Hdfs::Internal::_FsPermissionProto_default_instance_);
}
inline const ::Hdfs::Internal::FsPermissionProto& SetPermissionRequestProto::permission() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetPermissionRequestProto.permission)
  return _internal_permission();
}
inline ::Hdfs::Internal::FsPermissionProto* SetPermissionRequestProto::release_permission() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetPermissionRequestProto.permission)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::FsPermissionProto* temp = permission_;
  permission_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::FsPermissionProto* SetPermissionRequestProto::_internal_mutable_permission() {
  _has_bits_[0] |= 0x00000002u;
  if (permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::FsPermissionProto>(GetArenaNoVirtual());
    permission_ = p;
  }
  return permission_;
}
inline ::Hdfs::Internal::FsPermissionProto* SetPermissionRequestProto::mutable_permission() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetPermissionRequestProto.permission)
  return _internal_mutable_permission();
}
inline void SetPermissionRequestProto::set_allocated_permission(::Hdfs::Internal::FsPermissionProto* permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_);
  }
  if (permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  permission_ = permission;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetPermissionRequestProto.permission)
}

// -------------------------------------------------------------------

// SetPermissionResponseProto

// -------------------------------------------------------------------

// SetOwnerRequestProto

// required string src = 1;
inline bool SetOwnerRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetOwnerRequestProto::has_src() const {
  return _internal_has_src();
}
inline void SetOwnerRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetOwnerRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetOwnerRequestProto.src)
  return _internal_src();
}
inline void SetOwnerRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetOwnerRequestProto.src)
}
inline std::string* SetOwnerRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetOwnerRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& SetOwnerRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void SetOwnerRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetOwnerRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.SetOwnerRequestProto.src)
}
inline void SetOwnerRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.SetOwnerRequestProto.src)
}
inline void SetOwnerRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.SetOwnerRequestProto.src)
}
inline std::string* SetOwnerRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetOwnerRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetOwnerRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetOwnerRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetOwnerRequestProto.src)
}

// optional string username = 2;
inline bool SetOwnerRequestProto::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetOwnerRequestProto::has_username() const {
  return _internal_has_username();
}
inline void SetOwnerRequestProto::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetOwnerRequestProto::username() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetOwnerRequestProto.username)
  return _internal_username();
}
inline void SetOwnerRequestProto::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetOwnerRequestProto.username)
}
inline std::string* SetOwnerRequestProto::mutable_username() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetOwnerRequestProto.username)
  return _internal_mutable_username();
}
inline const std::string& SetOwnerRequestProto::_internal_username() const {
  return username_.GetNoArena();
}
inline void SetOwnerRequestProto::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetOwnerRequestProto::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.SetOwnerRequestProto.username)
}
inline void SetOwnerRequestProto::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.SetOwnerRequestProto.username)
}
inline void SetOwnerRequestProto::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.SetOwnerRequestProto.username)
}
inline std::string* SetOwnerRequestProto::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetOwnerRequestProto::release_username() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetOwnerRequestProto.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetOwnerRequestProto::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetOwnerRequestProto.username)
}

// optional string groupname = 3;
inline bool SetOwnerRequestProto::_internal_has_groupname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetOwnerRequestProto::has_groupname() const {
  return _internal_has_groupname();
}
inline void SetOwnerRequestProto::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SetOwnerRequestProto::groupname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetOwnerRequestProto.groupname)
  return _internal_groupname();
}
inline void SetOwnerRequestProto::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetOwnerRequestProto.groupname)
}
inline std::string* SetOwnerRequestProto::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetOwnerRequestProto.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& SetOwnerRequestProto::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void SetOwnerRequestProto::_internal_set_groupname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetOwnerRequestProto::set_groupname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.SetOwnerRequestProto.groupname)
}
inline void SetOwnerRequestProto::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.SetOwnerRequestProto.groupname)
}
inline void SetOwnerRequestProto::set_groupname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.SetOwnerRequestProto.groupname)
}
inline std::string* SetOwnerRequestProto::_internal_mutable_groupname() {
  _has_bits_[0] |= 0x00000004u;
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetOwnerRequestProto::release_groupname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetOwnerRequestProto.groupname)
  if (!_internal_has_groupname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return groupname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetOwnerRequestProto::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetOwnerRequestProto.groupname)
}

// -------------------------------------------------------------------

// SetOwnerResponseProto

// -------------------------------------------------------------------

// AbandonBlockRequestProto

// required .Hdfs.Internal.ExtendedBlockProto b = 1;
inline bool AbandonBlockRequestProto::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || b_ != nullptr);
  return value;
}
inline bool AbandonBlockRequestProto::has_b() const {
  return _internal_has_b();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& AbandonBlockRequestProto::_internal_b() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = b_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& AbandonBlockRequestProto::b() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AbandonBlockRequestProto.b)
  return _internal_b();
}
inline ::Hdfs::Internal::ExtendedBlockProto* AbandonBlockRequestProto::release_b() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AbandonBlockRequestProto.b)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = b_;
  b_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AbandonBlockRequestProto::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000004u;
  if (b_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    b_ = p;
  }
  return b_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AbandonBlockRequestProto::mutable_b() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AbandonBlockRequestProto.b)
  return _internal_mutable_b();
}
inline void AbandonBlockRequestProto::set_allocated_b(::Hdfs::Internal::ExtendedBlockProto* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AbandonBlockRequestProto.b)
}

// required string src = 2;
inline bool AbandonBlockRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AbandonBlockRequestProto::has_src() const {
  return _internal_has_src();
}
inline void AbandonBlockRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AbandonBlockRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AbandonBlockRequestProto.src)
  return _internal_src();
}
inline void AbandonBlockRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AbandonBlockRequestProto.src)
}
inline std::string* AbandonBlockRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AbandonBlockRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& AbandonBlockRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void AbandonBlockRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AbandonBlockRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.AbandonBlockRequestProto.src)
}
inline void AbandonBlockRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AbandonBlockRequestProto.src)
}
inline void AbandonBlockRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AbandonBlockRequestProto.src)
}
inline std::string* AbandonBlockRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AbandonBlockRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AbandonBlockRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AbandonBlockRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AbandonBlockRequestProto.src)
}

// required string holder = 3;
inline bool AbandonBlockRequestProto::_internal_has_holder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AbandonBlockRequestProto::has_holder() const {
  return _internal_has_holder();
}
inline void AbandonBlockRequestProto::clear_holder() {
  holder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AbandonBlockRequestProto::holder() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AbandonBlockRequestProto.holder)
  return _internal_holder();
}
inline void AbandonBlockRequestProto::set_holder(const std::string& value) {
  _internal_set_holder(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AbandonBlockRequestProto.holder)
}
inline std::string* AbandonBlockRequestProto::mutable_holder() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AbandonBlockRequestProto.holder)
  return _internal_mutable_holder();
}
inline const std::string& AbandonBlockRequestProto::_internal_holder() const {
  return holder_.GetNoArena();
}
inline void AbandonBlockRequestProto::_internal_set_holder(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  holder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AbandonBlockRequestProto::set_holder(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  holder_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.AbandonBlockRequestProto.holder)
}
inline void AbandonBlockRequestProto::set_holder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  holder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AbandonBlockRequestProto.holder)
}
inline void AbandonBlockRequestProto::set_holder(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  holder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AbandonBlockRequestProto.holder)
}
inline std::string* AbandonBlockRequestProto::_internal_mutable_holder() {
  _has_bits_[0] |= 0x00000002u;
  return holder_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AbandonBlockRequestProto::release_holder() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AbandonBlockRequestProto.holder)
  if (!_internal_has_holder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return holder_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AbandonBlockRequestProto::set_allocated_holder(std::string* holder) {
  if (holder != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  holder_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AbandonBlockRequestProto.holder)
}

// -------------------------------------------------------------------

// AbandonBlockResponseProto

// -------------------------------------------------------------------

// AddBlockRequestProto

// required string src = 1;
inline bool AddBlockRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddBlockRequestProto::has_src() const {
  return _internal_has_src();
}
inline void AddBlockRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddBlockRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddBlockRequestProto.src)
  return _internal_src();
}
inline void AddBlockRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AddBlockRequestProto.src)
}
inline std::string* AddBlockRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddBlockRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& AddBlockRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void AddBlockRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddBlockRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.AddBlockRequestProto.src)
}
inline void AddBlockRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AddBlockRequestProto.src)
}
inline void AddBlockRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AddBlockRequestProto.src)
}
inline std::string* AddBlockRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddBlockRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AddBlockRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddBlockRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AddBlockRequestProto.src)
}

// required string clientName = 2;
inline bool AddBlockRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddBlockRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void AddBlockRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddBlockRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddBlockRequestProto.clientName)
  return _internal_clientname();
}
inline void AddBlockRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AddBlockRequestProto.clientName)
}
inline std::string* AddBlockRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddBlockRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& AddBlockRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void AddBlockRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddBlockRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.AddBlockRequestProto.clientName)
}
inline void AddBlockRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AddBlockRequestProto.clientName)
}
inline void AddBlockRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AddBlockRequestProto.clientName)
}
inline std::string* AddBlockRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddBlockRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AddBlockRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddBlockRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AddBlockRequestProto.clientName)
}

// optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
inline bool AddBlockRequestProto::_internal_has_previous() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || previous_ != nullptr);
  return value;
}
inline bool AddBlockRequestProto::has_previous() const {
  return _internal_has_previous();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& AddBlockRequestProto::_internal_previous() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = previous_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& AddBlockRequestProto::previous() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddBlockRequestProto.previous)
  return _internal_previous();
}
inline ::Hdfs::Internal::ExtendedBlockProto* AddBlockRequestProto::release_previous() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AddBlockRequestProto.previous)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = previous_;
  previous_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AddBlockRequestProto::_internal_mutable_previous() {
  _has_bits_[0] |= 0x00000004u;
  if (previous_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    previous_ = p;
  }
  return previous_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AddBlockRequestProto::mutable_previous() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddBlockRequestProto.previous)
  return _internal_mutable_previous();
}
inline void AddBlockRequestProto::set_allocated_previous(::Hdfs::Internal::ExtendedBlockProto* previous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_);
  }
  if (previous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      previous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  previous_ = previous;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AddBlockRequestProto.previous)
}

// repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
inline int AddBlockRequestProto::_internal_excludenodes_size() const {
  return excludenodes_.size();
}
inline int AddBlockRequestProto::excludenodes_size() const {
  return _internal_excludenodes_size();
}
inline ::Hdfs::Internal::DatanodeInfoProto* AddBlockRequestProto::mutable_excludenodes(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddBlockRequestProto.excludeNodes)
  return excludenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
AddBlockRequestProto::mutable_excludenodes() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.AddBlockRequestProto.excludeNodes)
  return &excludenodes_;
}
inline const ::Hdfs::Internal::DatanodeInfoProto& AddBlockRequestProto::_internal_excludenodes(int index) const {
  return excludenodes_.Get(index);
}
inline const ::Hdfs::Internal::DatanodeInfoProto& AddBlockRequestProto::excludenodes(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddBlockRequestProto.excludeNodes)
  return _internal_excludenodes(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* AddBlockRequestProto::_internal_add_excludenodes() {
  return excludenodes_.Add();
}
inline ::Hdfs::Internal::DatanodeInfoProto* AddBlockRequestProto::add_excludenodes() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.AddBlockRequestProto.excludeNodes)
  return _internal_add_excludenodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
AddBlockRequestProto::excludenodes() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.AddBlockRequestProto.excludeNodes)
  return excludenodes_;
}

// optional uint64 fileId = 5 [default = 0];
inline bool AddBlockRequestProto::_internal_has_fileid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AddBlockRequestProto::has_fileid() const {
  return _internal_has_fileid();
}
inline void AddBlockRequestProto::clear_fileid() {
  fileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddBlockRequestProto::_internal_fileid() const {
  return fileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddBlockRequestProto::fileid() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddBlockRequestProto.fileId)
  return _internal_fileid();
}
inline void AddBlockRequestProto::_internal_set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  fileid_ = value;
}
inline void AddBlockRequestProto::set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fileid(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AddBlockRequestProto.fileId)
}

// repeated string favoredNodes = 6;
inline int AddBlockRequestProto::_internal_favorednodes_size() const {
  return favorednodes_.size();
}
inline int AddBlockRequestProto::favorednodes_size() const {
  return _internal_favorednodes_size();
}
inline void AddBlockRequestProto::clear_favorednodes() {
  favorednodes_.Clear();
}
inline std::string* AddBlockRequestProto::add_favorednodes() {
  // @@protoc_insertion_point(field_add_mutable:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
  return _internal_add_favorednodes();
}
inline const std::string& AddBlockRequestProto::_internal_favorednodes(int index) const {
  return favorednodes_.Get(index);
}
inline const std::string& AddBlockRequestProto::favorednodes(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
  return _internal_favorednodes(index);
}
inline std::string* AddBlockRequestProto::mutable_favorednodes(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
  return favorednodes_.Mutable(index);
}
inline void AddBlockRequestProto::set_favorednodes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
  favorednodes_.Mutable(index)->assign(value);
}
inline void AddBlockRequestProto::set_favorednodes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
  favorednodes_.Mutable(index)->assign(std::move(value));
}
inline void AddBlockRequestProto::set_favorednodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  favorednodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
}
inline void AddBlockRequestProto::set_favorednodes(int index, const char* value, size_t size) {
  favorednodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
}
inline std::string* AddBlockRequestProto::_internal_add_favorednodes() {
  return favorednodes_.Add();
}
inline void AddBlockRequestProto::add_favorednodes(const std::string& value) {
  favorednodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
}
inline void AddBlockRequestProto::add_favorednodes(std::string&& value) {
  favorednodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
}
inline void AddBlockRequestProto::add_favorednodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  favorednodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
}
inline void AddBlockRequestProto::add_favorednodes(const char* value, size_t size) {
  favorednodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddBlockRequestProto::favorednodes() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
  return favorednodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddBlockRequestProto::mutable_favorednodes() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.AddBlockRequestProto.favoredNodes)
  return &favorednodes_;
}

// -------------------------------------------------------------------

// AddBlockResponseProto

// required .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool AddBlockResponseProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool AddBlockResponseProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& AddBlockResponseProto::_internal_block() const {
  const ::Hdfs::Internal::LocatedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::LocatedBlockProto*>(
      &::Hdfs::Internal::_LocatedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::LocatedBlockProto& AddBlockResponseProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddBlockResponseProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::LocatedBlockProto* AddBlockResponseProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AddBlockResponseProto.block)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::LocatedBlockProto* AddBlockResponseProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::LocatedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* AddBlockResponseProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddBlockResponseProto.block)
  return _internal_mutable_block();
}
inline void AddBlockResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AddBlockResponseProto.block)
}

// -------------------------------------------------------------------

// GetAdditionalDatanodeRequestProto

// required string src = 1;
inline bool GetAdditionalDatanodeRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAdditionalDatanodeRequestProto::has_src() const {
  return _internal_has_src();
}
inline void GetAdditionalDatanodeRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAdditionalDatanodeRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
  return _internal_src();
}
inline void GetAdditionalDatanodeRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
}
inline std::string* GetAdditionalDatanodeRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& GetAdditionalDatanodeRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void GetAdditionalDatanodeRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAdditionalDatanodeRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
}
inline void GetAdditionalDatanodeRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
}
inline void GetAdditionalDatanodeRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
}
inline std::string* GetAdditionalDatanodeRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAdditionalDatanodeRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAdditionalDatanodeRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetAdditionalDatanodeRequestProto.src)
}

// required .Hdfs.Internal.ExtendedBlockProto blk = 2;
inline bool GetAdditionalDatanodeRequestProto::_internal_has_blk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || blk_ != nullptr);
  return value;
}
inline bool GetAdditionalDatanodeRequestProto::has_blk() const {
  return _internal_has_blk();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetAdditionalDatanodeRequestProto::_internal_blk() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = blk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetAdditionalDatanodeRequestProto::blk() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeRequestProto.blk)
  return _internal_blk();
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetAdditionalDatanodeRequestProto::release_blk() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetAdditionalDatanodeRequestProto.blk)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = blk_;
  blk_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetAdditionalDatanodeRequestProto::_internal_mutable_blk() {
  _has_bits_[0] |= 0x00000004u;
  if (blk_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    blk_ = p;
  }
  return blk_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetAdditionalDatanodeRequestProto::mutable_blk() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetAdditionalDatanodeRequestProto.blk)
  return _internal_mutable_blk();
}
inline void GetAdditionalDatanodeRequestProto::set_allocated_blk(::Hdfs::Internal::ExtendedBlockProto* blk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blk_);
  }
  if (blk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blk, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  blk_ = blk;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetAdditionalDatanodeRequestProto.blk)
}

// repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
inline int GetAdditionalDatanodeRequestProto::_internal_existings_size() const {
  return existings_.size();
}
inline int GetAdditionalDatanodeRequestProto::existings_size() const {
  return _internal_existings_size();
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::mutable_existings(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existings)
  return existings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
GetAdditionalDatanodeRequestProto::mutable_existings() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existings)
  return &existings_;
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetAdditionalDatanodeRequestProto::_internal_existings(int index) const {
  return existings_.Get(index);
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetAdditionalDatanodeRequestProto::existings(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existings)
  return _internal_existings(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::_internal_add_existings() {
  return existings_.Add();
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::add_existings() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existings)
  return _internal_add_existings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
GetAdditionalDatanodeRequestProto::existings() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existings)
  return existings_;
}

// repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
inline int GetAdditionalDatanodeRequestProto::_internal_excludes_size() const {
  return excludes_.size();
}
inline int GetAdditionalDatanodeRequestProto::excludes_size() const {
  return _internal_excludes_size();
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::mutable_excludes(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetAdditionalDatanodeRequestProto.excludes)
  return excludes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
GetAdditionalDatanodeRequestProto::mutable_excludes() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetAdditionalDatanodeRequestProto.excludes)
  return &excludes_;
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetAdditionalDatanodeRequestProto::_internal_excludes(int index) const {
  return excludes_.Get(index);
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetAdditionalDatanodeRequestProto::excludes(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeRequestProto.excludes)
  return _internal_excludes(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::_internal_add_excludes() {
  return excludes_.Add();
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::add_excludes() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetAdditionalDatanodeRequestProto.excludes)
  return _internal_add_excludes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
GetAdditionalDatanodeRequestProto::excludes() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetAdditionalDatanodeRequestProto.excludes)
  return excludes_;
}

// required uint32 numAdditionalNodes = 5;
inline bool GetAdditionalDatanodeRequestProto::_internal_has_numadditionalnodes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetAdditionalDatanodeRequestProto::has_numadditionalnodes() const {
  return _internal_has_numadditionalnodes();
}
inline void GetAdditionalDatanodeRequestProto::clear_numadditionalnodes() {
  numadditionalnodes_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAdditionalDatanodeRequestProto::_internal_numadditionalnodes() const {
  return numadditionalnodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAdditionalDatanodeRequestProto::numadditionalnodes() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeRequestProto.numAdditionalNodes)
  return _internal_numadditionalnodes();
}
inline void GetAdditionalDatanodeRequestProto::_internal_set_numadditionalnodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  numadditionalnodes_ = value;
}
inline void GetAdditionalDatanodeRequestProto::set_numadditionalnodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numadditionalnodes(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetAdditionalDatanodeRequestProto.numAdditionalNodes)
}

// required string clientName = 6;
inline bool GetAdditionalDatanodeRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAdditionalDatanodeRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void GetAdditionalDatanodeRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetAdditionalDatanodeRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
  return _internal_clientname();
}
inline void GetAdditionalDatanodeRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
}
inline std::string* GetAdditionalDatanodeRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& GetAdditionalDatanodeRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void GetAdditionalDatanodeRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAdditionalDatanodeRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
}
inline void GetAdditionalDatanodeRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
}
inline void GetAdditionalDatanodeRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
}
inline std::string* GetAdditionalDatanodeRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAdditionalDatanodeRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAdditionalDatanodeRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetAdditionalDatanodeRequestProto.clientName)
}

// repeated string existingStorageUuids = 7;
inline int GetAdditionalDatanodeRequestProto::_internal_existingstorageuuids_size() const {
  return existingstorageuuids_.size();
}
inline int GetAdditionalDatanodeRequestProto::existingstorageuuids_size() const {
  return _internal_existingstorageuuids_size();
}
inline void GetAdditionalDatanodeRequestProto::clear_existingstorageuuids() {
  existingstorageuuids_.Clear();
}
inline std::string* GetAdditionalDatanodeRequestProto::add_existingstorageuuids() {
  // @@protoc_insertion_point(field_add_mutable:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
  return _internal_add_existingstorageuuids();
}
inline const std::string& GetAdditionalDatanodeRequestProto::_internal_existingstorageuuids(int index) const {
  return existingstorageuuids_.Get(index);
}
inline const std::string& GetAdditionalDatanodeRequestProto::existingstorageuuids(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
  return _internal_existingstorageuuids(index);
}
inline std::string* GetAdditionalDatanodeRequestProto::mutable_existingstorageuuids(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
  return existingstorageuuids_.Mutable(index);
}
inline void GetAdditionalDatanodeRequestProto::set_existingstorageuuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
  existingstorageuuids_.Mutable(index)->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::set_existingstorageuuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
  existingstorageuuids_.Mutable(index)->assign(std::move(value));
}
inline void GetAdditionalDatanodeRequestProto::set_existingstorageuuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  existingstorageuuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
}
inline void GetAdditionalDatanodeRequestProto::set_existingstorageuuids(int index, const char* value, size_t size) {
  existingstorageuuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
}
inline std::string* GetAdditionalDatanodeRequestProto::_internal_add_existingstorageuuids() {
  return existingstorageuuids_.Add();
}
inline void GetAdditionalDatanodeRequestProto::add_existingstorageuuids(const std::string& value) {
  existingstorageuuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
}
inline void GetAdditionalDatanodeRequestProto::add_existingstorageuuids(std::string&& value) {
  existingstorageuuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
}
inline void GetAdditionalDatanodeRequestProto::add_existingstorageuuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  existingstorageuuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
}
inline void GetAdditionalDatanodeRequestProto::add_existingstorageuuids(const char* value, size_t size) {
  existingstorageuuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAdditionalDatanodeRequestProto::existingstorageuuids() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
  return existingstorageuuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAdditionalDatanodeRequestProto::mutable_existingstorageuuids() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetAdditionalDatanodeRequestProto.existingStorageUuids)
  return &existingstorageuuids_;
}

// -------------------------------------------------------------------

// GetAdditionalDatanodeResponseProto

// required .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool GetAdditionalDatanodeResponseProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool GetAdditionalDatanodeResponseProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& GetAdditionalDatanodeResponseProto::_internal_block() const {
  const ::Hdfs::Internal::LocatedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::LocatedBlockProto*>(
      &::Hdfs::Internal::_LocatedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::LocatedBlockProto& GetAdditionalDatanodeResponseProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetAdditionalDatanodeResponseProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::LocatedBlockProto* GetAdditionalDatanodeResponseProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetAdditionalDatanodeResponseProto.block)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::LocatedBlockProto* GetAdditionalDatanodeResponseProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::LocatedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* GetAdditionalDatanodeResponseProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetAdditionalDatanodeResponseProto.block)
  return _internal_mutable_block();
}
inline void GetAdditionalDatanodeResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetAdditionalDatanodeResponseProto.block)
}

// -------------------------------------------------------------------

// CompleteRequestProto

// required string src = 1;
inline bool CompleteRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompleteRequestProto::has_src() const {
  return _internal_has_src();
}
inline void CompleteRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompleteRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CompleteRequestProto.src)
  return _internal_src();
}
inline void CompleteRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CompleteRequestProto.src)
}
inline std::string* CompleteRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CompleteRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& CompleteRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void CompleteRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompleteRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CompleteRequestProto.src)
}
inline void CompleteRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CompleteRequestProto.src)
}
inline void CompleteRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CompleteRequestProto.src)
}
inline std::string* CompleteRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompleteRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CompleteRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CompleteRequestProto.src)
}

// required string clientName = 2;
inline bool CompleteRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CompleteRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void CompleteRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CompleteRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CompleteRequestProto.clientName)
  return _internal_clientname();
}
inline void CompleteRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CompleteRequestProto.clientName)
}
inline std::string* CompleteRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CompleteRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& CompleteRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void CompleteRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompleteRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CompleteRequestProto.clientName)
}
inline void CompleteRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CompleteRequestProto.clientName)
}
inline void CompleteRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CompleteRequestProto.clientName)
}
inline std::string* CompleteRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompleteRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CompleteRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CompleteRequestProto.clientName)
}

// optional .Hdfs.Internal.ExtendedBlockProto last = 3;
inline bool CompleteRequestProto::_internal_has_last() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || last_ != nullptr);
  return value;
}
inline bool CompleteRequestProto::has_last() const {
  return _internal_has_last();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& CompleteRequestProto::_internal_last() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = last_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& CompleteRequestProto::last() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CompleteRequestProto.last)
  return _internal_last();
}
inline ::Hdfs::Internal::ExtendedBlockProto* CompleteRequestProto::release_last() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CompleteRequestProto.last)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = last_;
  last_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* CompleteRequestProto::_internal_mutable_last() {
  _has_bits_[0] |= 0x00000004u;
  if (last_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    last_ = p;
  }
  return last_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* CompleteRequestProto::mutable_last() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CompleteRequestProto.last)
  return _internal_mutable_last();
}
inline void CompleteRequestProto::set_allocated_last(::Hdfs::Internal::ExtendedBlockProto* last) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_);
  }
  if (last) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  last_ = last;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CompleteRequestProto.last)
}

// optional uint64 fileId = 4 [default = 0];
inline bool CompleteRequestProto::_internal_has_fileid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CompleteRequestProto::has_fileid() const {
  return _internal_has_fileid();
}
inline void CompleteRequestProto::clear_fileid() {
  fileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteRequestProto::_internal_fileid() const {
  return fileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteRequestProto::fileid() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CompleteRequestProto.fileId)
  return _internal_fileid();
}
inline void CompleteRequestProto::_internal_set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  fileid_ = value;
}
inline void CompleteRequestProto::set_fileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fileid(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CompleteRequestProto.fileId)
}

// -------------------------------------------------------------------

// CompleteResponseProto

// required bool result = 1;
inline bool CompleteResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompleteResponseProto::has_result() const {
  return _internal_has_result();
}
inline void CompleteResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CompleteResponseProto::_internal_result() const {
  return result_;
}
inline bool CompleteResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CompleteResponseProto.result)
  return _internal_result();
}
inline void CompleteResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CompleteResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CompleteResponseProto.result)
}

// -------------------------------------------------------------------

// ReportBadBlocksRequestProto

// repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
inline int ReportBadBlocksRequestProto::_internal_blocks_size() const {
  return blocks_.size();
}
inline int ReportBadBlocksRequestProto::blocks_size() const {
  return _internal_blocks_size();
}
inline ::Hdfs::Internal::LocatedBlockProto* ReportBadBlocksRequestProto::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ReportBadBlocksRequestProto.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >*
ReportBadBlocksRequestProto::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.ReportBadBlocksRequestProto.blocks)
  return &blocks_;
}
inline const ::Hdfs::Internal::LocatedBlockProto& ReportBadBlocksRequestProto::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::Hdfs::Internal::LocatedBlockProto& ReportBadBlocksRequestProto::blocks(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ReportBadBlocksRequestProto.blocks)
  return _internal_blocks(index);
}
inline ::Hdfs::Internal::LocatedBlockProto* ReportBadBlocksRequestProto::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::Hdfs::Internal::LocatedBlockProto* ReportBadBlocksRequestProto::add_blocks() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.ReportBadBlocksRequestProto.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >&
ReportBadBlocksRequestProto::blocks() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.ReportBadBlocksRequestProto.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// ReportBadBlocksResponseProto

// -------------------------------------------------------------------

// ConcatRequestProto

// required string trg = 1;
inline bool ConcatRequestProto::_internal_has_trg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConcatRequestProto::has_trg() const {
  return _internal_has_trg();
}
inline void ConcatRequestProto::clear_trg() {
  trg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConcatRequestProto::trg() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ConcatRequestProto.trg)
  return _internal_trg();
}
inline void ConcatRequestProto::set_trg(const std::string& value) {
  _internal_set_trg(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ConcatRequestProto.trg)
}
inline std::string* ConcatRequestProto::mutable_trg() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ConcatRequestProto.trg)
  return _internal_mutable_trg();
}
inline const std::string& ConcatRequestProto::_internal_trg() const {
  return trg_.GetNoArena();
}
inline void ConcatRequestProto::_internal_set_trg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConcatRequestProto::set_trg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.ConcatRequestProto.trg)
}
inline void ConcatRequestProto::set_trg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.ConcatRequestProto.trg)
}
inline void ConcatRequestProto::set_trg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.ConcatRequestProto.trg)
}
inline std::string* ConcatRequestProto::_internal_mutable_trg() {
  _has_bits_[0] |= 0x00000001u;
  return trg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConcatRequestProto::release_trg() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ConcatRequestProto.trg)
  if (!_internal_has_trg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConcatRequestProto::set_allocated_trg(std::string* trg) {
  if (trg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trg);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ConcatRequestProto.trg)
}

// repeated string srcs = 2;
inline int ConcatRequestProto::_internal_srcs_size() const {
  return srcs_.size();
}
inline int ConcatRequestProto::srcs_size() const {
  return _internal_srcs_size();
}
inline void ConcatRequestProto::clear_srcs() {
  srcs_.Clear();
}
inline std::string* ConcatRequestProto::add_srcs() {
  // @@protoc_insertion_point(field_add_mutable:Hdfs.Internal.ConcatRequestProto.srcs)
  return _internal_add_srcs();
}
inline const std::string& ConcatRequestProto::_internal_srcs(int index) const {
  return srcs_.Get(index);
}
inline const std::string& ConcatRequestProto::srcs(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ConcatRequestProto.srcs)
  return _internal_srcs(index);
}
inline std::string* ConcatRequestProto::mutable_srcs(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ConcatRequestProto.srcs)
  return srcs_.Mutable(index);
}
inline void ConcatRequestProto::set_srcs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ConcatRequestProto.srcs)
  srcs_.Mutable(index)->assign(value);
}
inline void ConcatRequestProto::set_srcs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ConcatRequestProto.srcs)
  srcs_.Mutable(index)->assign(std::move(value));
}
inline void ConcatRequestProto::set_srcs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  srcs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.ConcatRequestProto.srcs)
}
inline void ConcatRequestProto::set_srcs(int index, const char* value, size_t size) {
  srcs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.ConcatRequestProto.srcs)
}
inline std::string* ConcatRequestProto::_internal_add_srcs() {
  return srcs_.Add();
}
inline void ConcatRequestProto::add_srcs(const std::string& value) {
  srcs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Hdfs.Internal.ConcatRequestProto.srcs)
}
inline void ConcatRequestProto::add_srcs(std::string&& value) {
  srcs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Hdfs.Internal.ConcatRequestProto.srcs)
}
inline void ConcatRequestProto::add_srcs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  srcs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Hdfs.Internal.ConcatRequestProto.srcs)
}
inline void ConcatRequestProto::add_srcs(const char* value, size_t size) {
  srcs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Hdfs.Internal.ConcatRequestProto.srcs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConcatRequestProto::srcs() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.ConcatRequestProto.srcs)
  return srcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConcatRequestProto::mutable_srcs() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.ConcatRequestProto.srcs)
  return &srcs_;
}

// -------------------------------------------------------------------

// ConcatResponseProto

// -------------------------------------------------------------------

// TruncateRequestProto

// required string src = 1;
inline bool TruncateRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TruncateRequestProto::has_src() const {
  return _internal_has_src();
}
inline void TruncateRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TruncateRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TruncateRequestProto.src)
  return _internal_src();
}
inline void TruncateRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TruncateRequestProto.src)
}
inline std::string* TruncateRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.TruncateRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& TruncateRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void TruncateRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TruncateRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.TruncateRequestProto.src)
}
inline void TruncateRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.TruncateRequestProto.src)
}
inline void TruncateRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.TruncateRequestProto.src)
}
inline std::string* TruncateRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TruncateRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.TruncateRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.TruncateRequestProto.src)
}

// required uint64 newLength = 2;
inline bool TruncateRequestProto::_internal_has_newlength() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TruncateRequestProto::has_newlength() const {
  return _internal_has_newlength();
}
inline void TruncateRequestProto::clear_newlength() {
  newlength_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TruncateRequestProto::_internal_newlength() const {
  return newlength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TruncateRequestProto::newlength() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TruncateRequestProto.newLength)
  return _internal_newlength();
}
inline void TruncateRequestProto::_internal_set_newlength(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  newlength_ = value;
}
inline void TruncateRequestProto::set_newlength(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_newlength(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TruncateRequestProto.newLength)
}

// required string clientName = 3;
inline bool TruncateRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TruncateRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void TruncateRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TruncateRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TruncateRequestProto.clientName)
  return _internal_clientname();
}
inline void TruncateRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TruncateRequestProto.clientName)
}
inline std::string* TruncateRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.TruncateRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& TruncateRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void TruncateRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TruncateRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.TruncateRequestProto.clientName)
}
inline void TruncateRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.TruncateRequestProto.clientName)
}
inline void TruncateRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.TruncateRequestProto.clientName)
}
inline std::string* TruncateRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TruncateRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.TruncateRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.TruncateRequestProto.clientName)
}

// -------------------------------------------------------------------

// TruncateResponseProto

// required bool result = 1;
inline bool TruncateResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TruncateResponseProto::has_result() const {
  return _internal_has_result();
}
inline void TruncateResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TruncateResponseProto::_internal_result() const {
  return result_;
}
inline bool TruncateResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TruncateResponseProto.result)
  return _internal_result();
}
inline void TruncateResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void TruncateResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TruncateResponseProto.result)
}

// -------------------------------------------------------------------

// GetLeaseRequestProto

// required string src = 1;
inline bool GetLeaseRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetLeaseRequestProto::has_src() const {
  return _internal_has_src();
}
inline void GetLeaseRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetLeaseRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetLeaseRequestProto.src)
  return _internal_src();
}
inline void GetLeaseRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetLeaseRequestProto.src)
}
inline std::string* GetLeaseRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetLeaseRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& GetLeaseRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void GetLeaseRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLeaseRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetLeaseRequestProto.src)
}
inline void GetLeaseRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetLeaseRequestProto.src)
}
inline void GetLeaseRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetLeaseRequestProto.src)
}
inline std::string* GetLeaseRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLeaseRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetLeaseRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLeaseRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetLeaseRequestProto.src)
}

// required string clientName = 2;
inline bool GetLeaseRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetLeaseRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void GetLeaseRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetLeaseRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetLeaseRequestProto.clientName)
  return _internal_clientname();
}
inline void GetLeaseRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetLeaseRequestProto.clientName)
}
inline std::string* GetLeaseRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetLeaseRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& GetLeaseRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void GetLeaseRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLeaseRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetLeaseRequestProto.clientName)
}
inline void GetLeaseRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetLeaseRequestProto.clientName)
}
inline void GetLeaseRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetLeaseRequestProto.clientName)
}
inline std::string* GetLeaseRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLeaseRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetLeaseRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLeaseRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetLeaseRequestProto.clientName)
}

// -------------------------------------------------------------------

// GetLeaseResponseProto

// -------------------------------------------------------------------

// ReleaseLeaseRequestProto

// required string src = 1;
inline bool ReleaseLeaseRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReleaseLeaseRequestProto::has_src() const {
  return _internal_has_src();
}
inline void ReleaseLeaseRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReleaseLeaseRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ReleaseLeaseRequestProto.src)
  return _internal_src();
}
inline void ReleaseLeaseRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ReleaseLeaseRequestProto.src)
}
inline std::string* ReleaseLeaseRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ReleaseLeaseRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& ReleaseLeaseRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void ReleaseLeaseRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReleaseLeaseRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.ReleaseLeaseRequestProto.src)
}
inline void ReleaseLeaseRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.ReleaseLeaseRequestProto.src)
}
inline void ReleaseLeaseRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.ReleaseLeaseRequestProto.src)
}
inline std::string* ReleaseLeaseRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseLeaseRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ReleaseLeaseRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLeaseRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ReleaseLeaseRequestProto.src)
}

// required string clientName = 2;
inline bool ReleaseLeaseRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReleaseLeaseRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void ReleaseLeaseRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReleaseLeaseRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
  return _internal_clientname();
}
inline void ReleaseLeaseRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
}
inline std::string* ReleaseLeaseRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& ReleaseLeaseRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void ReleaseLeaseRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReleaseLeaseRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
}
inline void ReleaseLeaseRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
}
inline void ReleaseLeaseRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
}
inline std::string* ReleaseLeaseRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseLeaseRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLeaseRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ReleaseLeaseRequestProto.clientName)
}

// -------------------------------------------------------------------

// ReleaseLeaseResponseProto

// -------------------------------------------------------------------

// RenameRequestProto

// required string src = 1;
inline bool RenameRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RenameRequestProto::has_src() const {
  return _internal_has_src();
}
inline void RenameRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RenameRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenameRequestProto.src)
  return _internal_src();
}
inline void RenameRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenameRequestProto.src)
}
inline std::string* RenameRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RenameRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& RenameRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void RenameRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RenameRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RenameRequestProto.src)
}
inline void RenameRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RenameRequestProto.src)
}
inline void RenameRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RenameRequestProto.src)
}
inline std::string* RenameRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenameRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RenameRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RenameRequestProto.src)
}

// required string dst = 2;
inline bool RenameRequestProto::_internal_has_dst() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RenameRequestProto::has_dst() const {
  return _internal_has_dst();
}
inline void RenameRequestProto::clear_dst() {
  dst_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RenameRequestProto::dst() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenameRequestProto.dst)
  return _internal_dst();
}
inline void RenameRequestProto::set_dst(const std::string& value) {
  _internal_set_dst(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenameRequestProto.dst)
}
inline std::string* RenameRequestProto::mutable_dst() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RenameRequestProto.dst)
  return _internal_mutable_dst();
}
inline const std::string& RenameRequestProto::_internal_dst() const {
  return dst_.GetNoArena();
}
inline void RenameRequestProto::_internal_set_dst(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RenameRequestProto::set_dst(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RenameRequestProto.dst)
}
inline void RenameRequestProto::set_dst(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RenameRequestProto.dst)
}
inline void RenameRequestProto::set_dst(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RenameRequestProto.dst)
}
inline std::string* RenameRequestProto::_internal_mutable_dst() {
  _has_bits_[0] |= 0x00000002u;
  return dst_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenameRequestProto::release_dst() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RenameRequestProto.dst)
  if (!_internal_has_dst()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dst_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequestProto::set_allocated_dst(std::string* dst) {
  if (dst != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RenameRequestProto.dst)
}

// -------------------------------------------------------------------

// RenameResponseProto

// required bool result = 1;
inline bool RenameResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RenameResponseProto::has_result() const {
  return _internal_has_result();
}
inline void RenameResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RenameResponseProto::_internal_result() const {
  return result_;
}
inline bool RenameResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenameResponseProto.result)
  return _internal_result();
}
inline void RenameResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void RenameResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenameResponseProto.result)
}

// -------------------------------------------------------------------

// Rename2RequestProto

// required string src = 1;
inline bool Rename2RequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rename2RequestProto::has_src() const {
  return _internal_has_src();
}
inline void Rename2RequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Rename2RequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.Rename2RequestProto.src)
  return _internal_src();
}
inline void Rename2RequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.Rename2RequestProto.src)
}
inline std::string* Rename2RequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.Rename2RequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& Rename2RequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void Rename2RequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Rename2RequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.Rename2RequestProto.src)
}
inline void Rename2RequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.Rename2RequestProto.src)
}
inline void Rename2RequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.Rename2RequestProto.src)
}
inline std::string* Rename2RequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rename2RequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.Rename2RequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rename2RequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.Rename2RequestProto.src)
}

// required string dst = 2;
inline bool Rename2RequestProto::_internal_has_dst() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rename2RequestProto::has_dst() const {
  return _internal_has_dst();
}
inline void Rename2RequestProto::clear_dst() {
  dst_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Rename2RequestProto::dst() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.Rename2RequestProto.dst)
  return _internal_dst();
}
inline void Rename2RequestProto::set_dst(const std::string& value) {
  _internal_set_dst(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.Rename2RequestProto.dst)
}
inline std::string* Rename2RequestProto::mutable_dst() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.Rename2RequestProto.dst)
  return _internal_mutable_dst();
}
inline const std::string& Rename2RequestProto::_internal_dst() const {
  return dst_.GetNoArena();
}
inline void Rename2RequestProto::_internal_set_dst(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Rename2RequestProto::set_dst(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.Rename2RequestProto.dst)
}
inline void Rename2RequestProto::set_dst(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.Rename2RequestProto.dst)
}
inline void Rename2RequestProto::set_dst(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dst_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.Rename2RequestProto.dst)
}
inline std::string* Rename2RequestProto::_internal_mutable_dst() {
  _has_bits_[0] |= 0x00000002u;
  return dst_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rename2RequestProto::release_dst() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.Rename2RequestProto.dst)
  if (!_internal_has_dst()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dst_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rename2RequestProto::set_allocated_dst(std::string* dst) {
  if (dst != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.Rename2RequestProto.dst)
}

// required bool overwriteDest = 3;
inline bool Rename2RequestProto::_internal_has_overwritedest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rename2RequestProto::has_overwritedest() const {
  return _internal_has_overwritedest();
}
inline void Rename2RequestProto::clear_overwritedest() {
  overwritedest_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Rename2RequestProto::_internal_overwritedest() const {
  return overwritedest_;
}
inline bool Rename2RequestProto::overwritedest() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.Rename2RequestProto.overwriteDest)
  return _internal_overwritedest();
}
inline void Rename2RequestProto::_internal_set_overwritedest(bool value) {
  _has_bits_[0] |= 0x00000004u;
  overwritedest_ = value;
}
inline void Rename2RequestProto::set_overwritedest(bool value) {
  _internal_set_overwritedest(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.Rename2RequestProto.overwriteDest)
}

// -------------------------------------------------------------------

// Rename2ResponseProto

// -------------------------------------------------------------------

// DeleteRequestProto

// required string src = 1;
inline bool DeleteRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteRequestProto::has_src() const {
  return _internal_has_src();
}
inline void DeleteRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DeleteRequestProto.src)
  return _internal_src();
}
inline void DeleteRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DeleteRequestProto.src)
}
inline std::string* DeleteRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.DeleteRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& DeleteRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void DeleteRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.DeleteRequestProto.src)
}
inline void DeleteRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.DeleteRequestProto.src)
}
inline void DeleteRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.DeleteRequestProto.src)
}
inline std::string* DeleteRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.DeleteRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.DeleteRequestProto.src)
}

// required bool recursive = 2;
inline bool DeleteRequestProto::_internal_has_recursive() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteRequestProto::has_recursive() const {
  return _internal_has_recursive();
}
inline void DeleteRequestProto::clear_recursive() {
  recursive_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DeleteRequestProto::_internal_recursive() const {
  return recursive_;
}
inline bool DeleteRequestProto::recursive() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DeleteRequestProto.recursive)
  return _internal_recursive();
}
inline void DeleteRequestProto::_internal_set_recursive(bool value) {
  _has_bits_[0] |= 0x00000002u;
  recursive_ = value;
}
inline void DeleteRequestProto::set_recursive(bool value) {
  _internal_set_recursive(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DeleteRequestProto.recursive)
}

// -------------------------------------------------------------------

// DeleteResponseProto

// required bool result = 1;
inline bool DeleteResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteResponseProto::has_result() const {
  return _internal_has_result();
}
inline void DeleteResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeleteResponseProto::_internal_result() const {
  return result_;
}
inline bool DeleteResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DeleteResponseProto.result)
  return _internal_result();
}
inline void DeleteResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void DeleteResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DeleteResponseProto.result)
}

// -------------------------------------------------------------------

// MkdirsRequestProto

// required string src = 1;
inline bool MkdirsRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MkdirsRequestProto::has_src() const {
  return _internal_has_src();
}
inline void MkdirsRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MkdirsRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.MkdirsRequestProto.src)
  return _internal_src();
}
inline void MkdirsRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.MkdirsRequestProto.src)
}
inline std::string* MkdirsRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.MkdirsRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& MkdirsRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void MkdirsRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MkdirsRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.MkdirsRequestProto.src)
}
inline void MkdirsRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.MkdirsRequestProto.src)
}
inline void MkdirsRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.MkdirsRequestProto.src)
}
inline std::string* MkdirsRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MkdirsRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.MkdirsRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MkdirsRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.MkdirsRequestProto.src)
}

// required .Hdfs.Internal.FsPermissionProto masked = 2;
inline bool MkdirsRequestProto::_internal_has_masked() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || masked_ != nullptr);
  return value;
}
inline bool MkdirsRequestProto::has_masked() const {
  return _internal_has_masked();
}
inline const ::Hdfs::Internal::FsPermissionProto& MkdirsRequestProto::_internal_masked() const {
  const ::Hdfs::Internal::FsPermissionProto* p = masked_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::FsPermissionProto*>(
      &::Hdfs::Internal::_FsPermissionProto_default_instance_);
}
inline const ::Hdfs::Internal::FsPermissionProto& MkdirsRequestProto::masked() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.MkdirsRequestProto.masked)
  return _internal_masked();
}
inline ::Hdfs::Internal::FsPermissionProto* MkdirsRequestProto::release_masked() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.MkdirsRequestProto.masked)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::FsPermissionProto* temp = masked_;
  masked_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::FsPermissionProto* MkdirsRequestProto::_internal_mutable_masked() {
  _has_bits_[0] |= 0x00000002u;
  if (masked_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::FsPermissionProto>(GetArenaNoVirtual());
    masked_ = p;
  }
  return masked_;
}
inline ::Hdfs::Internal::FsPermissionProto* MkdirsRequestProto::mutable_masked() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.MkdirsRequestProto.masked)
  return _internal_mutable_masked();
}
inline void MkdirsRequestProto::set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(masked_);
  }
  if (masked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      masked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  masked_ = masked;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.MkdirsRequestProto.masked)
}

// required bool createParent = 3;
inline bool MkdirsRequestProto::_internal_has_createparent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MkdirsRequestProto::has_createparent() const {
  return _internal_has_createparent();
}
inline void MkdirsRequestProto::clear_createparent() {
  createparent_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MkdirsRequestProto::_internal_createparent() const {
  return createparent_;
}
inline bool MkdirsRequestProto::createparent() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.MkdirsRequestProto.createParent)
  return _internal_createparent();
}
inline void MkdirsRequestProto::_internal_set_createparent(bool value) {
  _has_bits_[0] |= 0x00000004u;
  createparent_ = value;
}
inline void MkdirsRequestProto::set_createparent(bool value) {
  _internal_set_createparent(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.MkdirsRequestProto.createParent)
}

// -------------------------------------------------------------------

// MkdirsResponseProto

// required bool result = 1;
inline bool MkdirsResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MkdirsResponseProto::has_result() const {
  return _internal_has_result();
}
inline void MkdirsResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MkdirsResponseProto::_internal_result() const {
  return result_;
}
inline bool MkdirsResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.MkdirsResponseProto.result)
  return _internal_result();
}
inline void MkdirsResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void MkdirsResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.MkdirsResponseProto.result)
}

// -------------------------------------------------------------------

// GetListingRequestProto

// required string src = 1;
inline bool GetListingRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetListingRequestProto::has_src() const {
  return _internal_has_src();
}
inline void GetListingRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetListingRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetListingRequestProto.src)
  return _internal_src();
}
inline void GetListingRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetListingRequestProto.src)
}
inline std::string* GetListingRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetListingRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& GetListingRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void GetListingRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetListingRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetListingRequestProto.src)
}
inline void GetListingRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetListingRequestProto.src)
}
inline void GetListingRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetListingRequestProto.src)
}
inline std::string* GetListingRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetListingRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetListingRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetListingRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetListingRequestProto.src)
}

// required bytes startAfter = 2;
inline bool GetListingRequestProto::_internal_has_startafter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetListingRequestProto::has_startafter() const {
  return _internal_has_startafter();
}
inline void GetListingRequestProto::clear_startafter() {
  startafter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetListingRequestProto::startafter() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetListingRequestProto.startAfter)
  return _internal_startafter();
}
inline void GetListingRequestProto::set_startafter(const std::string& value) {
  _internal_set_startafter(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetListingRequestProto.startAfter)
}
inline std::string* GetListingRequestProto::mutable_startafter() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetListingRequestProto.startAfter)
  return _internal_mutable_startafter();
}
inline const std::string& GetListingRequestProto::_internal_startafter() const {
  return startafter_.GetNoArena();
}
inline void GetListingRequestProto::_internal_set_startafter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  startafter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetListingRequestProto::set_startafter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  startafter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetListingRequestProto.startAfter)
}
inline void GetListingRequestProto::set_startafter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  startafter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetListingRequestProto.startAfter)
}
inline void GetListingRequestProto::set_startafter(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  startafter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetListingRequestProto.startAfter)
}
inline std::string* GetListingRequestProto::_internal_mutable_startafter() {
  _has_bits_[0] |= 0x00000002u;
  return startafter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetListingRequestProto::release_startafter() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetListingRequestProto.startAfter)
  if (!_internal_has_startafter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return startafter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetListingRequestProto::set_allocated_startafter(std::string* startafter) {
  if (startafter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  startafter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startafter);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetListingRequestProto.startAfter)
}

// required bool needLocation = 3;
inline bool GetListingRequestProto::_internal_has_needlocation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetListingRequestProto::has_needlocation() const {
  return _internal_has_needlocation();
}
inline void GetListingRequestProto::clear_needlocation() {
  needlocation_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GetListingRequestProto::_internal_needlocation() const {
  return needlocation_;
}
inline bool GetListingRequestProto::needlocation() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetListingRequestProto.needLocation)
  return _internal_needlocation();
}
inline void GetListingRequestProto::_internal_set_needlocation(bool value) {
  _has_bits_[0] |= 0x00000004u;
  needlocation_ = value;
}
inline void GetListingRequestProto::set_needlocation(bool value) {
  _internal_set_needlocation(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetListingRequestProto.needLocation)
}

// -------------------------------------------------------------------

// GetListingResponseProto

// optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
inline bool GetListingResponseProto::_internal_has_dirlist() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dirlist_ != nullptr);
  return value;
}
inline bool GetListingResponseProto::has_dirlist() const {
  return _internal_has_dirlist();
}
inline const ::Hdfs::Internal::DirectoryListingProto& GetListingResponseProto::_internal_dirlist() const {
  const ::Hdfs::Internal::DirectoryListingProto* p = dirlist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::DirectoryListingProto*>(
      &::Hdfs::Internal::_DirectoryListingProto_default_instance_);
}
inline const ::Hdfs::Internal::DirectoryListingProto& GetListingResponseProto::dirlist() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetListingResponseProto.dirList)
  return _internal_dirlist();
}
inline ::Hdfs::Internal::DirectoryListingProto* GetListingResponseProto::release_dirlist() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetListingResponseProto.dirList)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::DirectoryListingProto* temp = dirlist_;
  dirlist_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::DirectoryListingProto* GetListingResponseProto::_internal_mutable_dirlist() {
  _has_bits_[0] |= 0x00000001u;
  if (dirlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::DirectoryListingProto>(GetArenaNoVirtual());
    dirlist_ = p;
  }
  return dirlist_;
}
inline ::Hdfs::Internal::DirectoryListingProto* GetListingResponseProto::mutable_dirlist() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetListingResponseProto.dirList)
  return _internal_mutable_dirlist();
}
inline void GetListingResponseProto::set_allocated_dirlist(::Hdfs::Internal::DirectoryListingProto* dirlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirlist_);
  }
  if (dirlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dirlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirlist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dirlist_ = dirlist;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetListingResponseProto.dirList)
}

// -------------------------------------------------------------------

// GetSnapshottableDirListingRequestProto

// -------------------------------------------------------------------

// GetSnapshottableDirListingResponseProto

// optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
inline bool GetSnapshottableDirListingResponseProto::_internal_has_snapshottabledirlist() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || snapshottabledirlist_ != nullptr);
  return value;
}
inline bool GetSnapshottableDirListingResponseProto::has_snapshottabledirlist() const {
  return _internal_has_snapshottabledirlist();
}
inline const ::Hdfs::Internal::SnapshottableDirectoryListingProto& GetSnapshottableDirListingResponseProto::_internal_snapshottabledirlist() const {
  const ::Hdfs::Internal::SnapshottableDirectoryListingProto* p = snapshottabledirlist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::SnapshottableDirectoryListingProto*>(
      &::Hdfs::Internal::_SnapshottableDirectoryListingProto_default_instance_);
}
inline const ::Hdfs::Internal::SnapshottableDirectoryListingProto& GetSnapshottableDirListingResponseProto::snapshottabledirlist() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetSnapshottableDirListingResponseProto.snapshottableDirList)
  return _internal_snapshottabledirlist();
}
inline ::Hdfs::Internal::SnapshottableDirectoryListingProto* GetSnapshottableDirListingResponseProto::release_snapshottabledirlist() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetSnapshottableDirListingResponseProto.snapshottableDirList)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::SnapshottableDirectoryListingProto* temp = snapshottabledirlist_;
  snapshottabledirlist_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::SnapshottableDirectoryListingProto* GetSnapshottableDirListingResponseProto::_internal_mutable_snapshottabledirlist() {
  _has_bits_[0] |= 0x00000001u;
  if (snapshottabledirlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::SnapshottableDirectoryListingProto>(GetArenaNoVirtual());
    snapshottabledirlist_ = p;
  }
  return snapshottabledirlist_;
}
inline ::Hdfs::Internal::SnapshottableDirectoryListingProto* GetSnapshottableDirListingResponseProto::mutable_snapshottabledirlist() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetSnapshottableDirListingResponseProto.snapshottableDirList)
  return _internal_mutable_snapshottabledirlist();
}
inline void GetSnapshottableDirListingResponseProto::set_allocated_snapshottabledirlist(::Hdfs::Internal::SnapshottableDirectoryListingProto* snapshottabledirlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshottabledirlist_);
  }
  if (snapshottabledirlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snapshottabledirlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshottabledirlist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshottabledirlist_ = snapshottabledirlist;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetSnapshottableDirListingResponseProto.snapshottableDirList)
}

// -------------------------------------------------------------------

// GetSnapshotDiffReportRequestProto

// required string snapshotRoot = 1;
inline bool GetSnapshotDiffReportRequestProto::_internal_has_snapshotroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSnapshotDiffReportRequestProto::has_snapshotroot() const {
  return _internal_has_snapshotroot();
}
inline void GetSnapshotDiffReportRequestProto::clear_snapshotroot() {
  snapshotroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetSnapshotDiffReportRequestProto::snapshotroot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
  return _internal_snapshotroot();
}
inline void GetSnapshotDiffReportRequestProto::set_snapshotroot(const std::string& value) {
  _internal_set_snapshotroot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
}
inline std::string* GetSnapshotDiffReportRequestProto::mutable_snapshotroot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
  return _internal_mutable_snapshotroot();
}
inline const std::string& GetSnapshotDiffReportRequestProto::_internal_snapshotroot() const {
  return snapshotroot_.GetNoArena();
}
inline void GetSnapshotDiffReportRequestProto::_internal_set_snapshotroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSnapshotDiffReportRequestProto::set_snapshotroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
}
inline void GetSnapshotDiffReportRequestProto::set_snapshotroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
}
inline void GetSnapshotDiffReportRequestProto::set_snapshotroot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
}
inline std::string* GetSnapshotDiffReportRequestProto::_internal_mutable_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
  return snapshotroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSnapshotDiffReportRequestProto::release_snapshotroot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
  if (!_internal_has_snapshotroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshotroot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSnapshotDiffReportRequestProto::set_allocated_snapshotroot(std::string* snapshotroot) {
  if (snapshotroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshotroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotroot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetSnapshotDiffReportRequestProto.snapshotRoot)
}

// required string fromSnapshot = 2;
inline bool GetSnapshotDiffReportRequestProto::_internal_has_fromsnapshot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSnapshotDiffReportRequestProto::has_fromsnapshot() const {
  return _internal_has_fromsnapshot();
}
inline void GetSnapshotDiffReportRequestProto::clear_fromsnapshot() {
  fromsnapshot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetSnapshotDiffReportRequestProto::fromsnapshot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
  return _internal_fromsnapshot();
}
inline void GetSnapshotDiffReportRequestProto::set_fromsnapshot(const std::string& value) {
  _internal_set_fromsnapshot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
}
inline std::string* GetSnapshotDiffReportRequestProto::mutable_fromsnapshot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
  return _internal_mutable_fromsnapshot();
}
inline const std::string& GetSnapshotDiffReportRequestProto::_internal_fromsnapshot() const {
  return fromsnapshot_.GetNoArena();
}
inline void GetSnapshotDiffReportRequestProto::_internal_set_fromsnapshot(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fromsnapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSnapshotDiffReportRequestProto::set_fromsnapshot(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fromsnapshot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
}
inline void GetSnapshotDiffReportRequestProto::set_fromsnapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fromsnapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
}
inline void GetSnapshotDiffReportRequestProto::set_fromsnapshot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fromsnapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
}
inline std::string* GetSnapshotDiffReportRequestProto::_internal_mutable_fromsnapshot() {
  _has_bits_[0] |= 0x00000002u;
  return fromsnapshot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSnapshotDiffReportRequestProto::release_fromsnapshot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
  if (!_internal_has_fromsnapshot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fromsnapshot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSnapshotDiffReportRequestProto::set_allocated_fromsnapshot(std::string* fromsnapshot) {
  if (fromsnapshot != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fromsnapshot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromsnapshot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetSnapshotDiffReportRequestProto.fromSnapshot)
}

// required string toSnapshot = 3;
inline bool GetSnapshotDiffReportRequestProto::_internal_has_tosnapshot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetSnapshotDiffReportRequestProto::has_tosnapshot() const {
  return _internal_has_tosnapshot();
}
inline void GetSnapshotDiffReportRequestProto::clear_tosnapshot() {
  tosnapshot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetSnapshotDiffReportRequestProto::tosnapshot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
  return _internal_tosnapshot();
}
inline void GetSnapshotDiffReportRequestProto::set_tosnapshot(const std::string& value) {
  _internal_set_tosnapshot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
}
inline std::string* GetSnapshotDiffReportRequestProto::mutable_tosnapshot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
  return _internal_mutable_tosnapshot();
}
inline const std::string& GetSnapshotDiffReportRequestProto::_internal_tosnapshot() const {
  return tosnapshot_.GetNoArena();
}
inline void GetSnapshotDiffReportRequestProto::_internal_set_tosnapshot(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  tosnapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSnapshotDiffReportRequestProto::set_tosnapshot(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  tosnapshot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
}
inline void GetSnapshotDiffReportRequestProto::set_tosnapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  tosnapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
}
inline void GetSnapshotDiffReportRequestProto::set_tosnapshot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  tosnapshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
}
inline std::string* GetSnapshotDiffReportRequestProto::_internal_mutable_tosnapshot() {
  _has_bits_[0] |= 0x00000004u;
  return tosnapshot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSnapshotDiffReportRequestProto::release_tosnapshot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
  if (!_internal_has_tosnapshot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return tosnapshot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSnapshotDiffReportRequestProto::set_allocated_tosnapshot(std::string* tosnapshot) {
  if (tosnapshot != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tosnapshot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tosnapshot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetSnapshotDiffReportRequestProto.toSnapshot)
}

// -------------------------------------------------------------------

// GetSnapshotDiffReportResponseProto

// required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
inline bool GetSnapshotDiffReportResponseProto::_internal_has_diffreport() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || diffreport_ != nullptr);
  return value;
}
inline bool GetSnapshotDiffReportResponseProto::has_diffreport() const {
  return _internal_has_diffreport();
}
inline const ::Hdfs::Internal::SnapshotDiffReportProto& GetSnapshotDiffReportResponseProto::_internal_diffreport() const {
  const ::Hdfs::Internal::SnapshotDiffReportProto* p = diffreport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::SnapshotDiffReportProto*>(
      &::Hdfs::Internal::_SnapshotDiffReportProto_default_instance_);
}
inline const ::Hdfs::Internal::SnapshotDiffReportProto& GetSnapshotDiffReportResponseProto::diffreport() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetSnapshotDiffReportResponseProto.diffReport)
  return _internal_diffreport();
}
inline ::Hdfs::Internal::SnapshotDiffReportProto* GetSnapshotDiffReportResponseProto::release_diffreport() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetSnapshotDiffReportResponseProto.diffReport)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::SnapshotDiffReportProto* temp = diffreport_;
  diffreport_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::SnapshotDiffReportProto* GetSnapshotDiffReportResponseProto::_internal_mutable_diffreport() {
  _has_bits_[0] |= 0x00000001u;
  if (diffreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::SnapshotDiffReportProto>(GetArenaNoVirtual());
    diffreport_ = p;
  }
  return diffreport_;
}
inline ::Hdfs::Internal::SnapshotDiffReportProto* GetSnapshotDiffReportResponseProto::mutable_diffreport() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetSnapshotDiffReportResponseProto.diffReport)
  return _internal_mutable_diffreport();
}
inline void GetSnapshotDiffReportResponseProto::set_allocated_diffreport(::Hdfs::Internal::SnapshotDiffReportProto* diffreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffreport_);
  }
  if (diffreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diffreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffreport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  diffreport_ = diffreport;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetSnapshotDiffReportResponseProto.diffReport)
}

// -------------------------------------------------------------------

// RenewLeaseRequestProto

// required string clientName = 1;
inline bool RenewLeaseRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RenewLeaseRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void RenewLeaseRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RenewLeaseRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenewLeaseRequestProto.clientName)
  return _internal_clientname();
}
inline void RenewLeaseRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenewLeaseRequestProto.clientName)
}
inline std::string* RenewLeaseRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RenewLeaseRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& RenewLeaseRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void RenewLeaseRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RenewLeaseRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RenewLeaseRequestProto.clientName)
}
inline void RenewLeaseRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RenewLeaseRequestProto.clientName)
}
inline void RenewLeaseRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RenewLeaseRequestProto.clientName)
}
inline std::string* RenewLeaseRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000001u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenewLeaseRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RenewLeaseRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenewLeaseRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RenewLeaseRequestProto.clientName)
}

// -------------------------------------------------------------------

// RenewLeaseResponseProto

// -------------------------------------------------------------------

// RecoverLeaseRequestProto

// required string src = 1;
inline bool RecoverLeaseRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecoverLeaseRequestProto::has_src() const {
  return _internal_has_src();
}
inline void RecoverLeaseRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecoverLeaseRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RecoverLeaseRequestProto.src)
  return _internal_src();
}
inline void RecoverLeaseRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RecoverLeaseRequestProto.src)
}
inline std::string* RecoverLeaseRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RecoverLeaseRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& RecoverLeaseRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void RecoverLeaseRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecoverLeaseRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RecoverLeaseRequestProto.src)
}
inline void RecoverLeaseRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RecoverLeaseRequestProto.src)
}
inline void RecoverLeaseRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RecoverLeaseRequestProto.src)
}
inline std::string* RecoverLeaseRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecoverLeaseRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RecoverLeaseRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverLeaseRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RecoverLeaseRequestProto.src)
}

// required string clientName = 2;
inline bool RecoverLeaseRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecoverLeaseRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void RecoverLeaseRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RecoverLeaseRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
  return _internal_clientname();
}
inline void RecoverLeaseRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
}
inline std::string* RecoverLeaseRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& RecoverLeaseRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void RecoverLeaseRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecoverLeaseRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
}
inline void RecoverLeaseRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
}
inline void RecoverLeaseRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
}
inline std::string* RecoverLeaseRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000002u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecoverLeaseRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverLeaseRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RecoverLeaseRequestProto.clientName)
}

// -------------------------------------------------------------------

// RecoverLeaseResponseProto

// required bool result = 1;
inline bool RecoverLeaseResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecoverLeaseResponseProto::has_result() const {
  return _internal_has_result();
}
inline void RecoverLeaseResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RecoverLeaseResponseProto::_internal_result() const {
  return result_;
}
inline bool RecoverLeaseResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RecoverLeaseResponseProto.result)
  return _internal_result();
}
inline void RecoverLeaseResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void RecoverLeaseResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RecoverLeaseResponseProto.result)
}

// -------------------------------------------------------------------

// GetFsStatusRequestProto

// -------------------------------------------------------------------

// GetFsStatsResponseProto

// required uint64 capacity = 1;
inline bool GetFsStatsResponseProto::_internal_has_capacity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetFsStatsResponseProto::has_capacity() const {
  return _internal_has_capacity();
}
inline void GetFsStatsResponseProto::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::capacity() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFsStatsResponseProto.capacity)
  return _internal_capacity();
}
inline void GetFsStatsResponseProto::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  capacity_ = value;
}
inline void GetFsStatsResponseProto::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFsStatsResponseProto.capacity)
}

// required uint64 used = 2;
inline bool GetFsStatsResponseProto::_internal_has_used() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetFsStatsResponseProto::has_used() const {
  return _internal_has_used();
}
inline void GetFsStatsResponseProto::clear_used() {
  used_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::used() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFsStatsResponseProto.used)
  return _internal_used();
}
inline void GetFsStatsResponseProto::_internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  used_ = value;
}
inline void GetFsStatsResponseProto::set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFsStatsResponseProto.used)
}

// required uint64 remaining = 3;
inline bool GetFsStatsResponseProto::_internal_has_remaining() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetFsStatsResponseProto::has_remaining() const {
  return _internal_has_remaining();
}
inline void GetFsStatsResponseProto::clear_remaining() {
  remaining_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::_internal_remaining() const {
  return remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::remaining() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFsStatsResponseProto.remaining)
  return _internal_remaining();
}
inline void GetFsStatsResponseProto::_internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  remaining_ = value;
}
inline void GetFsStatsResponseProto::set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFsStatsResponseProto.remaining)
}

// required uint64 under_replicated = 4;
inline bool GetFsStatsResponseProto::_internal_has_under_replicated() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetFsStatsResponseProto::has_under_replicated() const {
  return _internal_has_under_replicated();
}
inline void GetFsStatsResponseProto::clear_under_replicated() {
  under_replicated_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::_internal_under_replicated() const {
  return under_replicated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::under_replicated() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFsStatsResponseProto.under_replicated)
  return _internal_under_replicated();
}
inline void GetFsStatsResponseProto::_internal_set_under_replicated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  under_replicated_ = value;
}
inline void GetFsStatsResponseProto::set_under_replicated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_under_replicated(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFsStatsResponseProto.under_replicated)
}

// required uint64 corrupt_blocks = 5;
inline bool GetFsStatsResponseProto::_internal_has_corrupt_blocks() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetFsStatsResponseProto::has_corrupt_blocks() const {
  return _internal_has_corrupt_blocks();
}
inline void GetFsStatsResponseProto::clear_corrupt_blocks() {
  corrupt_blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::_internal_corrupt_blocks() const {
  return corrupt_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::corrupt_blocks() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFsStatsResponseProto.corrupt_blocks)
  return _internal_corrupt_blocks();
}
inline void GetFsStatsResponseProto::_internal_set_corrupt_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  corrupt_blocks_ = value;
}
inline void GetFsStatsResponseProto::set_corrupt_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_corrupt_blocks(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFsStatsResponseProto.corrupt_blocks)
}

// required uint64 missing_blocks = 6;
inline bool GetFsStatsResponseProto::_internal_has_missing_blocks() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GetFsStatsResponseProto::has_missing_blocks() const {
  return _internal_has_missing_blocks();
}
inline void GetFsStatsResponseProto::clear_missing_blocks() {
  missing_blocks_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::_internal_missing_blocks() const {
  return missing_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFsStatsResponseProto::missing_blocks() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFsStatsResponseProto.missing_blocks)
  return _internal_missing_blocks();
}
inline void GetFsStatsResponseProto::_internal_set_missing_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  missing_blocks_ = value;
}
inline void GetFsStatsResponseProto::set_missing_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_missing_blocks(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFsStatsResponseProto.missing_blocks)
}

// -------------------------------------------------------------------

// GetDatanodeReportRequestProto

// required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
inline bool GetDatanodeReportRequestProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetDatanodeReportRequestProto::has_type() const {
  return _internal_has_type();
}
inline void GetDatanodeReportRequestProto::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Hdfs::Internal::DatanodeReportTypeProto GetDatanodeReportRequestProto::_internal_type() const {
  return static_cast< ::Hdfs::Internal::DatanodeReportTypeProto >(type_);
}
inline ::Hdfs::Internal::DatanodeReportTypeProto GetDatanodeReportRequestProto::type() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetDatanodeReportRequestProto.type)
  return _internal_type();
}
inline void GetDatanodeReportRequestProto::_internal_set_type(::Hdfs::Internal::DatanodeReportTypeProto value) {
  assert(::Hdfs::Internal::DatanodeReportTypeProto_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void GetDatanodeReportRequestProto::set_type(::Hdfs::Internal::DatanodeReportTypeProto value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetDatanodeReportRequestProto.type)
}

// -------------------------------------------------------------------

// GetDatanodeReportResponseProto

// repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
inline int GetDatanodeReportResponseProto::_internal_di_size() const {
  return di_.size();
}
inline int GetDatanodeReportResponseProto::di_size() const {
  return _internal_di_size();
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetDatanodeReportResponseProto::mutable_di(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetDatanodeReportResponseProto.di)
  return di_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
GetDatanodeReportResponseProto::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetDatanodeReportResponseProto.di)
  return &di_;
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetDatanodeReportResponseProto::_internal_di(int index) const {
  return di_.Get(index);
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetDatanodeReportResponseProto::di(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetDatanodeReportResponseProto.di)
  return _internal_di(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetDatanodeReportResponseProto::_internal_add_di() {
  return di_.Add();
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetDatanodeReportResponseProto::add_di() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetDatanodeReportResponseProto.di)
  return _internal_add_di();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
GetDatanodeReportResponseProto::di() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetDatanodeReportResponseProto.di)
  return di_;
}

// -------------------------------------------------------------------

// GetPreferredBlockSizeRequestProto

// required string filename = 1;
inline bool GetPreferredBlockSizeRequestProto::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPreferredBlockSizeRequestProto::has_filename() const {
  return _internal_has_filename();
}
inline void GetPreferredBlockSizeRequestProto::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPreferredBlockSizeRequestProto::filename() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
  return _internal_filename();
}
inline void GetPreferredBlockSizeRequestProto::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
}
inline std::string* GetPreferredBlockSizeRequestProto::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
  return _internal_mutable_filename();
}
inline const std::string& GetPreferredBlockSizeRequestProto::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void GetPreferredBlockSizeRequestProto::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPreferredBlockSizeRequestProto::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
}
inline void GetPreferredBlockSizeRequestProto::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
}
inline void GetPreferredBlockSizeRequestProto::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
}
inline std::string* GetPreferredBlockSizeRequestProto::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPreferredBlockSizeRequestProto::release_filename() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPreferredBlockSizeRequestProto::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetPreferredBlockSizeRequestProto.filename)
}

// -------------------------------------------------------------------

// GetPreferredBlockSizeResponseProto

// required uint64 bsize = 1;
inline bool GetPreferredBlockSizeResponseProto::_internal_has_bsize() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPreferredBlockSizeResponseProto::has_bsize() const {
  return _internal_has_bsize();
}
inline void GetPreferredBlockSizeResponseProto::clear_bsize() {
  bsize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPreferredBlockSizeResponseProto::_internal_bsize() const {
  return bsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPreferredBlockSizeResponseProto::bsize() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetPreferredBlockSizeResponseProto.bsize)
  return _internal_bsize();
}
inline void GetPreferredBlockSizeResponseProto::_internal_set_bsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  bsize_ = value;
}
inline void GetPreferredBlockSizeResponseProto::set_bsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bsize(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetPreferredBlockSizeResponseProto.bsize)
}

// -------------------------------------------------------------------

// SetSafeModeRequestProto

// required .Hdfs.Internal.SafeModeActionProto action = 1;
inline bool SetSafeModeRequestProto::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetSafeModeRequestProto::has_action() const {
  return _internal_has_action();
}
inline void SetSafeModeRequestProto::clear_action() {
  action_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Hdfs::Internal::SafeModeActionProto SetSafeModeRequestProto::_internal_action() const {
  return static_cast< ::Hdfs::Internal::SafeModeActionProto >(action_);
}
inline ::Hdfs::Internal::SafeModeActionProto SetSafeModeRequestProto::action() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetSafeModeRequestProto.action)
  return _internal_action();
}
inline void SetSafeModeRequestProto::_internal_set_action(::Hdfs::Internal::SafeModeActionProto value) {
  assert(::Hdfs::Internal::SafeModeActionProto_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_ = value;
}
inline void SetSafeModeRequestProto::set_action(::Hdfs::Internal::SafeModeActionProto value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetSafeModeRequestProto.action)
}

// optional bool checked = 2 [default = false];
inline bool SetSafeModeRequestProto::_internal_has_checked() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetSafeModeRequestProto::has_checked() const {
  return _internal_has_checked();
}
inline void SetSafeModeRequestProto::clear_checked() {
  checked_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SetSafeModeRequestProto::_internal_checked() const {
  return checked_;
}
inline bool SetSafeModeRequestProto::checked() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetSafeModeRequestProto.checked)
  return _internal_checked();
}
inline void SetSafeModeRequestProto::_internal_set_checked(bool value) {
  _has_bits_[0] |= 0x00000001u;
  checked_ = value;
}
inline void SetSafeModeRequestProto::set_checked(bool value) {
  _internal_set_checked(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetSafeModeRequestProto.checked)
}

// -------------------------------------------------------------------

// SetSafeModeResponseProto

// required bool result = 1;
inline bool SetSafeModeResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetSafeModeResponseProto::has_result() const {
  return _internal_has_result();
}
inline void SetSafeModeResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SetSafeModeResponseProto::_internal_result() const {
  return result_;
}
inline bool SetSafeModeResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetSafeModeResponseProto.result)
  return _internal_result();
}
inline void SetSafeModeResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void SetSafeModeResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetSafeModeResponseProto.result)
}

// -------------------------------------------------------------------

// SaveNamespaceRequestProto

// -------------------------------------------------------------------

// SaveNamespaceResponseProto

// -------------------------------------------------------------------

// RollEditsRequestProto

// -------------------------------------------------------------------

// RollEditsResponseProto

// required uint64 newSegmentTxId = 1;
inline bool RollEditsResponseProto::_internal_has_newsegmenttxid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RollEditsResponseProto::has_newsegmenttxid() const {
  return _internal_has_newsegmenttxid();
}
inline void RollEditsResponseProto::clear_newsegmenttxid() {
  newsegmenttxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RollEditsResponseProto::_internal_newsegmenttxid() const {
  return newsegmenttxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RollEditsResponseProto::newsegmenttxid() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RollEditsResponseProto.newSegmentTxId)
  return _internal_newsegmenttxid();
}
inline void RollEditsResponseProto::_internal_set_newsegmenttxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  newsegmenttxid_ = value;
}
inline void RollEditsResponseProto::set_newsegmenttxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_newsegmenttxid(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RollEditsResponseProto.newSegmentTxId)
}

// -------------------------------------------------------------------

// RestoreFailedStorageRequestProto

// required string arg = 1;
inline bool RestoreFailedStorageRequestProto::_internal_has_arg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RestoreFailedStorageRequestProto::has_arg() const {
  return _internal_has_arg();
}
inline void RestoreFailedStorageRequestProto::clear_arg() {
  arg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RestoreFailedStorageRequestProto::arg() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
  return _internal_arg();
}
inline void RestoreFailedStorageRequestProto::set_arg(const std::string& value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
}
inline std::string* RestoreFailedStorageRequestProto::mutable_arg() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
  return _internal_mutable_arg();
}
inline const std::string& RestoreFailedStorageRequestProto::_internal_arg() const {
  return arg_.GetNoArena();
}
inline void RestoreFailedStorageRequestProto::_internal_set_arg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RestoreFailedStorageRequestProto::set_arg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  arg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
}
inline void RestoreFailedStorageRequestProto::set_arg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
}
inline void RestoreFailedStorageRequestProto::set_arg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  arg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
}
inline std::string* RestoreFailedStorageRequestProto::_internal_mutable_arg() {
  _has_bits_[0] |= 0x00000001u;
  return arg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RestoreFailedStorageRequestProto::release_arg() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
  if (!_internal_has_arg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return arg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RestoreFailedStorageRequestProto::set_allocated_arg(std::string* arg) {
  if (arg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  arg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arg);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RestoreFailedStorageRequestProto.arg)
}

// -------------------------------------------------------------------

// RestoreFailedStorageResponseProto

// required bool result = 1;
inline bool RestoreFailedStorageResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RestoreFailedStorageResponseProto::has_result() const {
  return _internal_has_result();
}
inline void RestoreFailedStorageResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RestoreFailedStorageResponseProto::_internal_result() const {
  return result_;
}
inline bool RestoreFailedStorageResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RestoreFailedStorageResponseProto.result)
  return _internal_result();
}
inline void RestoreFailedStorageResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void RestoreFailedStorageResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RestoreFailedStorageResponseProto.result)
}

// -------------------------------------------------------------------

// RefreshNodesRequestProto

// -------------------------------------------------------------------

// RefreshNodesResponseProto

// -------------------------------------------------------------------

// FinalizeUpgradeRequestProto

// -------------------------------------------------------------------

// FinalizeUpgradeResponseProto

// -------------------------------------------------------------------

// ListCorruptFileBlocksRequestProto

// required string path = 1;
inline bool ListCorruptFileBlocksRequestProto::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListCorruptFileBlocksRequestProto::has_path() const {
  return _internal_has_path();
}
inline void ListCorruptFileBlocksRequestProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListCorruptFileBlocksRequestProto::path() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
  return _internal_path();
}
inline void ListCorruptFileBlocksRequestProto::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
}
inline std::string* ListCorruptFileBlocksRequestProto::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
  return _internal_mutable_path();
}
inline const std::string& ListCorruptFileBlocksRequestProto::_internal_path() const {
  return path_.GetNoArena();
}
inline void ListCorruptFileBlocksRequestProto::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCorruptFileBlocksRequestProto::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
}
inline void ListCorruptFileBlocksRequestProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
}
inline void ListCorruptFileBlocksRequestProto::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
}
inline std::string* ListCorruptFileBlocksRequestProto::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCorruptFileBlocksRequestProto::release_path() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCorruptFileBlocksRequestProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ListCorruptFileBlocksRequestProto.path)
}

// optional string cookie = 2;
inline bool ListCorruptFileBlocksRequestProto::_internal_has_cookie() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListCorruptFileBlocksRequestProto::has_cookie() const {
  return _internal_has_cookie();
}
inline void ListCorruptFileBlocksRequestProto::clear_cookie() {
  cookie_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListCorruptFileBlocksRequestProto::cookie() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
  return _internal_cookie();
}
inline void ListCorruptFileBlocksRequestProto::set_cookie(const std::string& value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
}
inline std::string* ListCorruptFileBlocksRequestProto::mutable_cookie() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
  return _internal_mutable_cookie();
}
inline const std::string& ListCorruptFileBlocksRequestProto::_internal_cookie() const {
  return cookie_.GetNoArena();
}
inline void ListCorruptFileBlocksRequestProto::_internal_set_cookie(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cookie_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCorruptFileBlocksRequestProto::set_cookie(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cookie_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
}
inline void ListCorruptFileBlocksRequestProto::set_cookie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cookie_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
}
inline void ListCorruptFileBlocksRequestProto::set_cookie(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cookie_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
}
inline std::string* ListCorruptFileBlocksRequestProto::_internal_mutable_cookie() {
  _has_bits_[0] |= 0x00000002u;
  return cookie_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCorruptFileBlocksRequestProto::release_cookie() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
  if (!_internal_has_cookie()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cookie_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCorruptFileBlocksRequestProto::set_allocated_cookie(std::string* cookie) {
  if (cookie != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cookie_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cookie);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ListCorruptFileBlocksRequestProto.cookie)
}

// -------------------------------------------------------------------

// ListCorruptFileBlocksResponseProto

// required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
inline bool ListCorruptFileBlocksResponseProto::_internal_has_corrupt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || corrupt_ != nullptr);
  return value;
}
inline bool ListCorruptFileBlocksResponseProto::has_corrupt() const {
  return _internal_has_corrupt();
}
inline const ::Hdfs::Internal::CorruptFileBlocksProto& ListCorruptFileBlocksResponseProto::_internal_corrupt() const {
  const ::Hdfs::Internal::CorruptFileBlocksProto* p = corrupt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CorruptFileBlocksProto*>(
      &::Hdfs::Internal::_CorruptFileBlocksProto_default_instance_);
}
inline const ::Hdfs::Internal::CorruptFileBlocksProto& ListCorruptFileBlocksResponseProto::corrupt() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCorruptFileBlocksResponseProto.corrupt)
  return _internal_corrupt();
}
inline ::Hdfs::Internal::CorruptFileBlocksProto* ListCorruptFileBlocksResponseProto::release_corrupt() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ListCorruptFileBlocksResponseProto.corrupt)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CorruptFileBlocksProto* temp = corrupt_;
  corrupt_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CorruptFileBlocksProto* ListCorruptFileBlocksResponseProto::_internal_mutable_corrupt() {
  _has_bits_[0] |= 0x00000001u;
  if (corrupt_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CorruptFileBlocksProto>(GetArenaNoVirtual());
    corrupt_ = p;
  }
  return corrupt_;
}
inline ::Hdfs::Internal::CorruptFileBlocksProto* ListCorruptFileBlocksResponseProto::mutable_corrupt() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListCorruptFileBlocksResponseProto.corrupt)
  return _internal_mutable_corrupt();
}
inline void ListCorruptFileBlocksResponseProto::set_allocated_corrupt(::Hdfs::Internal::CorruptFileBlocksProto* corrupt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(corrupt_);
  }
  if (corrupt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      corrupt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corrupt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  corrupt_ = corrupt;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ListCorruptFileBlocksResponseProto.corrupt)
}

// -------------------------------------------------------------------

// MetaSaveRequestProto

// required string filename = 1;
inline bool MetaSaveRequestProto::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetaSaveRequestProto::has_filename() const {
  return _internal_has_filename();
}
inline void MetaSaveRequestProto::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetaSaveRequestProto::filename() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.MetaSaveRequestProto.filename)
  return _internal_filename();
}
inline void MetaSaveRequestProto::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.MetaSaveRequestProto.filename)
}
inline std::string* MetaSaveRequestProto::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.MetaSaveRequestProto.filename)
  return _internal_mutable_filename();
}
inline const std::string& MetaSaveRequestProto::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void MetaSaveRequestProto::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MetaSaveRequestProto::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.MetaSaveRequestProto.filename)
}
inline void MetaSaveRequestProto::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.MetaSaveRequestProto.filename)
}
inline void MetaSaveRequestProto::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.MetaSaveRequestProto.filename)
}
inline std::string* MetaSaveRequestProto::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetaSaveRequestProto::release_filename() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.MetaSaveRequestProto.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetaSaveRequestProto::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.MetaSaveRequestProto.filename)
}

// -------------------------------------------------------------------

// MetaSaveResponseProto

// -------------------------------------------------------------------

// GetFileInfoRequestProto

// required string src = 1;
inline bool GetFileInfoRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetFileInfoRequestProto::has_src() const {
  return _internal_has_src();
}
inline void GetFileInfoRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileInfoRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFileInfoRequestProto.src)
  return _internal_src();
}
inline void GetFileInfoRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFileInfoRequestProto.src)
}
inline std::string* GetFileInfoRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetFileInfoRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& GetFileInfoRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void GetFileInfoRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFileInfoRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetFileInfoRequestProto.src)
}
inline void GetFileInfoRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetFileInfoRequestProto.src)
}
inline void GetFileInfoRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetFileInfoRequestProto.src)
}
inline std::string* GetFileInfoRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileInfoRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetFileInfoRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileInfoRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetFileInfoRequestProto.src)
}

// -------------------------------------------------------------------

// GetFileInfoResponseProto

// optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
inline bool GetFileInfoResponseProto::_internal_has_fs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fs_ != nullptr);
  return value;
}
inline bool GetFileInfoResponseProto::has_fs() const {
  return _internal_has_fs();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& GetFileInfoResponseProto::_internal_fs() const {
  const ::Hdfs::Internal::HdfsFileStatusProto* p = fs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::HdfsFileStatusProto*>(
      &::Hdfs::Internal::_HdfsFileStatusProto_default_instance_);
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& GetFileInfoResponseProto::fs() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFileInfoResponseProto.fs)
  return _internal_fs();
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileInfoResponseProto::release_fs() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetFileInfoResponseProto.fs)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::HdfsFileStatusProto* temp = fs_;
  fs_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileInfoResponseProto::_internal_mutable_fs() {
  _has_bits_[0] |= 0x00000001u;
  if (fs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::HdfsFileStatusProto>(GetArenaNoVirtual());
    fs_ = p;
  }
  return fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileInfoResponseProto::mutable_fs() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetFileInfoResponseProto.fs)
  return _internal_mutable_fs();
}
inline void GetFileInfoResponseProto::set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fs_);
  }
  if (fs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fs_ = fs;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetFileInfoResponseProto.fs)
}

// -------------------------------------------------------------------

// IsFileClosedRequestProto

// required string src = 1;
inline bool IsFileClosedRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IsFileClosedRequestProto::has_src() const {
  return _internal_has_src();
}
inline void IsFileClosedRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IsFileClosedRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.IsFileClosedRequestProto.src)
  return _internal_src();
}
inline void IsFileClosedRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.IsFileClosedRequestProto.src)
}
inline std::string* IsFileClosedRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.IsFileClosedRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& IsFileClosedRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void IsFileClosedRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IsFileClosedRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.IsFileClosedRequestProto.src)
}
inline void IsFileClosedRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.IsFileClosedRequestProto.src)
}
inline void IsFileClosedRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.IsFileClosedRequestProto.src)
}
inline std::string* IsFileClosedRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IsFileClosedRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.IsFileClosedRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IsFileClosedRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.IsFileClosedRequestProto.src)
}

// -------------------------------------------------------------------

// IsFileClosedResponseProto

// required bool result = 1;
inline bool IsFileClosedResponseProto::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IsFileClosedResponseProto::has_result() const {
  return _internal_has_result();
}
inline void IsFileClosedResponseProto::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool IsFileClosedResponseProto::_internal_result() const {
  return result_;
}
inline bool IsFileClosedResponseProto::result() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.IsFileClosedResponseProto.result)
  return _internal_result();
}
inline void IsFileClosedResponseProto::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void IsFileClosedResponseProto::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.IsFileClosedResponseProto.result)
}

// -------------------------------------------------------------------

// CacheDirectiveInfoProto

// optional int64 id = 1;
inline bool CacheDirectiveInfoProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CacheDirectiveInfoProto::has_id() const {
  return _internal_has_id();
}
inline void CacheDirectiveInfoProto::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveInfoProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveInfoProto::id() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveInfoProto.id)
  return _internal_id();
}
inline void CacheDirectiveInfoProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CacheDirectiveInfoProto::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveInfoProto.id)
}

// optional string path = 2;
inline bool CacheDirectiveInfoProto::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheDirectiveInfoProto::has_path() const {
  return _internal_has_path();
}
inline void CacheDirectiveInfoProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CacheDirectiveInfoProto::path() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveInfoProto.path)
  return _internal_path();
}
inline void CacheDirectiveInfoProto::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveInfoProto.path)
}
inline std::string* CacheDirectiveInfoProto::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CacheDirectiveInfoProto.path)
  return _internal_mutable_path();
}
inline const std::string& CacheDirectiveInfoProto::_internal_path() const {
  return path_.GetNoArena();
}
inline void CacheDirectiveInfoProto::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CacheDirectiveInfoProto::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CacheDirectiveInfoProto.path)
}
inline void CacheDirectiveInfoProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CacheDirectiveInfoProto.path)
}
inline void CacheDirectiveInfoProto::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CacheDirectiveInfoProto.path)
}
inline std::string* CacheDirectiveInfoProto::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CacheDirectiveInfoProto::release_path() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CacheDirectiveInfoProto.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CacheDirectiveInfoProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CacheDirectiveInfoProto.path)
}

// optional uint32 replication = 3;
inline bool CacheDirectiveInfoProto::_internal_has_replication() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CacheDirectiveInfoProto::has_replication() const {
  return _internal_has_replication();
}
inline void CacheDirectiveInfoProto::clear_replication() {
  replication_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheDirectiveInfoProto::_internal_replication() const {
  return replication_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CacheDirectiveInfoProto::replication() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveInfoProto.replication)
  return _internal_replication();
}
inline void CacheDirectiveInfoProto::_internal_set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  replication_ = value;
}
inline void CacheDirectiveInfoProto::set_replication(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replication(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveInfoProto.replication)
}

// optional string pool = 4;
inline bool CacheDirectiveInfoProto::_internal_has_pool() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacheDirectiveInfoProto::has_pool() const {
  return _internal_has_pool();
}
inline void CacheDirectiveInfoProto::clear_pool() {
  pool_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CacheDirectiveInfoProto::pool() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveInfoProto.pool)
  return _internal_pool();
}
inline void CacheDirectiveInfoProto::set_pool(const std::string& value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveInfoProto.pool)
}
inline std::string* CacheDirectiveInfoProto::mutable_pool() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CacheDirectiveInfoProto.pool)
  return _internal_mutable_pool();
}
inline const std::string& CacheDirectiveInfoProto::_internal_pool() const {
  return pool_.GetNoArena();
}
inline void CacheDirectiveInfoProto::_internal_set_pool(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CacheDirectiveInfoProto::set_pool(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pool_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CacheDirectiveInfoProto.pool)
}
inline void CacheDirectiveInfoProto::set_pool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CacheDirectiveInfoProto.pool)
}
inline void CacheDirectiveInfoProto::set_pool(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CacheDirectiveInfoProto.pool)
}
inline std::string* CacheDirectiveInfoProto::_internal_mutable_pool() {
  _has_bits_[0] |= 0x00000002u;
  return pool_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CacheDirectiveInfoProto::release_pool() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CacheDirectiveInfoProto.pool)
  if (!_internal_has_pool()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pool_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CacheDirectiveInfoProto::set_allocated_pool(std::string* pool) {
  if (pool != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pool_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pool);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CacheDirectiveInfoProto.pool)
}

// optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
inline bool CacheDirectiveInfoProto::_internal_has_expiration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || expiration_ != nullptr);
  return value;
}
inline bool CacheDirectiveInfoProto::has_expiration() const {
  return _internal_has_expiration();
}
inline void CacheDirectiveInfoProto::clear_expiration() {
  if (expiration_ != nullptr) expiration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto& CacheDirectiveInfoProto::_internal_expiration() const {
  const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* p = expiration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto*>(
      &::Hdfs::Internal::_CacheDirectiveInfoExpirationProto_default_instance_);
}
inline const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto& CacheDirectiveInfoProto::expiration() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveInfoProto.expiration)
  return _internal_expiration();
}
inline ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* CacheDirectiveInfoProto::release_expiration() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CacheDirectiveInfoProto.expiration)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* temp = expiration_;
  expiration_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* CacheDirectiveInfoProto::_internal_mutable_expiration() {
  _has_bits_[0] |= 0x00000004u;
  if (expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoExpirationProto>(GetArenaNoVirtual());
    expiration_ = p;
  }
  return expiration_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* CacheDirectiveInfoProto::mutable_expiration() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CacheDirectiveInfoProto.expiration)
  return _internal_mutable_expiration();
}
inline void CacheDirectiveInfoProto::set_allocated_expiration(::Hdfs::Internal::CacheDirectiveInfoExpirationProto* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expiration_;
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CacheDirectiveInfoProto.expiration)
}

// -------------------------------------------------------------------

// CacheDirectiveInfoExpirationProto

// required int64 millis = 1;
inline bool CacheDirectiveInfoExpirationProto::_internal_has_millis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheDirectiveInfoExpirationProto::has_millis() const {
  return _internal_has_millis();
}
inline void CacheDirectiveInfoExpirationProto::clear_millis() {
  millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveInfoExpirationProto::_internal_millis() const {
  return millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveInfoExpirationProto::millis() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveInfoExpirationProto.millis)
  return _internal_millis();
}
inline void CacheDirectiveInfoExpirationProto::_internal_set_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  millis_ = value;
}
inline void CacheDirectiveInfoExpirationProto::set_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_millis(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveInfoExpirationProto.millis)
}

// required bool isRelative = 2;
inline bool CacheDirectiveInfoExpirationProto::_internal_has_isrelative() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacheDirectiveInfoExpirationProto::has_isrelative() const {
  return _internal_has_isrelative();
}
inline void CacheDirectiveInfoExpirationProto::clear_isrelative() {
  isrelative_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CacheDirectiveInfoExpirationProto::_internal_isrelative() const {
  return isrelative_;
}
inline bool CacheDirectiveInfoExpirationProto::isrelative() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveInfoExpirationProto.isRelative)
  return _internal_isrelative();
}
inline void CacheDirectiveInfoExpirationProto::_internal_set_isrelative(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isrelative_ = value;
}
inline void CacheDirectiveInfoExpirationProto::set_isrelative(bool value) {
  _internal_set_isrelative(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveInfoExpirationProto.isRelative)
}

// -------------------------------------------------------------------

// CacheDirectiveStatsProto

// required int64 bytesNeeded = 1;
inline bool CacheDirectiveStatsProto::_internal_has_bytesneeded() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheDirectiveStatsProto::has_bytesneeded() const {
  return _internal_has_bytesneeded();
}
inline void CacheDirectiveStatsProto::clear_bytesneeded() {
  bytesneeded_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::_internal_bytesneeded() const {
  return bytesneeded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::bytesneeded() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveStatsProto.bytesNeeded)
  return _internal_bytesneeded();
}
inline void CacheDirectiveStatsProto::_internal_set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  bytesneeded_ = value;
}
inline void CacheDirectiveStatsProto::set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytesneeded(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveStatsProto.bytesNeeded)
}

// required int64 bytesCached = 2;
inline bool CacheDirectiveStatsProto::_internal_has_bytescached() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacheDirectiveStatsProto::has_bytescached() const {
  return _internal_has_bytescached();
}
inline void CacheDirectiveStatsProto::clear_bytescached() {
  bytescached_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::_internal_bytescached() const {
  return bytescached_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::bytescached() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveStatsProto.bytesCached)
  return _internal_bytescached();
}
inline void CacheDirectiveStatsProto::_internal_set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  bytescached_ = value;
}
inline void CacheDirectiveStatsProto::set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytescached(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveStatsProto.bytesCached)
}

// required int64 filesNeeded = 3;
inline bool CacheDirectiveStatsProto::_internal_has_filesneeded() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CacheDirectiveStatsProto::has_filesneeded() const {
  return _internal_has_filesneeded();
}
inline void CacheDirectiveStatsProto::clear_filesneeded() {
  filesneeded_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::_internal_filesneeded() const {
  return filesneeded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::filesneeded() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveStatsProto.filesNeeded)
  return _internal_filesneeded();
}
inline void CacheDirectiveStatsProto::_internal_set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  filesneeded_ = value;
}
inline void CacheDirectiveStatsProto::set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filesneeded(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveStatsProto.filesNeeded)
}

// required int64 filesCached = 4;
inline bool CacheDirectiveStatsProto::_internal_has_filescached() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CacheDirectiveStatsProto::has_filescached() const {
  return _internal_has_filescached();
}
inline void CacheDirectiveStatsProto::clear_filescached() {
  filescached_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::_internal_filescached() const {
  return filescached_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheDirectiveStatsProto::filescached() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveStatsProto.filesCached)
  return _internal_filescached();
}
inline void CacheDirectiveStatsProto::_internal_set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  filescached_ = value;
}
inline void CacheDirectiveStatsProto::set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filescached(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveStatsProto.filesCached)
}

// required bool hasExpired = 5;
inline bool CacheDirectiveStatsProto::_internal_has_hasexpired() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CacheDirectiveStatsProto::has_hasexpired() const {
  return _internal_has_hasexpired();
}
inline void CacheDirectiveStatsProto::clear_hasexpired() {
  hasexpired_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CacheDirectiveStatsProto::_internal_hasexpired() const {
  return hasexpired_;
}
inline bool CacheDirectiveStatsProto::hasexpired() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveStatsProto.hasExpired)
  return _internal_hasexpired();
}
inline void CacheDirectiveStatsProto::_internal_set_hasexpired(bool value) {
  _has_bits_[0] |= 0x00000010u;
  hasexpired_ = value;
}
inline void CacheDirectiveStatsProto::set_hasexpired(bool value) {
  _internal_set_hasexpired(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CacheDirectiveStatsProto.hasExpired)
}

// -------------------------------------------------------------------

// AddCacheDirectiveRequestProto

// required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
inline bool AddCacheDirectiveRequestProto::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool AddCacheDirectiveRequestProto::has_info() const {
  return _internal_has_info();
}
inline void AddCacheDirectiveRequestProto::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& AddCacheDirectiveRequestProto::_internal_info() const {
  const ::Hdfs::Internal::CacheDirectiveInfoProto* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CacheDirectiveInfoProto*>(
      &::Hdfs::Internal::_CacheDirectiveInfoProto_default_instance_);
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& AddCacheDirectiveRequestProto::info() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddCacheDirectiveRequestProto.info)
  return _internal_info();
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* AddCacheDirectiveRequestProto::release_info() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AddCacheDirectiveRequestProto.info)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* AddCacheDirectiveRequestProto::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoProto>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* AddCacheDirectiveRequestProto::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddCacheDirectiveRequestProto.info)
  return _internal_mutable_info();
}
inline void AddCacheDirectiveRequestProto::set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AddCacheDirectiveRequestProto.info)
}

// optional uint32 cacheFlags = 2;
inline bool AddCacheDirectiveRequestProto::_internal_has_cacheflags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddCacheDirectiveRequestProto::has_cacheflags() const {
  return _internal_has_cacheflags();
}
inline void AddCacheDirectiveRequestProto::clear_cacheflags() {
  cacheflags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddCacheDirectiveRequestProto::_internal_cacheflags() const {
  return cacheflags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddCacheDirectiveRequestProto::cacheflags() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddCacheDirectiveRequestProto.cacheFlags)
  return _internal_cacheflags();
}
inline void AddCacheDirectiveRequestProto::_internal_set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cacheflags_ = value;
}
inline void AddCacheDirectiveRequestProto::set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cacheflags(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AddCacheDirectiveRequestProto.cacheFlags)
}

// -------------------------------------------------------------------

// AddCacheDirectiveResponseProto

// required int64 id = 1;
inline bool AddCacheDirectiveResponseProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddCacheDirectiveResponseProto::has_id() const {
  return _internal_has_id();
}
inline void AddCacheDirectiveResponseProto::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddCacheDirectiveResponseProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddCacheDirectiveResponseProto::id() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddCacheDirectiveResponseProto.id)
  return _internal_id();
}
inline void AddCacheDirectiveResponseProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void AddCacheDirectiveResponseProto::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AddCacheDirectiveResponseProto.id)
}

// -------------------------------------------------------------------

// ModifyCacheDirectiveRequestProto

// required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
inline bool ModifyCacheDirectiveRequestProto::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool ModifyCacheDirectiveRequestProto::has_info() const {
  return _internal_has_info();
}
inline void ModifyCacheDirectiveRequestProto::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& ModifyCacheDirectiveRequestProto::_internal_info() const {
  const ::Hdfs::Internal::CacheDirectiveInfoProto* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CacheDirectiveInfoProto*>(
      &::Hdfs::Internal::_CacheDirectiveInfoProto_default_instance_);
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& ModifyCacheDirectiveRequestProto::info() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ModifyCacheDirectiveRequestProto.info)
  return _internal_info();
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ModifyCacheDirectiveRequestProto::release_info() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ModifyCacheDirectiveRequestProto.info)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ModifyCacheDirectiveRequestProto::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoProto>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ModifyCacheDirectiveRequestProto::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ModifyCacheDirectiveRequestProto.info)
  return _internal_mutable_info();
}
inline void ModifyCacheDirectiveRequestProto::set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ModifyCacheDirectiveRequestProto.info)
}

// optional uint32 cacheFlags = 2;
inline bool ModifyCacheDirectiveRequestProto::_internal_has_cacheflags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModifyCacheDirectiveRequestProto::has_cacheflags() const {
  return _internal_has_cacheflags();
}
inline void ModifyCacheDirectiveRequestProto::clear_cacheflags() {
  cacheflags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyCacheDirectiveRequestProto::_internal_cacheflags() const {
  return cacheflags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyCacheDirectiveRequestProto::cacheflags() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ModifyCacheDirectiveRequestProto.cacheFlags)
  return _internal_cacheflags();
}
inline void ModifyCacheDirectiveRequestProto::_internal_set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cacheflags_ = value;
}
inline void ModifyCacheDirectiveRequestProto::set_cacheflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cacheflags(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ModifyCacheDirectiveRequestProto.cacheFlags)
}

// -------------------------------------------------------------------

// ModifyCacheDirectiveResponseProto

// -------------------------------------------------------------------

// RemoveCacheDirectiveRequestProto

// required int64 id = 1;
inline bool RemoveCacheDirectiveRequestProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoveCacheDirectiveRequestProto::has_id() const {
  return _internal_has_id();
}
inline void RemoveCacheDirectiveRequestProto::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoveCacheDirectiveRequestProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoveCacheDirectiveRequestProto::id() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RemoveCacheDirectiveRequestProto.id)
  return _internal_id();
}
inline void RemoveCacheDirectiveRequestProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void RemoveCacheDirectiveRequestProto::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RemoveCacheDirectiveRequestProto.id)
}

// -------------------------------------------------------------------

// RemoveCacheDirectiveResponseProto

// -------------------------------------------------------------------

// ListCacheDirectivesRequestProto

// required int64 prevId = 1;
inline bool ListCacheDirectivesRequestProto::_internal_has_previd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListCacheDirectivesRequestProto::has_previd() const {
  return _internal_has_previd();
}
inline void ListCacheDirectivesRequestProto::clear_previd() {
  previd_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListCacheDirectivesRequestProto::_internal_previd() const {
  return previd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListCacheDirectivesRequestProto::previd() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCacheDirectivesRequestProto.prevId)
  return _internal_previd();
}
inline void ListCacheDirectivesRequestProto::_internal_set_previd(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  previd_ = value;
}
inline void ListCacheDirectivesRequestProto::set_previd(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_previd(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListCacheDirectivesRequestProto.prevId)
}

// required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
inline bool ListCacheDirectivesRequestProto::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || filter_ != nullptr);
  return value;
}
inline bool ListCacheDirectivesRequestProto::has_filter() const {
  return _internal_has_filter();
}
inline void ListCacheDirectivesRequestProto::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& ListCacheDirectivesRequestProto::_internal_filter() const {
  const ::Hdfs::Internal::CacheDirectiveInfoProto* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CacheDirectiveInfoProto*>(
      &::Hdfs::Internal::_CacheDirectiveInfoProto_default_instance_);
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& ListCacheDirectivesRequestProto::filter() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCacheDirectivesRequestProto.filter)
  return _internal_filter();
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ListCacheDirectivesRequestProto::release_filter() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ListCacheDirectivesRequestProto.filter)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ListCacheDirectivesRequestProto::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoProto>(GetArenaNoVirtual());
    filter_ = p;
  }
  return filter_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ListCacheDirectivesRequestProto::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListCacheDirectivesRequestProto.filter)
  return _internal_mutable_filter();
}
inline void ListCacheDirectivesRequestProto::set_allocated_filter(::Hdfs::Internal::CacheDirectiveInfoProto* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ListCacheDirectivesRequestProto.filter)
}

// -------------------------------------------------------------------

// CacheDirectiveEntryProto

// required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
inline bool CacheDirectiveEntryProto::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool CacheDirectiveEntryProto::has_info() const {
  return _internal_has_info();
}
inline void CacheDirectiveEntryProto::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& CacheDirectiveEntryProto::_internal_info() const {
  const ::Hdfs::Internal::CacheDirectiveInfoProto* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CacheDirectiveInfoProto*>(
      &::Hdfs::Internal::_CacheDirectiveInfoProto_default_instance_);
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& CacheDirectiveEntryProto::info() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveEntryProto.info)
  return _internal_info();
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* CacheDirectiveEntryProto::release_info() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CacheDirectiveEntryProto.info)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* CacheDirectiveEntryProto::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveInfoProto>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* CacheDirectiveEntryProto::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CacheDirectiveEntryProto.info)
  return _internal_mutable_info();
}
inline void CacheDirectiveEntryProto::set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CacheDirectiveEntryProto.info)
}

// required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
inline bool CacheDirectiveEntryProto::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool CacheDirectiveEntryProto::has_stats() const {
  return _internal_has_stats();
}
inline void CacheDirectiveEntryProto::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Hdfs::Internal::CacheDirectiveStatsProto& CacheDirectiveEntryProto::_internal_stats() const {
  const ::Hdfs::Internal::CacheDirectiveStatsProto* p = stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CacheDirectiveStatsProto*>(
      &::Hdfs::Internal::_CacheDirectiveStatsProto_default_instance_);
}
inline const ::Hdfs::Internal::CacheDirectiveStatsProto& CacheDirectiveEntryProto::stats() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CacheDirectiveEntryProto.stats)
  return _internal_stats();
}
inline ::Hdfs::Internal::CacheDirectiveStatsProto* CacheDirectiveEntryProto::release_stats() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CacheDirectiveEntryProto.stats)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::CacheDirectiveStatsProto* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CacheDirectiveStatsProto* CacheDirectiveEntryProto::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CacheDirectiveStatsProto>(GetArenaNoVirtual());
    stats_ = p;
  }
  return stats_;
}
inline ::Hdfs::Internal::CacheDirectiveStatsProto* CacheDirectiveEntryProto::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CacheDirectiveEntryProto.stats)
  return _internal_mutable_stats();
}
inline void CacheDirectiveEntryProto::set_allocated_stats(::Hdfs::Internal::CacheDirectiveStatsProto* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CacheDirectiveEntryProto.stats)
}

// -------------------------------------------------------------------

// ListCacheDirectivesResponseProto

// repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
inline int ListCacheDirectivesResponseProto::_internal_elements_size() const {
  return elements_.size();
}
inline int ListCacheDirectivesResponseProto::elements_size() const {
  return _internal_elements_size();
}
inline void ListCacheDirectivesResponseProto::clear_elements() {
  elements_.Clear();
}
inline ::Hdfs::Internal::CacheDirectiveEntryProto* ListCacheDirectivesResponseProto::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListCacheDirectivesResponseProto.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >*
ListCacheDirectivesResponseProto::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.ListCacheDirectivesResponseProto.elements)
  return &elements_;
}
inline const ::Hdfs::Internal::CacheDirectiveEntryProto& ListCacheDirectivesResponseProto::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::Hdfs::Internal::CacheDirectiveEntryProto& ListCacheDirectivesResponseProto::elements(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCacheDirectivesResponseProto.elements)
  return _internal_elements(index);
}
inline ::Hdfs::Internal::CacheDirectiveEntryProto* ListCacheDirectivesResponseProto::_internal_add_elements() {
  return elements_.Add();
}
inline ::Hdfs::Internal::CacheDirectiveEntryProto* ListCacheDirectivesResponseProto::add_elements() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.ListCacheDirectivesResponseProto.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >&
ListCacheDirectivesResponseProto::elements() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.ListCacheDirectivesResponseProto.elements)
  return elements_;
}

// required bool hasMore = 2;
inline bool ListCacheDirectivesResponseProto::_internal_has_hasmore() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListCacheDirectivesResponseProto::has_hasmore() const {
  return _internal_has_hasmore();
}
inline void ListCacheDirectivesResponseProto::clear_hasmore() {
  hasmore_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ListCacheDirectivesResponseProto::_internal_hasmore() const {
  return hasmore_;
}
inline bool ListCacheDirectivesResponseProto::hasmore() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCacheDirectivesResponseProto.hasMore)
  return _internal_hasmore();
}
inline void ListCacheDirectivesResponseProto::_internal_set_hasmore(bool value) {
  _has_bits_[0] |= 0x00000001u;
  hasmore_ = value;
}
inline void ListCacheDirectivesResponseProto::set_hasmore(bool value) {
  _internal_set_hasmore(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListCacheDirectivesResponseProto.hasMore)
}

// -------------------------------------------------------------------

// CachePoolInfoProto

// optional string poolName = 1;
inline bool CachePoolInfoProto::_internal_has_poolname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CachePoolInfoProto::has_poolname() const {
  return _internal_has_poolname();
}
inline void CachePoolInfoProto::clear_poolname() {
  poolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CachePoolInfoProto::poolname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolInfoProto.poolName)
  return _internal_poolname();
}
inline void CachePoolInfoProto::set_poolname(const std::string& value) {
  _internal_set_poolname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolInfoProto.poolName)
}
inline std::string* CachePoolInfoProto::mutable_poolname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CachePoolInfoProto.poolName)
  return _internal_mutable_poolname();
}
inline const std::string& CachePoolInfoProto::_internal_poolname() const {
  return poolname_.GetNoArena();
}
inline void CachePoolInfoProto::_internal_set_poolname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CachePoolInfoProto::set_poolname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CachePoolInfoProto.poolName)
}
inline void CachePoolInfoProto::set_poolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CachePoolInfoProto.poolName)
}
inline void CachePoolInfoProto::set_poolname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CachePoolInfoProto.poolName)
}
inline std::string* CachePoolInfoProto::_internal_mutable_poolname() {
  _has_bits_[0] |= 0x00000001u;
  return poolname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CachePoolInfoProto::release_poolname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CachePoolInfoProto.poolName)
  if (!_internal_has_poolname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return poolname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CachePoolInfoProto::set_allocated_poolname(std::string* poolname) {
  if (poolname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  poolname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CachePoolInfoProto.poolName)
}

// optional string ownerName = 2;
inline bool CachePoolInfoProto::_internal_has_ownername() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CachePoolInfoProto::has_ownername() const {
  return _internal_has_ownername();
}
inline void CachePoolInfoProto::clear_ownername() {
  ownername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CachePoolInfoProto::ownername() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolInfoProto.ownerName)
  return _internal_ownername();
}
inline void CachePoolInfoProto::set_ownername(const std::string& value) {
  _internal_set_ownername(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolInfoProto.ownerName)
}
inline std::string* CachePoolInfoProto::mutable_ownername() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CachePoolInfoProto.ownerName)
  return _internal_mutable_ownername();
}
inline const std::string& CachePoolInfoProto::_internal_ownername() const {
  return ownername_.GetNoArena();
}
inline void CachePoolInfoProto::_internal_set_ownername(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ownername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CachePoolInfoProto::set_ownername(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ownername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CachePoolInfoProto.ownerName)
}
inline void CachePoolInfoProto::set_ownername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ownername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CachePoolInfoProto.ownerName)
}
inline void CachePoolInfoProto::set_ownername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ownername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CachePoolInfoProto.ownerName)
}
inline std::string* CachePoolInfoProto::_internal_mutable_ownername() {
  _has_bits_[0] |= 0x00000002u;
  return ownername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CachePoolInfoProto::release_ownername() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CachePoolInfoProto.ownerName)
  if (!_internal_has_ownername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ownername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CachePoolInfoProto::set_allocated_ownername(std::string* ownername) {
  if (ownername != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ownername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ownername);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CachePoolInfoProto.ownerName)
}

// optional string groupName = 3;
inline bool CachePoolInfoProto::_internal_has_groupname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CachePoolInfoProto::has_groupname() const {
  return _internal_has_groupname();
}
inline void CachePoolInfoProto::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CachePoolInfoProto::groupname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolInfoProto.groupName)
  return _internal_groupname();
}
inline void CachePoolInfoProto::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolInfoProto.groupName)
}
inline std::string* CachePoolInfoProto::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CachePoolInfoProto.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& CachePoolInfoProto::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void CachePoolInfoProto::_internal_set_groupname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CachePoolInfoProto::set_groupname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CachePoolInfoProto.groupName)
}
inline void CachePoolInfoProto::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CachePoolInfoProto.groupName)
}
inline void CachePoolInfoProto::set_groupname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CachePoolInfoProto.groupName)
}
inline std::string* CachePoolInfoProto::_internal_mutable_groupname() {
  _has_bits_[0] |= 0x00000004u;
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CachePoolInfoProto::release_groupname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CachePoolInfoProto.groupName)
  if (!_internal_has_groupname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return groupname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CachePoolInfoProto::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CachePoolInfoProto.groupName)
}

// optional int32 mode = 4;
inline bool CachePoolInfoProto::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CachePoolInfoProto::has_mode() const {
  return _internal_has_mode();
}
inline void CachePoolInfoProto::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachePoolInfoProto::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachePoolInfoProto::mode() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolInfoProto.mode)
  return _internal_mode();
}
inline void CachePoolInfoProto::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mode_ = value;
}
inline void CachePoolInfoProto::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolInfoProto.mode)
}

// optional int64 limit = 5;
inline bool CachePoolInfoProto::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CachePoolInfoProto::has_limit() const {
  return _internal_has_limit();
}
inline void CachePoolInfoProto::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolInfoProto::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolInfoProto::limit() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolInfoProto.limit)
  return _internal_limit();
}
inline void CachePoolInfoProto::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  limit_ = value;
}
inline void CachePoolInfoProto::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolInfoProto.limit)
}

// optional int64 maxRelativeExpiry = 6;
inline bool CachePoolInfoProto::_internal_has_maxrelativeexpiry() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CachePoolInfoProto::has_maxrelativeexpiry() const {
  return _internal_has_maxrelativeexpiry();
}
inline void CachePoolInfoProto::clear_maxrelativeexpiry() {
  maxrelativeexpiry_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolInfoProto::_internal_maxrelativeexpiry() const {
  return maxrelativeexpiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolInfoProto::maxrelativeexpiry() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolInfoProto.maxRelativeExpiry)
  return _internal_maxrelativeexpiry();
}
inline void CachePoolInfoProto::_internal_set_maxrelativeexpiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  maxrelativeexpiry_ = value;
}
inline void CachePoolInfoProto::set_maxrelativeexpiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxrelativeexpiry(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolInfoProto.maxRelativeExpiry)
}

// -------------------------------------------------------------------

// CachePoolStatsProto

// required int64 bytesNeeded = 1;
inline bool CachePoolStatsProto::_internal_has_bytesneeded() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CachePoolStatsProto::has_bytesneeded() const {
  return _internal_has_bytesneeded();
}
inline void CachePoolStatsProto::clear_bytesneeded() {
  bytesneeded_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::_internal_bytesneeded() const {
  return bytesneeded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::bytesneeded() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolStatsProto.bytesNeeded)
  return _internal_bytesneeded();
}
inline void CachePoolStatsProto::_internal_set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  bytesneeded_ = value;
}
inline void CachePoolStatsProto::set_bytesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytesneeded(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolStatsProto.bytesNeeded)
}

// required int64 bytesCached = 2;
inline bool CachePoolStatsProto::_internal_has_bytescached() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CachePoolStatsProto::has_bytescached() const {
  return _internal_has_bytescached();
}
inline void CachePoolStatsProto::clear_bytescached() {
  bytescached_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::_internal_bytescached() const {
  return bytescached_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::bytescached() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolStatsProto.bytesCached)
  return _internal_bytescached();
}
inline void CachePoolStatsProto::_internal_set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  bytescached_ = value;
}
inline void CachePoolStatsProto::set_bytescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytescached(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolStatsProto.bytesCached)
}

// required int64 bytesOverlimit = 3;
inline bool CachePoolStatsProto::_internal_has_bytesoverlimit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CachePoolStatsProto::has_bytesoverlimit() const {
  return _internal_has_bytesoverlimit();
}
inline void CachePoolStatsProto::clear_bytesoverlimit() {
  bytesoverlimit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::_internal_bytesoverlimit() const {
  return bytesoverlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::bytesoverlimit() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolStatsProto.bytesOverlimit)
  return _internal_bytesoverlimit();
}
inline void CachePoolStatsProto::_internal_set_bytesoverlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  bytesoverlimit_ = value;
}
inline void CachePoolStatsProto::set_bytesoverlimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytesoverlimit(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolStatsProto.bytesOverlimit)
}

// required int64 filesNeeded = 4;
inline bool CachePoolStatsProto::_internal_has_filesneeded() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CachePoolStatsProto::has_filesneeded() const {
  return _internal_has_filesneeded();
}
inline void CachePoolStatsProto::clear_filesneeded() {
  filesneeded_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::_internal_filesneeded() const {
  return filesneeded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::filesneeded() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolStatsProto.filesNeeded)
  return _internal_filesneeded();
}
inline void CachePoolStatsProto::_internal_set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  filesneeded_ = value;
}
inline void CachePoolStatsProto::set_filesneeded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filesneeded(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolStatsProto.filesNeeded)
}

// required int64 filesCached = 5;
inline bool CachePoolStatsProto::_internal_has_filescached() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CachePoolStatsProto::has_filescached() const {
  return _internal_has_filescached();
}
inline void CachePoolStatsProto::clear_filescached() {
  filescached_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::_internal_filescached() const {
  return filescached_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachePoolStatsProto::filescached() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolStatsProto.filesCached)
  return _internal_filescached();
}
inline void CachePoolStatsProto::_internal_set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  filescached_ = value;
}
inline void CachePoolStatsProto::set_filescached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filescached(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CachePoolStatsProto.filesCached)
}

// -------------------------------------------------------------------

// AddCachePoolRequestProto

// required .Hdfs.Internal.CachePoolInfoProto info = 1;
inline bool AddCachePoolRequestProto::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool AddCachePoolRequestProto::has_info() const {
  return _internal_has_info();
}
inline void AddCachePoolRequestProto::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::CachePoolInfoProto& AddCachePoolRequestProto::_internal_info() const {
  const ::Hdfs::Internal::CachePoolInfoProto* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CachePoolInfoProto*>(
      &::Hdfs::Internal::_CachePoolInfoProto_default_instance_);
}
inline const ::Hdfs::Internal::CachePoolInfoProto& AddCachePoolRequestProto::info() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AddCachePoolRequestProto.info)
  return _internal_info();
}
inline ::Hdfs::Internal::CachePoolInfoProto* AddCachePoolRequestProto::release_info() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AddCachePoolRequestProto.info)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CachePoolInfoProto* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CachePoolInfoProto* AddCachePoolRequestProto::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CachePoolInfoProto>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* AddCachePoolRequestProto::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AddCachePoolRequestProto.info)
  return _internal_mutable_info();
}
inline void AddCachePoolRequestProto::set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AddCachePoolRequestProto.info)
}

// -------------------------------------------------------------------

// AddCachePoolResponseProto

// -------------------------------------------------------------------

// ModifyCachePoolRequestProto

// required .Hdfs.Internal.CachePoolInfoProto info = 1;
inline bool ModifyCachePoolRequestProto::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool ModifyCachePoolRequestProto::has_info() const {
  return _internal_has_info();
}
inline void ModifyCachePoolRequestProto::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::CachePoolInfoProto& ModifyCachePoolRequestProto::_internal_info() const {
  const ::Hdfs::Internal::CachePoolInfoProto* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CachePoolInfoProto*>(
      &::Hdfs::Internal::_CachePoolInfoProto_default_instance_);
}
inline const ::Hdfs::Internal::CachePoolInfoProto& ModifyCachePoolRequestProto::info() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ModifyCachePoolRequestProto.info)
  return _internal_info();
}
inline ::Hdfs::Internal::CachePoolInfoProto* ModifyCachePoolRequestProto::release_info() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ModifyCachePoolRequestProto.info)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CachePoolInfoProto* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CachePoolInfoProto* ModifyCachePoolRequestProto::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CachePoolInfoProto>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* ModifyCachePoolRequestProto::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ModifyCachePoolRequestProto.info)
  return _internal_mutable_info();
}
inline void ModifyCachePoolRequestProto::set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ModifyCachePoolRequestProto.info)
}

// -------------------------------------------------------------------

// ModifyCachePoolResponseProto

// -------------------------------------------------------------------

// RemoveCachePoolRequestProto

// required string poolName = 1;
inline bool RemoveCachePoolRequestProto::_internal_has_poolname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoveCachePoolRequestProto::has_poolname() const {
  return _internal_has_poolname();
}
inline void RemoveCachePoolRequestProto::clear_poolname() {
  poolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RemoveCachePoolRequestProto::poolname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
  return _internal_poolname();
}
inline void RemoveCachePoolRequestProto::set_poolname(const std::string& value) {
  _internal_set_poolname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
}
inline std::string* RemoveCachePoolRequestProto::mutable_poolname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
  return _internal_mutable_poolname();
}
inline const std::string& RemoveCachePoolRequestProto::_internal_poolname() const {
  return poolname_.GetNoArena();
}
inline void RemoveCachePoolRequestProto::_internal_set_poolname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveCachePoolRequestProto::set_poolname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
}
inline void RemoveCachePoolRequestProto::set_poolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
}
inline void RemoveCachePoolRequestProto::set_poolname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  poolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
}
inline std::string* RemoveCachePoolRequestProto::_internal_mutable_poolname() {
  _has_bits_[0] |= 0x00000001u;
  return poolname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveCachePoolRequestProto::release_poolname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
  if (!_internal_has_poolname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return poolname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveCachePoolRequestProto::set_allocated_poolname(std::string* poolname) {
  if (poolname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  poolname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RemoveCachePoolRequestProto.poolName)
}

// -------------------------------------------------------------------

// RemoveCachePoolResponseProto

// -------------------------------------------------------------------

// ListCachePoolsRequestProto

// required string prevPoolName = 1;
inline bool ListCachePoolsRequestProto::_internal_has_prevpoolname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListCachePoolsRequestProto::has_prevpoolname() const {
  return _internal_has_prevpoolname();
}
inline void ListCachePoolsRequestProto::clear_prevpoolname() {
  prevpoolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListCachePoolsRequestProto::prevpoolname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
  return _internal_prevpoolname();
}
inline void ListCachePoolsRequestProto::set_prevpoolname(const std::string& value) {
  _internal_set_prevpoolname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
}
inline std::string* ListCachePoolsRequestProto::mutable_prevpoolname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
  return _internal_mutable_prevpoolname();
}
inline const std::string& ListCachePoolsRequestProto::_internal_prevpoolname() const {
  return prevpoolname_.GetNoArena();
}
inline void ListCachePoolsRequestProto::_internal_set_prevpoolname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prevpoolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCachePoolsRequestProto::set_prevpoolname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prevpoolname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
}
inline void ListCachePoolsRequestProto::set_prevpoolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prevpoolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
}
inline void ListCachePoolsRequestProto::set_prevpoolname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prevpoolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
}
inline std::string* ListCachePoolsRequestProto::_internal_mutable_prevpoolname() {
  _has_bits_[0] |= 0x00000001u;
  return prevpoolname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCachePoolsRequestProto::release_prevpoolname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
  if (!_internal_has_prevpoolname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prevpoolname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCachePoolsRequestProto::set_allocated_prevpoolname(std::string* prevpoolname) {
  if (prevpoolname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prevpoolname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevpoolname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.ListCachePoolsRequestProto.prevPoolName)
}

// -------------------------------------------------------------------

// ListCachePoolsResponseProto

// repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
inline int ListCachePoolsResponseProto::_internal_entries_size() const {
  return entries_.size();
}
inline int ListCachePoolsResponseProto::entries_size() const {
  return _internal_entries_size();
}
inline void ListCachePoolsResponseProto::clear_entries() {
  entries_.Clear();
}
inline ::Hdfs::Internal::CachePoolEntryProto* ListCachePoolsResponseProto::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.ListCachePoolsResponseProto.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >*
ListCachePoolsResponseProto::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.ListCachePoolsResponseProto.entries)
  return &entries_;
}
inline const ::Hdfs::Internal::CachePoolEntryProto& ListCachePoolsResponseProto::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Hdfs::Internal::CachePoolEntryProto& ListCachePoolsResponseProto::entries(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCachePoolsResponseProto.entries)
  return _internal_entries(index);
}
inline ::Hdfs::Internal::CachePoolEntryProto* ListCachePoolsResponseProto::_internal_add_entries() {
  return entries_.Add();
}
inline ::Hdfs::Internal::CachePoolEntryProto* ListCachePoolsResponseProto::add_entries() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.ListCachePoolsResponseProto.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >&
ListCachePoolsResponseProto::entries() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.ListCachePoolsResponseProto.entries)
  return entries_;
}

// required bool hasMore = 2;
inline bool ListCachePoolsResponseProto::_internal_has_hasmore() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListCachePoolsResponseProto::has_hasmore() const {
  return _internal_has_hasmore();
}
inline void ListCachePoolsResponseProto::clear_hasmore() {
  hasmore_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ListCachePoolsResponseProto::_internal_hasmore() const {
  return hasmore_;
}
inline bool ListCachePoolsResponseProto::hasmore() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.ListCachePoolsResponseProto.hasMore)
  return _internal_hasmore();
}
inline void ListCachePoolsResponseProto::_internal_set_hasmore(bool value) {
  _has_bits_[0] |= 0x00000001u;
  hasmore_ = value;
}
inline void ListCachePoolsResponseProto::set_hasmore(bool value) {
  _internal_set_hasmore(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.ListCachePoolsResponseProto.hasMore)
}

// -------------------------------------------------------------------

// CachePoolEntryProto

// required .Hdfs.Internal.CachePoolInfoProto info = 1;
inline bool CachePoolEntryProto::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool CachePoolEntryProto::has_info() const {
  return _internal_has_info();
}
inline void CachePoolEntryProto::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::CachePoolInfoProto& CachePoolEntryProto::_internal_info() const {
  const ::Hdfs::Internal::CachePoolInfoProto* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CachePoolInfoProto*>(
      &::Hdfs::Internal::_CachePoolInfoProto_default_instance_);
}
inline const ::Hdfs::Internal::CachePoolInfoProto& CachePoolEntryProto::info() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolEntryProto.info)
  return _internal_info();
}
inline ::Hdfs::Internal::CachePoolInfoProto* CachePoolEntryProto::release_info() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CachePoolEntryProto.info)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::CachePoolInfoProto* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CachePoolInfoProto* CachePoolEntryProto::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CachePoolInfoProto>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* CachePoolEntryProto::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CachePoolEntryProto.info)
  return _internal_mutable_info();
}
inline void CachePoolEntryProto::set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CachePoolEntryProto.info)
}

// required .Hdfs.Internal.CachePoolStatsProto stats = 2;
inline bool CachePoolEntryProto::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool CachePoolEntryProto::has_stats() const {
  return _internal_has_stats();
}
inline void CachePoolEntryProto::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Hdfs::Internal::CachePoolStatsProto& CachePoolEntryProto::_internal_stats() const {
  const ::Hdfs::Internal::CachePoolStatsProto* p = stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::CachePoolStatsProto*>(
      &::Hdfs::Internal::_CachePoolStatsProto_default_instance_);
}
inline const ::Hdfs::Internal::CachePoolStatsProto& CachePoolEntryProto::stats() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CachePoolEntryProto.stats)
  return _internal_stats();
}
inline ::Hdfs::Internal::CachePoolStatsProto* CachePoolEntryProto::release_stats() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CachePoolEntryProto.stats)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::CachePoolStatsProto* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::CachePoolStatsProto* CachePoolEntryProto::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::CachePoolStatsProto>(GetArenaNoVirtual());
    stats_ = p;
  }
  return stats_;
}
inline ::Hdfs::Internal::CachePoolStatsProto* CachePoolEntryProto::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CachePoolEntryProto.stats)
  return _internal_mutable_stats();
}
inline void CachePoolEntryProto::set_allocated_stats(::Hdfs::Internal::CachePoolStatsProto* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CachePoolEntryProto.stats)
}

// -------------------------------------------------------------------

// GetFileLinkInfoRequestProto

// required string src = 1;
inline bool GetFileLinkInfoRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetFileLinkInfoRequestProto::has_src() const {
  return _internal_has_src();
}
inline void GetFileLinkInfoRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileLinkInfoRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
  return _internal_src();
}
inline void GetFileLinkInfoRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
}
inline std::string* GetFileLinkInfoRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& GetFileLinkInfoRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void GetFileLinkInfoRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFileLinkInfoRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
}
inline void GetFileLinkInfoRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
}
inline void GetFileLinkInfoRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
}
inline std::string* GetFileLinkInfoRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileLinkInfoRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileLinkInfoRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetFileLinkInfoRequestProto.src)
}

// -------------------------------------------------------------------

// GetFileLinkInfoResponseProto

// optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
inline bool GetFileLinkInfoResponseProto::_internal_has_fs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fs_ != nullptr);
  return value;
}
inline bool GetFileLinkInfoResponseProto::has_fs() const {
  return _internal_has_fs();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& GetFileLinkInfoResponseProto::_internal_fs() const {
  const ::Hdfs::Internal::HdfsFileStatusProto* p = fs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::HdfsFileStatusProto*>(
      &::Hdfs::Internal::_HdfsFileStatusProto_default_instance_);
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& GetFileLinkInfoResponseProto::fs() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetFileLinkInfoResponseProto.fs)
  return _internal_fs();
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileLinkInfoResponseProto::release_fs() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetFileLinkInfoResponseProto.fs)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::HdfsFileStatusProto* temp = fs_;
  fs_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileLinkInfoResponseProto::_internal_mutable_fs() {
  _has_bits_[0] |= 0x00000001u;
  if (fs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::HdfsFileStatusProto>(GetArenaNoVirtual());
    fs_ = p;
  }
  return fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileLinkInfoResponseProto::mutable_fs() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetFileLinkInfoResponseProto.fs)
  return _internal_mutable_fs();
}
inline void GetFileLinkInfoResponseProto::set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fs_);
  }
  if (fs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fs_ = fs;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetFileLinkInfoResponseProto.fs)
}

// -------------------------------------------------------------------

// GetContentSummaryRequestProto

// required string path = 1;
inline bool GetContentSummaryRequestProto::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetContentSummaryRequestProto::has_path() const {
  return _internal_has_path();
}
inline void GetContentSummaryRequestProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetContentSummaryRequestProto::path() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetContentSummaryRequestProto.path)
  return _internal_path();
}
inline void GetContentSummaryRequestProto::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetContentSummaryRequestProto.path)
}
inline std::string* GetContentSummaryRequestProto::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetContentSummaryRequestProto.path)
  return _internal_mutable_path();
}
inline const std::string& GetContentSummaryRequestProto::_internal_path() const {
  return path_.GetNoArena();
}
inline void GetContentSummaryRequestProto::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetContentSummaryRequestProto::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetContentSummaryRequestProto.path)
}
inline void GetContentSummaryRequestProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetContentSummaryRequestProto.path)
}
inline void GetContentSummaryRequestProto::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetContentSummaryRequestProto.path)
}
inline std::string* GetContentSummaryRequestProto::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetContentSummaryRequestProto::release_path() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetContentSummaryRequestProto.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetContentSummaryRequestProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetContentSummaryRequestProto.path)
}

// -------------------------------------------------------------------

// GetContentSummaryResponseProto

// required .Hdfs.Internal.ContentSummaryProto summary = 1;
inline bool GetContentSummaryResponseProto::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool GetContentSummaryResponseProto::has_summary() const {
  return _internal_has_summary();
}
inline const ::Hdfs::Internal::ContentSummaryProto& GetContentSummaryResponseProto::_internal_summary() const {
  const ::Hdfs::Internal::ContentSummaryProto* p = summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ContentSummaryProto*>(
      &::Hdfs::Internal::_ContentSummaryProto_default_instance_);
}
inline const ::Hdfs::Internal::ContentSummaryProto& GetContentSummaryResponseProto::summary() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetContentSummaryResponseProto.summary)
  return _internal_summary();
}
inline ::Hdfs::Internal::ContentSummaryProto* GetContentSummaryResponseProto::release_summary() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetContentSummaryResponseProto.summary)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::ContentSummaryProto* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ContentSummaryProto* GetContentSummaryResponseProto::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ContentSummaryProto>(GetArenaNoVirtual());
    summary_ = p;
  }
  return summary_;
}
inline ::Hdfs::Internal::ContentSummaryProto* GetContentSummaryResponseProto::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetContentSummaryResponseProto.summary)
  return _internal_mutable_summary();
}
inline void GetContentSummaryResponseProto::set_allocated_summary(::Hdfs::Internal::ContentSummaryProto* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetContentSummaryResponseProto.summary)
}

// -------------------------------------------------------------------

// SetQuotaRequestProto

// required string path = 1;
inline bool SetQuotaRequestProto::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetQuotaRequestProto::has_path() const {
  return _internal_has_path();
}
inline void SetQuotaRequestProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetQuotaRequestProto::path() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetQuotaRequestProto.path)
  return _internal_path();
}
inline void SetQuotaRequestProto::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetQuotaRequestProto.path)
}
inline std::string* SetQuotaRequestProto::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetQuotaRequestProto.path)
  return _internal_mutable_path();
}
inline const std::string& SetQuotaRequestProto::_internal_path() const {
  return path_.GetNoArena();
}
inline void SetQuotaRequestProto::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetQuotaRequestProto::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.SetQuotaRequestProto.path)
}
inline void SetQuotaRequestProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.SetQuotaRequestProto.path)
}
inline void SetQuotaRequestProto::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.SetQuotaRequestProto.path)
}
inline std::string* SetQuotaRequestProto::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetQuotaRequestProto::release_path() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetQuotaRequestProto.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetQuotaRequestProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetQuotaRequestProto.path)
}

// required uint64 namespaceQuota = 2;
inline bool SetQuotaRequestProto::_internal_has_namespacequota() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetQuotaRequestProto::has_namespacequota() const {
  return _internal_has_namespacequota();
}
inline void SetQuotaRequestProto::clear_namespacequota() {
  namespacequota_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetQuotaRequestProto::_internal_namespacequota() const {
  return namespacequota_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetQuotaRequestProto::namespacequota() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetQuotaRequestProto.namespaceQuota)
  return _internal_namespacequota();
}
inline void SetQuotaRequestProto::_internal_set_namespacequota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  namespacequota_ = value;
}
inline void SetQuotaRequestProto::set_namespacequota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_namespacequota(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetQuotaRequestProto.namespaceQuota)
}

// required uint64 diskspaceQuota = 3;
inline bool SetQuotaRequestProto::_internal_has_diskspacequota() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetQuotaRequestProto::has_diskspacequota() const {
  return _internal_has_diskspacequota();
}
inline void SetQuotaRequestProto::clear_diskspacequota() {
  diskspacequota_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetQuotaRequestProto::_internal_diskspacequota() const {
  return diskspacequota_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetQuotaRequestProto::diskspacequota() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetQuotaRequestProto.diskspaceQuota)
  return _internal_diskspacequota();
}
inline void SetQuotaRequestProto::_internal_set_diskspacequota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  diskspacequota_ = value;
}
inline void SetQuotaRequestProto::set_diskspacequota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_diskspacequota(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetQuotaRequestProto.diskspaceQuota)
}

// -------------------------------------------------------------------

// SetQuotaResponseProto

// -------------------------------------------------------------------

// FsyncRequestProto

// required string src = 1;
inline bool FsyncRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FsyncRequestProto::has_src() const {
  return _internal_has_src();
}
inline void FsyncRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FsyncRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.FsyncRequestProto.src)
  return _internal_src();
}
inline void FsyncRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.FsyncRequestProto.src)
}
inline std::string* FsyncRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.FsyncRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& FsyncRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void FsyncRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FsyncRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.FsyncRequestProto.src)
}
inline void FsyncRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.FsyncRequestProto.src)
}
inline void FsyncRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.FsyncRequestProto.src)
}
inline std::string* FsyncRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FsyncRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.FsyncRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FsyncRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.FsyncRequestProto.src)
}

// required string client = 2;
inline bool FsyncRequestProto::_internal_has_client() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FsyncRequestProto::has_client() const {
  return _internal_has_client();
}
inline void FsyncRequestProto::clear_client() {
  client_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FsyncRequestProto::client() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.FsyncRequestProto.client)
  return _internal_client();
}
inline void FsyncRequestProto::set_client(const std::string& value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.FsyncRequestProto.client)
}
inline std::string* FsyncRequestProto::mutable_client() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.FsyncRequestProto.client)
  return _internal_mutable_client();
}
inline const std::string& FsyncRequestProto::_internal_client() const {
  return client_.GetNoArena();
}
inline void FsyncRequestProto::_internal_set_client(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FsyncRequestProto::set_client(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.FsyncRequestProto.client)
}
inline void FsyncRequestProto::set_client(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.FsyncRequestProto.client)
}
inline void FsyncRequestProto::set_client(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.FsyncRequestProto.client)
}
inline std::string* FsyncRequestProto::_internal_mutable_client() {
  _has_bits_[0] |= 0x00000002u;
  return client_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FsyncRequestProto::release_client() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.FsyncRequestProto.client)
  if (!_internal_has_client()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FsyncRequestProto::set_allocated_client(std::string* client) {
  if (client != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.FsyncRequestProto.client)
}

// optional sint64 lastBlockLength = 3 [default = -1];
inline bool FsyncRequestProto::_internal_has_lastblocklength() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FsyncRequestProto::has_lastblocklength() const {
  return _internal_has_lastblocklength();
}
inline void FsyncRequestProto::clear_lastblocklength() {
  lastblocklength_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FsyncRequestProto::_internal_lastblocklength() const {
  return lastblocklength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FsyncRequestProto::lastblocklength() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.FsyncRequestProto.lastBlockLength)
  return _internal_lastblocklength();
}
inline void FsyncRequestProto::_internal_set_lastblocklength(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  lastblocklength_ = value;
}
inline void FsyncRequestProto::set_lastblocklength(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastblocklength(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.FsyncRequestProto.lastBlockLength)
}

// -------------------------------------------------------------------

// FsyncResponseProto

// -------------------------------------------------------------------

// SetTimesRequestProto

// required string src = 1;
inline bool SetTimesRequestProto::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetTimesRequestProto::has_src() const {
  return _internal_has_src();
}
inline void SetTimesRequestProto::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetTimesRequestProto::src() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetTimesRequestProto.src)
  return _internal_src();
}
inline void SetTimesRequestProto::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetTimesRequestProto.src)
}
inline std::string* SetTimesRequestProto::mutable_src() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.SetTimesRequestProto.src)
  return _internal_mutable_src();
}
inline const std::string& SetTimesRequestProto::_internal_src() const {
  return src_.GetNoArena();
}
inline void SetTimesRequestProto::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetTimesRequestProto::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.SetTimesRequestProto.src)
}
inline void SetTimesRequestProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.SetTimesRequestProto.src)
}
inline void SetTimesRequestProto::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.SetTimesRequestProto.src)
}
inline std::string* SetTimesRequestProto::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetTimesRequestProto::release_src() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.SetTimesRequestProto.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetTimesRequestProto::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.SetTimesRequestProto.src)
}

// required uint64 mtime = 2;
inline bool SetTimesRequestProto::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetTimesRequestProto::has_mtime() const {
  return _internal_has_mtime();
}
inline void SetTimesRequestProto::clear_mtime() {
  mtime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTimesRequestProto::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTimesRequestProto::mtime() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetTimesRequestProto.mtime)
  return _internal_mtime();
}
inline void SetTimesRequestProto::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  mtime_ = value;
}
inline void SetTimesRequestProto::set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetTimesRequestProto.mtime)
}

// required uint64 atime = 3;
inline bool SetTimesRequestProto::_internal_has_atime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetTimesRequestProto::has_atime() const {
  return _internal_has_atime();
}
inline void SetTimesRequestProto::clear_atime() {
  atime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTimesRequestProto::_internal_atime() const {
  return atime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTimesRequestProto::atime() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetTimesRequestProto.atime)
  return _internal_atime();
}
inline void SetTimesRequestProto::_internal_set_atime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  atime_ = value;
}
inline void SetTimesRequestProto::set_atime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_atime(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetTimesRequestProto.atime)
}

// -------------------------------------------------------------------

// SetTimesResponseProto

// -------------------------------------------------------------------

// CreateSymlinkRequestProto

// required string target = 1;
inline bool CreateSymlinkRequestProto::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateSymlinkRequestProto::has_target() const {
  return _internal_has_target();
}
inline void CreateSymlinkRequestProto::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateSymlinkRequestProto::target() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateSymlinkRequestProto.target)
  return _internal_target();
}
inline void CreateSymlinkRequestProto::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateSymlinkRequestProto.target)
}
inline std::string* CreateSymlinkRequestProto::mutable_target() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateSymlinkRequestProto.target)
  return _internal_mutable_target();
}
inline const std::string& CreateSymlinkRequestProto::_internal_target() const {
  return target_.GetNoArena();
}
inline void CreateSymlinkRequestProto::_internal_set_target(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSymlinkRequestProto::set_target(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateSymlinkRequestProto.target)
}
inline void CreateSymlinkRequestProto::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateSymlinkRequestProto.target)
}
inline void CreateSymlinkRequestProto::set_target(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateSymlinkRequestProto.target)
}
inline std::string* CreateSymlinkRequestProto::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSymlinkRequestProto::release_target() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateSymlinkRequestProto.target)
  if (!_internal_has_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSymlinkRequestProto::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateSymlinkRequestProto.target)
}

// required string link = 2;
inline bool CreateSymlinkRequestProto::_internal_has_link() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateSymlinkRequestProto::has_link() const {
  return _internal_has_link();
}
inline void CreateSymlinkRequestProto::clear_link() {
  link_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateSymlinkRequestProto::link() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateSymlinkRequestProto.link)
  return _internal_link();
}
inline void CreateSymlinkRequestProto::set_link(const std::string& value) {
  _internal_set_link(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateSymlinkRequestProto.link)
}
inline std::string* CreateSymlinkRequestProto::mutable_link() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateSymlinkRequestProto.link)
  return _internal_mutable_link();
}
inline const std::string& CreateSymlinkRequestProto::_internal_link() const {
  return link_.GetNoArena();
}
inline void CreateSymlinkRequestProto::_internal_set_link(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSymlinkRequestProto::set_link(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  link_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateSymlinkRequestProto.link)
}
inline void CreateSymlinkRequestProto::set_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateSymlinkRequestProto.link)
}
inline void CreateSymlinkRequestProto::set_link(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateSymlinkRequestProto.link)
}
inline std::string* CreateSymlinkRequestProto::_internal_mutable_link() {
  _has_bits_[0] |= 0x00000002u;
  return link_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSymlinkRequestProto::release_link() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateSymlinkRequestProto.link)
  if (!_internal_has_link()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return link_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSymlinkRequestProto::set_allocated_link(std::string* link) {
  if (link != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  link_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateSymlinkRequestProto.link)
}

// required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
inline bool CreateSymlinkRequestProto::_internal_has_dirperm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dirperm_ != nullptr);
  return value;
}
inline bool CreateSymlinkRequestProto::has_dirperm() const {
  return _internal_has_dirperm();
}
inline const ::Hdfs::Internal::FsPermissionProto& CreateSymlinkRequestProto::_internal_dirperm() const {
  const ::Hdfs::Internal::FsPermissionProto* p = dirperm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::FsPermissionProto*>(
      &::Hdfs::Internal::_FsPermissionProto_default_instance_);
}
inline const ::Hdfs::Internal::FsPermissionProto& CreateSymlinkRequestProto::dirperm() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateSymlinkRequestProto.dirPerm)
  return _internal_dirperm();
}
inline ::Hdfs::Internal::FsPermissionProto* CreateSymlinkRequestProto::release_dirperm() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateSymlinkRequestProto.dirPerm)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::FsPermissionProto* temp = dirperm_;
  dirperm_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateSymlinkRequestProto::_internal_mutable_dirperm() {
  _has_bits_[0] |= 0x00000004u;
  if (dirperm_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::FsPermissionProto>(GetArenaNoVirtual());
    dirperm_ = p;
  }
  return dirperm_;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateSymlinkRequestProto::mutable_dirperm() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateSymlinkRequestProto.dirPerm)
  return _internal_mutable_dirperm();
}
inline void CreateSymlinkRequestProto::set_allocated_dirperm(::Hdfs::Internal::FsPermissionProto* dirperm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dirperm_);
  }
  if (dirperm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dirperm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dirperm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dirperm_ = dirperm;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateSymlinkRequestProto.dirPerm)
}

// required bool createParent = 4;
inline bool CreateSymlinkRequestProto::_internal_has_createparent() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateSymlinkRequestProto::has_createparent() const {
  return _internal_has_createparent();
}
inline void CreateSymlinkRequestProto::clear_createparent() {
  createparent_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CreateSymlinkRequestProto::_internal_createparent() const {
  return createparent_;
}
inline bool CreateSymlinkRequestProto::createparent() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateSymlinkRequestProto.createParent)
  return _internal_createparent();
}
inline void CreateSymlinkRequestProto::_internal_set_createparent(bool value) {
  _has_bits_[0] |= 0x00000008u;
  createparent_ = value;
}
inline void CreateSymlinkRequestProto::set_createparent(bool value) {
  _internal_set_createparent(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateSymlinkRequestProto.createParent)
}

// -------------------------------------------------------------------

// CreateSymlinkResponseProto

// -------------------------------------------------------------------

// GetLinkTargetRequestProto

// required string path = 1;
inline bool GetLinkTargetRequestProto::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetLinkTargetRequestProto::has_path() const {
  return _internal_has_path();
}
inline void GetLinkTargetRequestProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetLinkTargetRequestProto::path() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetLinkTargetRequestProto.path)
  return _internal_path();
}
inline void GetLinkTargetRequestProto::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetLinkTargetRequestProto.path)
}
inline std::string* GetLinkTargetRequestProto::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetLinkTargetRequestProto.path)
  return _internal_mutable_path();
}
inline const std::string& GetLinkTargetRequestProto::_internal_path() const {
  return path_.GetNoArena();
}
inline void GetLinkTargetRequestProto::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLinkTargetRequestProto::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetLinkTargetRequestProto.path)
}
inline void GetLinkTargetRequestProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetLinkTargetRequestProto.path)
}
inline void GetLinkTargetRequestProto::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetLinkTargetRequestProto.path)
}
inline std::string* GetLinkTargetRequestProto::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLinkTargetRequestProto::release_path() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetLinkTargetRequestProto.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLinkTargetRequestProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetLinkTargetRequestProto.path)
}

// -------------------------------------------------------------------

// GetLinkTargetResponseProto

// optional string targetPath = 1;
inline bool GetLinkTargetResponseProto::_internal_has_targetpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetLinkTargetResponseProto::has_targetpath() const {
  return _internal_has_targetpath();
}
inline void GetLinkTargetResponseProto::clear_targetpath() {
  targetpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetLinkTargetResponseProto::targetpath() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
  return _internal_targetpath();
}
inline void GetLinkTargetResponseProto::set_targetpath(const std::string& value) {
  _internal_set_targetpath(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
}
inline std::string* GetLinkTargetResponseProto::mutable_targetpath() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
  return _internal_mutable_targetpath();
}
inline const std::string& GetLinkTargetResponseProto::_internal_targetpath() const {
  return targetpath_.GetNoArena();
}
inline void GetLinkTargetResponseProto::_internal_set_targetpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  targetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLinkTargetResponseProto::set_targetpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  targetpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
}
inline void GetLinkTargetResponseProto::set_targetpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  targetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
}
inline void GetLinkTargetResponseProto::set_targetpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  targetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
}
inline std::string* GetLinkTargetResponseProto::_internal_mutable_targetpath() {
  _has_bits_[0] |= 0x00000001u;
  return targetpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLinkTargetResponseProto::release_targetpath() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
  if (!_internal_has_targetpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return targetpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLinkTargetResponseProto::set_allocated_targetpath(std::string* targetpath) {
  if (targetpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  targetpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetpath);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetLinkTargetResponseProto.targetPath)
}

// -------------------------------------------------------------------

// UpdateBlockForPipelineRequestProto

// required .Hdfs.Internal.ExtendedBlockProto block = 1;
inline bool UpdateBlockForPipelineRequestProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool UpdateBlockForPipelineRequestProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdateBlockForPipelineRequestProto::_internal_block() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdateBlockForPipelineRequestProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdateBlockForPipelineRequestProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdateBlockForPipelineRequestProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UpdateBlockForPipelineRequestProto.block)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdateBlockForPipelineRequestProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000002u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdateBlockForPipelineRequestProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdateBlockForPipelineRequestProto.block)
  return _internal_mutable_block();
}
inline void UpdateBlockForPipelineRequestProto::set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UpdateBlockForPipelineRequestProto.block)
}

// required string clientName = 2;
inline bool UpdateBlockForPipelineRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateBlockForPipelineRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void UpdateBlockForPipelineRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateBlockForPipelineRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
  return _internal_clientname();
}
inline void UpdateBlockForPipelineRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
}
inline std::string* UpdateBlockForPipelineRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& UpdateBlockForPipelineRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void UpdateBlockForPipelineRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateBlockForPipelineRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
}
inline void UpdateBlockForPipelineRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
}
inline void UpdateBlockForPipelineRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
}
inline std::string* UpdateBlockForPipelineRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000001u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateBlockForPipelineRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateBlockForPipelineRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UpdateBlockForPipelineRequestProto.clientName)
}

// -------------------------------------------------------------------

// UpdateBlockForPipelineResponseProto

// required .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool UpdateBlockForPipelineResponseProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool UpdateBlockForPipelineResponseProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& UpdateBlockForPipelineResponseProto::_internal_block() const {
  const ::Hdfs::Internal::LocatedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::LocatedBlockProto*>(
      &::Hdfs::Internal::_LocatedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::LocatedBlockProto& UpdateBlockForPipelineResponseProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdateBlockForPipelineResponseProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::LocatedBlockProto* UpdateBlockForPipelineResponseProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UpdateBlockForPipelineResponseProto.block)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::LocatedBlockProto* UpdateBlockForPipelineResponseProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::LocatedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* UpdateBlockForPipelineResponseProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdateBlockForPipelineResponseProto.block)
  return _internal_mutable_block();
}
inline void UpdateBlockForPipelineResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UpdateBlockForPipelineResponseProto.block)
}

// -------------------------------------------------------------------

// UpdatePipelineRequestProto

// required string clientName = 1;
inline bool UpdatePipelineRequestProto::_internal_has_clientname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdatePipelineRequestProto::has_clientname() const {
  return _internal_has_clientname();
}
inline void UpdatePipelineRequestProto::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdatePipelineRequestProto::clientname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
  return _internal_clientname();
}
inline void UpdatePipelineRequestProto::set_clientname(const std::string& value) {
  _internal_set_clientname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
}
inline std::string* UpdatePipelineRequestProto::mutable_clientname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
  return _internal_mutable_clientname();
}
inline const std::string& UpdatePipelineRequestProto::_internal_clientname() const {
  return clientname_.GetNoArena();
}
inline void UpdatePipelineRequestProto::_internal_set_clientname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdatePipelineRequestProto::set_clientname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
}
inline void UpdatePipelineRequestProto::set_clientname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
}
inline void UpdatePipelineRequestProto::set_clientname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
}
inline std::string* UpdatePipelineRequestProto::_internal_mutable_clientname() {
  _has_bits_[0] |= 0x00000001u;
  return clientname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePipelineRequestProto::release_clientname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
  if (!_internal_has_clientname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePipelineRequestProto::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UpdatePipelineRequestProto.clientName)
}

// required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
inline bool UpdatePipelineRequestProto::_internal_has_oldblock() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || oldblock_ != nullptr);
  return value;
}
inline bool UpdatePipelineRequestProto::has_oldblock() const {
  return _internal_has_oldblock();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdatePipelineRequestProto::_internal_oldblock() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = oldblock_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdatePipelineRequestProto::oldblock() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdatePipelineRequestProto.oldBlock)
  return _internal_oldblock();
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::release_oldblock() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UpdatePipelineRequestProto.oldBlock)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = oldblock_;
  oldblock_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::_internal_mutable_oldblock() {
  _has_bits_[0] |= 0x00000002u;
  if (oldblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    oldblock_ = p;
  }
  return oldblock_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::mutable_oldblock() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdatePipelineRequestProto.oldBlock)
  return _internal_mutable_oldblock();
}
inline void UpdatePipelineRequestProto::set_allocated_oldblock(::Hdfs::Internal::ExtendedBlockProto* oldblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldblock_);
  }
  if (oldblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oldblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldblock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  oldblock_ = oldblock;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UpdatePipelineRequestProto.oldBlock)
}

// required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
inline bool UpdatePipelineRequestProto::_internal_has_newblock() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || newblock_ != nullptr);
  return value;
}
inline bool UpdatePipelineRequestProto::has_newblock() const {
  return _internal_has_newblock();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdatePipelineRequestProto::_internal_newblock() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = newblock_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdatePipelineRequestProto::newblock() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdatePipelineRequestProto.newBlock)
  return _internal_newblock();
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::release_newblock() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UpdatePipelineRequestProto.newBlock)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = newblock_;
  newblock_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::_internal_mutable_newblock() {
  _has_bits_[0] |= 0x00000004u;
  if (newblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    newblock_ = p;
  }
  return newblock_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::mutable_newblock() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdatePipelineRequestProto.newBlock)
  return _internal_mutable_newblock();
}
inline void UpdatePipelineRequestProto::set_allocated_newblock(::Hdfs::Internal::ExtendedBlockProto* newblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newblock_);
  }
  if (newblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newblock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  newblock_ = newblock;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UpdatePipelineRequestProto.newBlock)
}

// repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
inline int UpdatePipelineRequestProto::_internal_newnodes_size() const {
  return newnodes_.size();
}
inline int UpdatePipelineRequestProto::newnodes_size() const {
  return _internal_newnodes_size();
}
inline ::Hdfs::Internal::DatanodeIDProto* UpdatePipelineRequestProto::mutable_newnodes(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdatePipelineRequestProto.newNodes)
  return newnodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >*
UpdatePipelineRequestProto::mutable_newnodes() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.UpdatePipelineRequestProto.newNodes)
  return &newnodes_;
}
inline const ::Hdfs::Internal::DatanodeIDProto& UpdatePipelineRequestProto::_internal_newnodes(int index) const {
  return newnodes_.Get(index);
}
inline const ::Hdfs::Internal::DatanodeIDProto& UpdatePipelineRequestProto::newnodes(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdatePipelineRequestProto.newNodes)
  return _internal_newnodes(index);
}
inline ::Hdfs::Internal::DatanodeIDProto* UpdatePipelineRequestProto::_internal_add_newnodes() {
  return newnodes_.Add();
}
inline ::Hdfs::Internal::DatanodeIDProto* UpdatePipelineRequestProto::add_newnodes() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.UpdatePipelineRequestProto.newNodes)
  return _internal_add_newnodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >&
UpdatePipelineRequestProto::newnodes() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.UpdatePipelineRequestProto.newNodes)
  return newnodes_;
}

// repeated string storageIDs = 5;
inline int UpdatePipelineRequestProto::_internal_storageids_size() const {
  return storageids_.size();
}
inline int UpdatePipelineRequestProto::storageids_size() const {
  return _internal_storageids_size();
}
inline void UpdatePipelineRequestProto::clear_storageids() {
  storageids_.Clear();
}
inline std::string* UpdatePipelineRequestProto::add_storageids() {
  // @@protoc_insertion_point(field_add_mutable:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
  return _internal_add_storageids();
}
inline const std::string& UpdatePipelineRequestProto::_internal_storageids(int index) const {
  return storageids_.Get(index);
}
inline const std::string& UpdatePipelineRequestProto::storageids(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
  return _internal_storageids(index);
}
inline std::string* UpdatePipelineRequestProto::mutable_storageids(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
  return storageids_.Mutable(index);
}
inline void UpdatePipelineRequestProto::set_storageids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
  storageids_.Mutable(index)->assign(value);
}
inline void UpdatePipelineRequestProto::set_storageids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
  storageids_.Mutable(index)->assign(std::move(value));
}
inline void UpdatePipelineRequestProto::set_storageids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  storageids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
}
inline void UpdatePipelineRequestProto::set_storageids(int index, const char* value, size_t size) {
  storageids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
}
inline std::string* UpdatePipelineRequestProto::_internal_add_storageids() {
  return storageids_.Add();
}
inline void UpdatePipelineRequestProto::add_storageids(const std::string& value) {
  storageids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
}
inline void UpdatePipelineRequestProto::add_storageids(std::string&& value) {
  storageids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
}
inline void UpdatePipelineRequestProto::add_storageids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  storageids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
}
inline void UpdatePipelineRequestProto::add_storageids(const char* value, size_t size) {
  storageids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdatePipelineRequestProto::storageids() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
  return storageids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdatePipelineRequestProto::mutable_storageids() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.UpdatePipelineRequestProto.storageIDs)
  return &storageids_;
}

// -------------------------------------------------------------------

// UpdatePipelineResponseProto

// -------------------------------------------------------------------

// SetBalancerBandwidthRequestProto

// required int64 bandwidth = 1;
inline bool SetBalancerBandwidthRequestProto::_internal_has_bandwidth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBalancerBandwidthRequestProto::has_bandwidth() const {
  return _internal_has_bandwidth();
}
inline void SetBalancerBandwidthRequestProto::clear_bandwidth() {
  bandwidth_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetBalancerBandwidthRequestProto::_internal_bandwidth() const {
  return bandwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetBalancerBandwidthRequestProto::bandwidth() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.SetBalancerBandwidthRequestProto.bandwidth)
  return _internal_bandwidth();
}
inline void SetBalancerBandwidthRequestProto::_internal_set_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  bandwidth_ = value;
}
inline void SetBalancerBandwidthRequestProto::set_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.SetBalancerBandwidthRequestProto.bandwidth)
}

// -------------------------------------------------------------------

// SetBalancerBandwidthResponseProto

// -------------------------------------------------------------------

// GetDataEncryptionKeyRequestProto

// -------------------------------------------------------------------

// GetDataEncryptionKeyResponseProto

// optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
inline bool GetDataEncryptionKeyResponseProto::_internal_has_dataencryptionkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dataencryptionkey_ != nullptr);
  return value;
}
inline bool GetDataEncryptionKeyResponseProto::has_dataencryptionkey() const {
  return _internal_has_dataencryptionkey();
}
inline const ::Hdfs::Internal::DataEncryptionKeyProto& GetDataEncryptionKeyResponseProto::_internal_dataencryptionkey() const {
  const ::Hdfs::Internal::DataEncryptionKeyProto* p = dataencryptionkey_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::DataEncryptionKeyProto*>(
      &::Hdfs::Internal::_DataEncryptionKeyProto_default_instance_);
}
inline const ::Hdfs::Internal::DataEncryptionKeyProto& GetDataEncryptionKeyResponseProto::dataencryptionkey() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetDataEncryptionKeyResponseProto.dataEncryptionKey)
  return _internal_dataencryptionkey();
}
inline ::Hdfs::Internal::DataEncryptionKeyProto* GetDataEncryptionKeyResponseProto::release_dataencryptionkey() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetDataEncryptionKeyResponseProto.dataEncryptionKey)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::DataEncryptionKeyProto* temp = dataencryptionkey_;
  dataencryptionkey_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::DataEncryptionKeyProto* GetDataEncryptionKeyResponseProto::_internal_mutable_dataencryptionkey() {
  _has_bits_[0] |= 0x00000001u;
  if (dataencryptionkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::DataEncryptionKeyProto>(GetArenaNoVirtual());
    dataencryptionkey_ = p;
  }
  return dataencryptionkey_;
}
inline ::Hdfs::Internal::DataEncryptionKeyProto* GetDataEncryptionKeyResponseProto::mutable_dataencryptionkey() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetDataEncryptionKeyResponseProto.dataEncryptionKey)
  return _internal_mutable_dataencryptionkey();
}
inline void GetDataEncryptionKeyResponseProto::set_allocated_dataencryptionkey(::Hdfs::Internal::DataEncryptionKeyProto* dataencryptionkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataencryptionkey_);
  }
  if (dataencryptionkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dataencryptionkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataencryptionkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dataencryptionkey_ = dataencryptionkey;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetDataEncryptionKeyResponseProto.dataEncryptionKey)
}

// -------------------------------------------------------------------

// CreateSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool CreateSnapshotRequestProto::_internal_has_snapshotroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateSnapshotRequestProto::has_snapshotroot() const {
  return _internal_has_snapshotroot();
}
inline void CreateSnapshotRequestProto::clear_snapshotroot() {
  snapshotroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateSnapshotRequestProto::snapshotroot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
  return _internal_snapshotroot();
}
inline void CreateSnapshotRequestProto::set_snapshotroot(const std::string& value) {
  _internal_set_snapshotroot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
}
inline std::string* CreateSnapshotRequestProto::mutable_snapshotroot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
  return _internal_mutable_snapshotroot();
}
inline const std::string& CreateSnapshotRequestProto::_internal_snapshotroot() const {
  return snapshotroot_.GetNoArena();
}
inline void CreateSnapshotRequestProto::_internal_set_snapshotroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSnapshotRequestProto::set_snapshotroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
}
inline void CreateSnapshotRequestProto::set_snapshotroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
}
inline void CreateSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
}
inline std::string* CreateSnapshotRequestProto::_internal_mutable_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
  return snapshotroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSnapshotRequestProto::release_snapshotroot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
  if (!_internal_has_snapshotroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshotroot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSnapshotRequestProto::set_allocated_snapshotroot(std::string* snapshotroot) {
  if (snapshotroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshotroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotroot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateSnapshotRequestProto.snapshotRoot)
}

// optional string snapshotName = 2;
inline bool CreateSnapshotRequestProto::_internal_has_snapshotname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateSnapshotRequestProto::has_snapshotname() const {
  return _internal_has_snapshotname();
}
inline void CreateSnapshotRequestProto::clear_snapshotname() {
  snapshotname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateSnapshotRequestProto::snapshotname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
  return _internal_snapshotname();
}
inline void CreateSnapshotRequestProto::set_snapshotname(const std::string& value) {
  _internal_set_snapshotname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
}
inline std::string* CreateSnapshotRequestProto::mutable_snapshotname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
  return _internal_mutable_snapshotname();
}
inline const std::string& CreateSnapshotRequestProto::_internal_snapshotname() const {
  return snapshotname_.GetNoArena();
}
inline void CreateSnapshotRequestProto::_internal_set_snapshotname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSnapshotRequestProto::set_snapshotname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
}
inline void CreateSnapshotRequestProto::set_snapshotname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
}
inline void CreateSnapshotRequestProto::set_snapshotname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
}
inline std::string* CreateSnapshotRequestProto::_internal_mutable_snapshotname() {
  _has_bits_[0] |= 0x00000002u;
  return snapshotname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSnapshotRequestProto::release_snapshotname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
  if (!_internal_has_snapshotname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return snapshotname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSnapshotRequestProto::set_allocated_snapshotname(std::string* snapshotname) {
  if (snapshotname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  snapshotname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateSnapshotRequestProto.snapshotName)
}

// -------------------------------------------------------------------

// CreateSnapshotResponseProto

// required string snapshotPath = 1;
inline bool CreateSnapshotResponseProto::_internal_has_snapshotpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateSnapshotResponseProto::has_snapshotpath() const {
  return _internal_has_snapshotpath();
}
inline void CreateSnapshotResponseProto::clear_snapshotpath() {
  snapshotpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateSnapshotResponseProto::snapshotpath() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
  return _internal_snapshotpath();
}
inline void CreateSnapshotResponseProto::set_snapshotpath(const std::string& value) {
  _internal_set_snapshotpath(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
}
inline std::string* CreateSnapshotResponseProto::mutable_snapshotpath() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
  return _internal_mutable_snapshotpath();
}
inline const std::string& CreateSnapshotResponseProto::_internal_snapshotpath() const {
  return snapshotpath_.GetNoArena();
}
inline void CreateSnapshotResponseProto::_internal_set_snapshotpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSnapshotResponseProto::set_snapshotpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
}
inline void CreateSnapshotResponseProto::set_snapshotpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snapshotpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
}
inline void CreateSnapshotResponseProto::set_snapshotpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snapshotpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
}
inline std::string* CreateSnapshotResponseProto::_internal_mutable_snapshotpath() {
  _has_bits_[0] |= 0x00000001u;
  return snapshotpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSnapshotResponseProto::release_snapshotpath() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
  if (!_internal_has_snapshotpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshotpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSnapshotResponseProto::set_allocated_snapshotpath(std::string* snapshotpath) {
  if (snapshotpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshotpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotpath);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CreateSnapshotResponseProto.snapshotPath)
}

// -------------------------------------------------------------------

// RenameSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool RenameSnapshotRequestProto::_internal_has_snapshotroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RenameSnapshotRequestProto::has_snapshotroot() const {
  return _internal_has_snapshotroot();
}
inline void RenameSnapshotRequestProto::clear_snapshotroot() {
  snapshotroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RenameSnapshotRequestProto::snapshotroot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
  return _internal_snapshotroot();
}
inline void RenameSnapshotRequestProto::set_snapshotroot(const std::string& value) {
  _internal_set_snapshotroot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
}
inline std::string* RenameSnapshotRequestProto::mutable_snapshotroot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
  return _internal_mutable_snapshotroot();
}
inline const std::string& RenameSnapshotRequestProto::_internal_snapshotroot() const {
  return snapshotroot_.GetNoArena();
}
inline void RenameSnapshotRequestProto::_internal_set_snapshotroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RenameSnapshotRequestProto::set_snapshotroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
}
inline void RenameSnapshotRequestProto::set_snapshotroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
}
inline void RenameSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
}
inline std::string* RenameSnapshotRequestProto::_internal_mutable_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
  return snapshotroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenameSnapshotRequestProto::release_snapshotroot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
  if (!_internal_has_snapshotroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshotroot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenameSnapshotRequestProto::set_allocated_snapshotroot(std::string* snapshotroot) {
  if (snapshotroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshotroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotroot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RenameSnapshotRequestProto.snapshotRoot)
}

// required string snapshotOldName = 2;
inline bool RenameSnapshotRequestProto::_internal_has_snapshotoldname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RenameSnapshotRequestProto::has_snapshotoldname() const {
  return _internal_has_snapshotoldname();
}
inline void RenameSnapshotRequestProto::clear_snapshotoldname() {
  snapshotoldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RenameSnapshotRequestProto::snapshotoldname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
  return _internal_snapshotoldname();
}
inline void RenameSnapshotRequestProto::set_snapshotoldname(const std::string& value) {
  _internal_set_snapshotoldname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
}
inline std::string* RenameSnapshotRequestProto::mutable_snapshotoldname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
  return _internal_mutable_snapshotoldname();
}
inline const std::string& RenameSnapshotRequestProto::_internal_snapshotoldname() const {
  return snapshotoldname_.GetNoArena();
}
inline void RenameSnapshotRequestProto::_internal_set_snapshotoldname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  snapshotoldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RenameSnapshotRequestProto::set_snapshotoldname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  snapshotoldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
}
inline void RenameSnapshotRequestProto::set_snapshotoldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  snapshotoldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
}
inline void RenameSnapshotRequestProto::set_snapshotoldname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  snapshotoldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
}
inline std::string* RenameSnapshotRequestProto::_internal_mutable_snapshotoldname() {
  _has_bits_[0] |= 0x00000002u;
  return snapshotoldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenameSnapshotRequestProto::release_snapshotoldname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
  if (!_internal_has_snapshotoldname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return snapshotoldname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenameSnapshotRequestProto::set_allocated_snapshotoldname(std::string* snapshotoldname) {
  if (snapshotoldname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  snapshotoldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotoldname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RenameSnapshotRequestProto.snapshotOldName)
}

// required string snapshotNewName = 3;
inline bool RenameSnapshotRequestProto::_internal_has_snapshotnewname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RenameSnapshotRequestProto::has_snapshotnewname() const {
  return _internal_has_snapshotnewname();
}
inline void RenameSnapshotRequestProto::clear_snapshotnewname() {
  snapshotnewname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RenameSnapshotRequestProto::snapshotnewname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
  return _internal_snapshotnewname();
}
inline void RenameSnapshotRequestProto::set_snapshotnewname(const std::string& value) {
  _internal_set_snapshotnewname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
}
inline std::string* RenameSnapshotRequestProto::mutable_snapshotnewname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
  return _internal_mutable_snapshotnewname();
}
inline const std::string& RenameSnapshotRequestProto::_internal_snapshotnewname() const {
  return snapshotnewname_.GetNoArena();
}
inline void RenameSnapshotRequestProto::_internal_set_snapshotnewname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  snapshotnewname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RenameSnapshotRequestProto::set_snapshotnewname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  snapshotnewname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
}
inline void RenameSnapshotRequestProto::set_snapshotnewname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  snapshotnewname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
}
inline void RenameSnapshotRequestProto::set_snapshotnewname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  snapshotnewname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
}
inline std::string* RenameSnapshotRequestProto::_internal_mutable_snapshotnewname() {
  _has_bits_[0] |= 0x00000004u;
  return snapshotnewname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenameSnapshotRequestProto::release_snapshotnewname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
  if (!_internal_has_snapshotnewname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return snapshotnewname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenameSnapshotRequestProto::set_allocated_snapshotnewname(std::string* snapshotnewname) {
  if (snapshotnewname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  snapshotnewname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotnewname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RenameSnapshotRequestProto.snapshotNewName)
}

// -------------------------------------------------------------------

// RenameSnapshotResponseProto

// -------------------------------------------------------------------

// AllowSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool AllowSnapshotRequestProto::_internal_has_snapshotroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowSnapshotRequestProto::has_snapshotroot() const {
  return _internal_has_snapshotroot();
}
inline void AllowSnapshotRequestProto::clear_snapshotroot() {
  snapshotroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AllowSnapshotRequestProto::snapshotroot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
  return _internal_snapshotroot();
}
inline void AllowSnapshotRequestProto::set_snapshotroot(const std::string& value) {
  _internal_set_snapshotroot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
}
inline std::string* AllowSnapshotRequestProto::mutable_snapshotroot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
  return _internal_mutable_snapshotroot();
}
inline const std::string& AllowSnapshotRequestProto::_internal_snapshotroot() const {
  return snapshotroot_.GetNoArena();
}
inline void AllowSnapshotRequestProto::_internal_set_snapshotroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AllowSnapshotRequestProto::set_snapshotroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
}
inline void AllowSnapshotRequestProto::set_snapshotroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
}
inline void AllowSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
}
inline std::string* AllowSnapshotRequestProto::_internal_mutable_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
  return snapshotroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AllowSnapshotRequestProto::release_snapshotroot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
  if (!_internal_has_snapshotroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshotroot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AllowSnapshotRequestProto::set_allocated_snapshotroot(std::string* snapshotroot) {
  if (snapshotroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshotroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotroot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.AllowSnapshotRequestProto.snapshotRoot)
}

// -------------------------------------------------------------------

// AllowSnapshotResponseProto

// -------------------------------------------------------------------

// DisallowSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool DisallowSnapshotRequestProto::_internal_has_snapshotroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisallowSnapshotRequestProto::has_snapshotroot() const {
  return _internal_has_snapshotroot();
}
inline void DisallowSnapshotRequestProto::clear_snapshotroot() {
  snapshotroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisallowSnapshotRequestProto::snapshotroot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
  return _internal_snapshotroot();
}
inline void DisallowSnapshotRequestProto::set_snapshotroot(const std::string& value) {
  _internal_set_snapshotroot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
}
inline std::string* DisallowSnapshotRequestProto::mutable_snapshotroot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
  return _internal_mutable_snapshotroot();
}
inline const std::string& DisallowSnapshotRequestProto::_internal_snapshotroot() const {
  return snapshotroot_.GetNoArena();
}
inline void DisallowSnapshotRequestProto::_internal_set_snapshotroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DisallowSnapshotRequestProto::set_snapshotroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
}
inline void DisallowSnapshotRequestProto::set_snapshotroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
}
inline void DisallowSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
}
inline std::string* DisallowSnapshotRequestProto::_internal_mutable_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
  return snapshotroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisallowSnapshotRequestProto::release_snapshotroot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
  if (!_internal_has_snapshotroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshotroot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisallowSnapshotRequestProto::set_allocated_snapshotroot(std::string* snapshotroot) {
  if (snapshotroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshotroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotroot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.DisallowSnapshotRequestProto.snapshotRoot)
}

// -------------------------------------------------------------------

// DisallowSnapshotResponseProto

// -------------------------------------------------------------------

// DeleteSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool DeleteSnapshotRequestProto::_internal_has_snapshotroot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteSnapshotRequestProto::has_snapshotroot() const {
  return _internal_has_snapshotroot();
}
inline void DeleteSnapshotRequestProto::clear_snapshotroot() {
  snapshotroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteSnapshotRequestProto::snapshotroot() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
  return _internal_snapshotroot();
}
inline void DeleteSnapshotRequestProto::set_snapshotroot(const std::string& value) {
  _internal_set_snapshotroot(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
}
inline std::string* DeleteSnapshotRequestProto::mutable_snapshotroot() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
  return _internal_mutable_snapshotroot();
}
inline const std::string& DeleteSnapshotRequestProto::_internal_snapshotroot() const {
  return snapshotroot_.GetNoArena();
}
inline void DeleteSnapshotRequestProto::_internal_set_snapshotroot(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteSnapshotRequestProto::set_snapshotroot(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
}
inline void DeleteSnapshotRequestProto::set_snapshotroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
}
inline void DeleteSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snapshotroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
}
inline std::string* DeleteSnapshotRequestProto::_internal_mutable_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
  return snapshotroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteSnapshotRequestProto::release_snapshotroot() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
  if (!_internal_has_snapshotroot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshotroot_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSnapshotRequestProto::set_allocated_snapshotroot(std::string* snapshotroot) {
  if (snapshotroot != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshotroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotroot);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotRoot)
}

// required string snapshotName = 2;
inline bool DeleteSnapshotRequestProto::_internal_has_snapshotname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteSnapshotRequestProto::has_snapshotname() const {
  return _internal_has_snapshotname();
}
inline void DeleteSnapshotRequestProto::clear_snapshotname() {
  snapshotname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeleteSnapshotRequestProto::snapshotname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
  return _internal_snapshotname();
}
inline void DeleteSnapshotRequestProto::set_snapshotname(const std::string& value) {
  _internal_set_snapshotname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
}
inline std::string* DeleteSnapshotRequestProto::mutable_snapshotname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
  return _internal_mutable_snapshotname();
}
inline const std::string& DeleteSnapshotRequestProto::_internal_snapshotname() const {
  return snapshotname_.GetNoArena();
}
inline void DeleteSnapshotRequestProto::_internal_set_snapshotname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteSnapshotRequestProto::set_snapshotname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
}
inline void DeleteSnapshotRequestProto::set_snapshotname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
}
inline void DeleteSnapshotRequestProto::set_snapshotname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  snapshotname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
}
inline std::string* DeleteSnapshotRequestProto::_internal_mutable_snapshotname() {
  _has_bits_[0] |= 0x00000002u;
  return snapshotname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteSnapshotRequestProto::release_snapshotname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
  if (!_internal_has_snapshotname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return snapshotname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSnapshotRequestProto::set_allocated_snapshotname(std::string* snapshotname) {
  if (snapshotname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  snapshotname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshotname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.DeleteSnapshotRequestProto.snapshotName)
}

// -------------------------------------------------------------------

// DeleteSnapshotResponseProto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Hdfs::Internal::CreateFlagProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::CreateFlagProto>() {
  return ::Hdfs::Internal::CreateFlagProto_descriptor();
}
template <> struct is_proto_enum< ::Hdfs::Internal::DatanodeReportTypeProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::DatanodeReportTypeProto>() {
  return ::Hdfs::Internal::DatanodeReportTypeProto_descriptor();
}
template <> struct is_proto_enum< ::Hdfs::Internal::SafeModeActionProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::SafeModeActionProto>() {
  return ::Hdfs::Internal::SafeModeActionProto_descriptor();
}
template <> struct is_proto_enum< ::Hdfs::Internal::CacheFlagProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::CacheFlagProto>() {
  return ::Hdfs::Internal::CacheFlagProto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ClientNamenodeProtocol_2eproto
