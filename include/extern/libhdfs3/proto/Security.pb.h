// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Security.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Security_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Security_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Security_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Security_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Security_2eproto;
namespace Hdfs {
namespace Internal {
class CancelDelegationTokenRequestProto;
class CancelDelegationTokenRequestProtoDefaultTypeInternal;
extern CancelDelegationTokenRequestProtoDefaultTypeInternal _CancelDelegationTokenRequestProto_default_instance_;
class CancelDelegationTokenResponseProto;
class CancelDelegationTokenResponseProtoDefaultTypeInternal;
extern CancelDelegationTokenResponseProtoDefaultTypeInternal _CancelDelegationTokenResponseProto_default_instance_;
class GetDelegationTokenRequestProto;
class GetDelegationTokenRequestProtoDefaultTypeInternal;
extern GetDelegationTokenRequestProtoDefaultTypeInternal _GetDelegationTokenRequestProto_default_instance_;
class GetDelegationTokenResponseProto;
class GetDelegationTokenResponseProtoDefaultTypeInternal;
extern GetDelegationTokenResponseProtoDefaultTypeInternal _GetDelegationTokenResponseProto_default_instance_;
class RenewDelegationTokenRequestProto;
class RenewDelegationTokenRequestProtoDefaultTypeInternal;
extern RenewDelegationTokenRequestProtoDefaultTypeInternal _RenewDelegationTokenRequestProto_default_instance_;
class RenewDelegationTokenResponseProto;
class RenewDelegationTokenResponseProtoDefaultTypeInternal;
extern RenewDelegationTokenResponseProtoDefaultTypeInternal _RenewDelegationTokenResponseProto_default_instance_;
class TokenProto;
class TokenProtoDefaultTypeInternal;
extern TokenProtoDefaultTypeInternal _TokenProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template<> ::Hdfs::Internal::CancelDelegationTokenRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CancelDelegationTokenRequestProto>(Arena*);
template<> ::Hdfs::Internal::CancelDelegationTokenResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::CancelDelegationTokenResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetDelegationTokenRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetDelegationTokenRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetDelegationTokenResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetDelegationTokenResponseProto>(Arena*);
template<> ::Hdfs::Internal::RenewDelegationTokenRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenewDelegationTokenRequestProto>(Arena*);
template<> ::Hdfs::Internal::RenewDelegationTokenResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RenewDelegationTokenResponseProto>(Arena*);
template<> ::Hdfs::Internal::TokenProto* Arena::CreateMaybeMessage<::Hdfs::Internal::TokenProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Hdfs {
namespace Internal {

// ===================================================================

class TokenProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.TokenProto) */ {
 public:
  TokenProto();
  virtual ~TokenProto();

  TokenProto(const TokenProto& from);
  TokenProto(TokenProto&& from) noexcept
    : TokenProto() {
    *this = ::std::move(from);
  }

  inline TokenProto& operator=(const TokenProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenProto& operator=(TokenProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenProto* internal_default_instance() {
    return reinterpret_cast<const TokenProto*>(
               &_TokenProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenProto& a, TokenProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenProto* New() const final {
    return CreateMaybeMessage<TokenProto>(nullptr);
  }

  TokenProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenProto& from);
  void MergeFrom(const TokenProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.TokenProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Security_2eproto);
    return ::descriptor_table_Security_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kKindFieldNumber = 3,
    kServiceFieldNumber = 4,
  };
  // required bytes identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const void* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required bytes password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required string kind = 3;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  const std::string& kind() const;
  void set_kind(const std::string& value);
  void set_kind(std::string&& value);
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  std::string* mutable_kind();
  std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // required string service = 4;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.TokenProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  friend struct ::TableStruct_Security_2eproto;
};
// -------------------------------------------------------------------

class GetDelegationTokenRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetDelegationTokenRequestProto) */ {
 public:
  GetDelegationTokenRequestProto();
  virtual ~GetDelegationTokenRequestProto();

  GetDelegationTokenRequestProto(const GetDelegationTokenRequestProto& from);
  GetDelegationTokenRequestProto(GetDelegationTokenRequestProto&& from) noexcept
    : GetDelegationTokenRequestProto() {
    *this = ::std::move(from);
  }

  inline GetDelegationTokenRequestProto& operator=(const GetDelegationTokenRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDelegationTokenRequestProto& operator=(GetDelegationTokenRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDelegationTokenRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDelegationTokenRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetDelegationTokenRequestProto*>(
               &_GetDelegationTokenRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetDelegationTokenRequestProto& a, GetDelegationTokenRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDelegationTokenRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDelegationTokenRequestProto* New() const final {
    return CreateMaybeMessage<GetDelegationTokenRequestProto>(nullptr);
  }

  GetDelegationTokenRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDelegationTokenRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDelegationTokenRequestProto& from);
  void MergeFrom(const GetDelegationTokenRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDelegationTokenRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetDelegationTokenRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Security_2eproto);
    return ::descriptor_table_Security_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRenewerFieldNumber = 1,
  };
  // required string renewer = 1;
  bool has_renewer() const;
  private:
  bool _internal_has_renewer() const;
  public:
  void clear_renewer();
  const std::string& renewer() const;
  void set_renewer(const std::string& value);
  void set_renewer(std::string&& value);
  void set_renewer(const char* value);
  void set_renewer(const char* value, size_t size);
  std::string* mutable_renewer();
  std::string* release_renewer();
  void set_allocated_renewer(std::string* renewer);
  private:
  const std::string& _internal_renewer() const;
  void _internal_set_renewer(const std::string& value);
  std::string* _internal_mutable_renewer();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDelegationTokenRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr renewer_;
  friend struct ::TableStruct_Security_2eproto;
};
// -------------------------------------------------------------------

class GetDelegationTokenResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetDelegationTokenResponseProto) */ {
 public:
  GetDelegationTokenResponseProto();
  virtual ~GetDelegationTokenResponseProto();

  GetDelegationTokenResponseProto(const GetDelegationTokenResponseProto& from);
  GetDelegationTokenResponseProto(GetDelegationTokenResponseProto&& from) noexcept
    : GetDelegationTokenResponseProto() {
    *this = ::std::move(from);
  }

  inline GetDelegationTokenResponseProto& operator=(const GetDelegationTokenResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDelegationTokenResponseProto& operator=(GetDelegationTokenResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDelegationTokenResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDelegationTokenResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetDelegationTokenResponseProto*>(
               &_GetDelegationTokenResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDelegationTokenResponseProto& a, GetDelegationTokenResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDelegationTokenResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDelegationTokenResponseProto* New() const final {
    return CreateMaybeMessage<GetDelegationTokenResponseProto>(nullptr);
  }

  GetDelegationTokenResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDelegationTokenResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDelegationTokenResponseProto& from);
  void MergeFrom(const GetDelegationTokenResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDelegationTokenResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetDelegationTokenResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Security_2eproto);
    return ::descriptor_table_Security_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // optional .Hdfs.Internal.TokenProto token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::Hdfs::Internal::TokenProto& token() const;
  ::Hdfs::Internal::TokenProto* release_token();
  ::Hdfs::Internal::TokenProto* mutable_token();
  void set_allocated_token(::Hdfs::Internal::TokenProto* token);
  private:
  const ::Hdfs::Internal::TokenProto& _internal_token() const;
  ::Hdfs::Internal::TokenProto* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDelegationTokenResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::TokenProto* token_;
  friend struct ::TableStruct_Security_2eproto;
};
// -------------------------------------------------------------------

class RenewDelegationTokenRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenewDelegationTokenRequestProto) */ {
 public:
  RenewDelegationTokenRequestProto();
  virtual ~RenewDelegationTokenRequestProto();

  RenewDelegationTokenRequestProto(const RenewDelegationTokenRequestProto& from);
  RenewDelegationTokenRequestProto(RenewDelegationTokenRequestProto&& from) noexcept
    : RenewDelegationTokenRequestProto() {
    *this = ::std::move(from);
  }

  inline RenewDelegationTokenRequestProto& operator=(const RenewDelegationTokenRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenewDelegationTokenRequestProto& operator=(RenewDelegationTokenRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenewDelegationTokenRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenewDelegationTokenRequestProto* internal_default_instance() {
    return reinterpret_cast<const RenewDelegationTokenRequestProto*>(
               &_RenewDelegationTokenRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RenewDelegationTokenRequestProto& a, RenewDelegationTokenRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenewDelegationTokenRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenewDelegationTokenRequestProto* New() const final {
    return CreateMaybeMessage<RenewDelegationTokenRequestProto>(nullptr);
  }

  RenewDelegationTokenRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenewDelegationTokenRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenewDelegationTokenRequestProto& from);
  void MergeFrom(const RenewDelegationTokenRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenewDelegationTokenRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenewDelegationTokenRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Security_2eproto);
    return ::descriptor_table_Security_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // required .Hdfs.Internal.TokenProto token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::Hdfs::Internal::TokenProto& token() const;
  ::Hdfs::Internal::TokenProto* release_token();
  ::Hdfs::Internal::TokenProto* mutable_token();
  void set_allocated_token(::Hdfs::Internal::TokenProto* token);
  private:
  const ::Hdfs::Internal::TokenProto& _internal_token() const;
  ::Hdfs::Internal::TokenProto* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenewDelegationTokenRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::TokenProto* token_;
  friend struct ::TableStruct_Security_2eproto;
};
// -------------------------------------------------------------------

class RenewDelegationTokenResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RenewDelegationTokenResponseProto) */ {
 public:
  RenewDelegationTokenResponseProto();
  virtual ~RenewDelegationTokenResponseProto();

  RenewDelegationTokenResponseProto(const RenewDelegationTokenResponseProto& from);
  RenewDelegationTokenResponseProto(RenewDelegationTokenResponseProto&& from) noexcept
    : RenewDelegationTokenResponseProto() {
    *this = ::std::move(from);
  }

  inline RenewDelegationTokenResponseProto& operator=(const RenewDelegationTokenResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenewDelegationTokenResponseProto& operator=(RenewDelegationTokenResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenewDelegationTokenResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenewDelegationTokenResponseProto* internal_default_instance() {
    return reinterpret_cast<const RenewDelegationTokenResponseProto*>(
               &_RenewDelegationTokenResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RenewDelegationTokenResponseProto& a, RenewDelegationTokenResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenewDelegationTokenResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenewDelegationTokenResponseProto* New() const final {
    return CreateMaybeMessage<RenewDelegationTokenResponseProto>(nullptr);
  }

  RenewDelegationTokenResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenewDelegationTokenResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenewDelegationTokenResponseProto& from);
  void MergeFrom(const RenewDelegationTokenResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenewDelegationTokenResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RenewDelegationTokenResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Security_2eproto);
    return ::descriptor_table_Security_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewExpiryTimeFieldNumber = 1,
  };
  // required uint64 newExpiryTime = 1;
  bool has_newexpirytime() const;
  private:
  bool _internal_has_newexpirytime() const;
  public:
  void clear_newexpirytime();
  ::PROTOBUF_NAMESPACE_ID::uint64 newexpirytime() const;
  void set_newexpirytime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_newexpirytime() const;
  void _internal_set_newexpirytime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenewDelegationTokenResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 newexpirytime_;
  friend struct ::TableStruct_Security_2eproto;
};
// -------------------------------------------------------------------

class CancelDelegationTokenRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CancelDelegationTokenRequestProto) */ {
 public:
  CancelDelegationTokenRequestProto();
  virtual ~CancelDelegationTokenRequestProto();

  CancelDelegationTokenRequestProto(const CancelDelegationTokenRequestProto& from);
  CancelDelegationTokenRequestProto(CancelDelegationTokenRequestProto&& from) noexcept
    : CancelDelegationTokenRequestProto() {
    *this = ::std::move(from);
  }

  inline CancelDelegationTokenRequestProto& operator=(const CancelDelegationTokenRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelDelegationTokenRequestProto& operator=(CancelDelegationTokenRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelDelegationTokenRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelDelegationTokenRequestProto* internal_default_instance() {
    return reinterpret_cast<const CancelDelegationTokenRequestProto*>(
               &_CancelDelegationTokenRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CancelDelegationTokenRequestProto& a, CancelDelegationTokenRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelDelegationTokenRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelDelegationTokenRequestProto* New() const final {
    return CreateMaybeMessage<CancelDelegationTokenRequestProto>(nullptr);
  }

  CancelDelegationTokenRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelDelegationTokenRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelDelegationTokenRequestProto& from);
  void MergeFrom(const CancelDelegationTokenRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelDelegationTokenRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CancelDelegationTokenRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Security_2eproto);
    return ::descriptor_table_Security_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // required .Hdfs.Internal.TokenProto token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::Hdfs::Internal::TokenProto& token() const;
  ::Hdfs::Internal::TokenProto* release_token();
  ::Hdfs::Internal::TokenProto* mutable_token();
  void set_allocated_token(::Hdfs::Internal::TokenProto* token);
  private:
  const ::Hdfs::Internal::TokenProto& _internal_token() const;
  ::Hdfs::Internal::TokenProto* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CancelDelegationTokenRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::TokenProto* token_;
  friend struct ::TableStruct_Security_2eproto;
};
// -------------------------------------------------------------------

class CancelDelegationTokenResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.CancelDelegationTokenResponseProto) */ {
 public:
  CancelDelegationTokenResponseProto();
  virtual ~CancelDelegationTokenResponseProto();

  CancelDelegationTokenResponseProto(const CancelDelegationTokenResponseProto& from);
  CancelDelegationTokenResponseProto(CancelDelegationTokenResponseProto&& from) noexcept
    : CancelDelegationTokenResponseProto() {
    *this = ::std::move(from);
  }

  inline CancelDelegationTokenResponseProto& operator=(const CancelDelegationTokenResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelDelegationTokenResponseProto& operator=(CancelDelegationTokenResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelDelegationTokenResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelDelegationTokenResponseProto* internal_default_instance() {
    return reinterpret_cast<const CancelDelegationTokenResponseProto*>(
               &_CancelDelegationTokenResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CancelDelegationTokenResponseProto& a, CancelDelegationTokenResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelDelegationTokenResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelDelegationTokenResponseProto* New() const final {
    return CreateMaybeMessage<CancelDelegationTokenResponseProto>(nullptr);
  }

  CancelDelegationTokenResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelDelegationTokenResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelDelegationTokenResponseProto& from);
  void MergeFrom(const CancelDelegationTokenResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelDelegationTokenResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.CancelDelegationTokenResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Security_2eproto);
    return ::descriptor_table_Security_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CancelDelegationTokenResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Security_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenProto

// required bytes identifier = 1;
inline bool TokenProto::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TokenProto::has_identifier() const {
  return _internal_has_identifier();
}
inline void TokenProto::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenProto::identifier() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TokenProto.identifier)
  return _internal_identifier();
}
inline void TokenProto::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TokenProto.identifier)
}
inline std::string* TokenProto::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.TokenProto.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& TokenProto::_internal_identifier() const {
  return identifier_.GetNoArena();
}
inline void TokenProto::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TokenProto::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.TokenProto.identifier)
}
inline void TokenProto::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.TokenProto.identifier)
}
inline void TokenProto::set_identifier(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.TokenProto.identifier)
}
inline std::string* TokenProto::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenProto::release_identifier() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.TokenProto.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenProto::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.TokenProto.identifier)
}

// required bytes password = 2;
inline bool TokenProto::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TokenProto::has_password() const {
  return _internal_has_password();
}
inline void TokenProto::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TokenProto::password() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TokenProto.password)
  return _internal_password();
}
inline void TokenProto::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TokenProto.password)
}
inline std::string* TokenProto::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.TokenProto.password)
  return _internal_mutable_password();
}
inline const std::string& TokenProto::_internal_password() const {
  return password_.GetNoArena();
}
inline void TokenProto::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TokenProto::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.TokenProto.password)
}
inline void TokenProto::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.TokenProto.password)
}
inline void TokenProto::set_password(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.TokenProto.password)
}
inline std::string* TokenProto::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenProto::release_password() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.TokenProto.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenProto::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.TokenProto.password)
}

// required string kind = 3;
inline bool TokenProto::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TokenProto::has_kind() const {
  return _internal_has_kind();
}
inline void TokenProto::clear_kind() {
  kind_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TokenProto::kind() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TokenProto.kind)
  return _internal_kind();
}
inline void TokenProto::set_kind(const std::string& value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TokenProto.kind)
}
inline std::string* TokenProto::mutable_kind() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.TokenProto.kind)
  return _internal_mutable_kind();
}
inline const std::string& TokenProto::_internal_kind() const {
  return kind_.GetNoArena();
}
inline void TokenProto::_internal_set_kind(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  kind_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TokenProto::set_kind(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  kind_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.TokenProto.kind)
}
inline void TokenProto::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  kind_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.TokenProto.kind)
}
inline void TokenProto::set_kind(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  kind_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.TokenProto.kind)
}
inline std::string* TokenProto::_internal_mutable_kind() {
  _has_bits_[0] |= 0x00000004u;
  return kind_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenProto::release_kind() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.TokenProto.kind)
  if (!_internal_has_kind()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return kind_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenProto::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kind_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.TokenProto.kind)
}

// required string service = 4;
inline bool TokenProto::_internal_has_service() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TokenProto::has_service() const {
  return _internal_has_service();
}
inline void TokenProto::clear_service() {
  service_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TokenProto::service() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.TokenProto.service)
  return _internal_service();
}
inline void TokenProto::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.TokenProto.service)
}
inline std::string* TokenProto::mutable_service() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.TokenProto.service)
  return _internal_mutable_service();
}
inline const std::string& TokenProto::_internal_service() const {
  return service_.GetNoArena();
}
inline void TokenProto::_internal_set_service(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TokenProto::set_service(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  service_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.TokenProto.service)
}
inline void TokenProto::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.TokenProto.service)
}
inline void TokenProto::set_service(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.TokenProto.service)
}
inline std::string* TokenProto::_internal_mutable_service() {
  _has_bits_[0] |= 0x00000008u;
  return service_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenProto::release_service() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.TokenProto.service)
  if (!_internal_has_service()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return service_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenProto::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  service_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.TokenProto.service)
}

// -------------------------------------------------------------------

// GetDelegationTokenRequestProto

// required string renewer = 1;
inline bool GetDelegationTokenRequestProto::_internal_has_renewer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetDelegationTokenRequestProto::has_renewer() const {
  return _internal_has_renewer();
}
inline void GetDelegationTokenRequestProto::clear_renewer() {
  renewer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetDelegationTokenRequestProto::renewer() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
  return _internal_renewer();
}
inline void GetDelegationTokenRequestProto::set_renewer(const std::string& value) {
  _internal_set_renewer(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
}
inline std::string* GetDelegationTokenRequestProto::mutable_renewer() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
  return _internal_mutable_renewer();
}
inline const std::string& GetDelegationTokenRequestProto::_internal_renewer() const {
  return renewer_.GetNoArena();
}
inline void GetDelegationTokenRequestProto::_internal_set_renewer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  renewer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDelegationTokenRequestProto::set_renewer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  renewer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
}
inline void GetDelegationTokenRequestProto::set_renewer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  renewer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
}
inline void GetDelegationTokenRequestProto::set_renewer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  renewer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
}
inline std::string* GetDelegationTokenRequestProto::_internal_mutable_renewer() {
  _has_bits_[0] |= 0x00000001u;
  return renewer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDelegationTokenRequestProto::release_renewer() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
  if (!_internal_has_renewer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return renewer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDelegationTokenRequestProto::set_allocated_renewer(std::string* renewer) {
  if (renewer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  renewer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), renewer);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetDelegationTokenRequestProto.renewer)
}

// -------------------------------------------------------------------

// GetDelegationTokenResponseProto

// optional .Hdfs.Internal.TokenProto token = 1;
inline bool GetDelegationTokenResponseProto::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || token_ != nullptr);
  return value;
}
inline bool GetDelegationTokenResponseProto::has_token() const {
  return _internal_has_token();
}
inline void GetDelegationTokenResponseProto::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::TokenProto& GetDelegationTokenResponseProto::_internal_token() const {
  const ::Hdfs::Internal::TokenProto* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::TokenProto*>(
      &::Hdfs::Internal::_TokenProto_default_instance_);
}
inline const ::Hdfs::Internal::TokenProto& GetDelegationTokenResponseProto::token() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetDelegationTokenResponseProto.token)
  return _internal_token();
}
inline ::Hdfs::Internal::TokenProto* GetDelegationTokenResponseProto::release_token() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetDelegationTokenResponseProto.token)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::TokenProto* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::TokenProto* GetDelegationTokenResponseProto::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::TokenProto>(GetArenaNoVirtual());
    token_ = p;
  }
  return token_;
}
inline ::Hdfs::Internal::TokenProto* GetDelegationTokenResponseProto::mutable_token() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetDelegationTokenResponseProto.token)
  return _internal_mutable_token();
}
inline void GetDelegationTokenResponseProto::set_allocated_token(::Hdfs::Internal::TokenProto* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetDelegationTokenResponseProto.token)
}

// -------------------------------------------------------------------

// RenewDelegationTokenRequestProto

// required .Hdfs.Internal.TokenProto token = 1;
inline bool RenewDelegationTokenRequestProto::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || token_ != nullptr);
  return value;
}
inline bool RenewDelegationTokenRequestProto::has_token() const {
  return _internal_has_token();
}
inline void RenewDelegationTokenRequestProto::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::TokenProto& RenewDelegationTokenRequestProto::_internal_token() const {
  const ::Hdfs::Internal::TokenProto* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::TokenProto*>(
      &::Hdfs::Internal::_TokenProto_default_instance_);
}
inline const ::Hdfs::Internal::TokenProto& RenewDelegationTokenRequestProto::token() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenewDelegationTokenRequestProto.token)
  return _internal_token();
}
inline ::Hdfs::Internal::TokenProto* RenewDelegationTokenRequestProto::release_token() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RenewDelegationTokenRequestProto.token)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::TokenProto* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::TokenProto* RenewDelegationTokenRequestProto::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::TokenProto>(GetArenaNoVirtual());
    token_ = p;
  }
  return token_;
}
inline ::Hdfs::Internal::TokenProto* RenewDelegationTokenRequestProto::mutable_token() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RenewDelegationTokenRequestProto.token)
  return _internal_mutable_token();
}
inline void RenewDelegationTokenRequestProto::set_allocated_token(::Hdfs::Internal::TokenProto* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RenewDelegationTokenRequestProto.token)
}

// -------------------------------------------------------------------

// RenewDelegationTokenResponseProto

// required uint64 newExpiryTime = 1;
inline bool RenewDelegationTokenResponseProto::_internal_has_newexpirytime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RenewDelegationTokenResponseProto::has_newexpirytime() const {
  return _internal_has_newexpirytime();
}
inline void RenewDelegationTokenResponseProto::clear_newexpirytime() {
  newexpirytime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RenewDelegationTokenResponseProto::_internal_newexpirytime() const {
  return newexpirytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RenewDelegationTokenResponseProto::newexpirytime() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RenewDelegationTokenResponseProto.newExpiryTime)
  return _internal_newexpirytime();
}
inline void RenewDelegationTokenResponseProto::_internal_set_newexpirytime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  newexpirytime_ = value;
}
inline void RenewDelegationTokenResponseProto::set_newexpirytime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_newexpirytime(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RenewDelegationTokenResponseProto.newExpiryTime)
}

// -------------------------------------------------------------------

// CancelDelegationTokenRequestProto

// required .Hdfs.Internal.TokenProto token = 1;
inline bool CancelDelegationTokenRequestProto::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || token_ != nullptr);
  return value;
}
inline bool CancelDelegationTokenRequestProto::has_token() const {
  return _internal_has_token();
}
inline void CancelDelegationTokenRequestProto::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Hdfs::Internal::TokenProto& CancelDelegationTokenRequestProto::_internal_token() const {
  const ::Hdfs::Internal::TokenProto* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::TokenProto*>(
      &::Hdfs::Internal::_TokenProto_default_instance_);
}
inline const ::Hdfs::Internal::TokenProto& CancelDelegationTokenRequestProto::token() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.CancelDelegationTokenRequestProto.token)
  return _internal_token();
}
inline ::Hdfs::Internal::TokenProto* CancelDelegationTokenRequestProto::release_token() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.CancelDelegationTokenRequestProto.token)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::TokenProto* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::TokenProto* CancelDelegationTokenRequestProto::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::TokenProto>(GetArenaNoVirtual());
    token_ = p;
  }
  return token_;
}
inline ::Hdfs::Internal::TokenProto* CancelDelegationTokenRequestProto::mutable_token() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.CancelDelegationTokenRequestProto.token)
  return _internal_mutable_token();
}
inline void CancelDelegationTokenRequestProto::set_allocated_token(::Hdfs::Internal::TokenProto* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.CancelDelegationTokenRequestProto.token)
}

// -------------------------------------------------------------------

// CancelDelegationTokenResponseProto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Security_2eproto
