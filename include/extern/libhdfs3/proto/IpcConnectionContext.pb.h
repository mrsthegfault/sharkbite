// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IpcConnectionContext.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IpcConnectionContext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IpcConnectionContext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IpcConnectionContext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IpcConnectionContext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IpcConnectionContext_2eproto;
namespace Hdfs {
namespace Internal {
class IpcConnectionContextProto;
class IpcConnectionContextProtoDefaultTypeInternal;
extern IpcConnectionContextProtoDefaultTypeInternal _IpcConnectionContextProto_default_instance_;
class UserInformationProto;
class UserInformationProtoDefaultTypeInternal;
extern UserInformationProtoDefaultTypeInternal _UserInformationProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template<> ::Hdfs::Internal::IpcConnectionContextProto* Arena::CreateMaybeMessage<::Hdfs::Internal::IpcConnectionContextProto>(Arena*);
template<> ::Hdfs::Internal::UserInformationProto* Arena::CreateMaybeMessage<::Hdfs::Internal::UserInformationProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Hdfs {
namespace Internal {

// ===================================================================

class UserInformationProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.UserInformationProto) */ {
 public:
  UserInformationProto();
  virtual ~UserInformationProto();

  UserInformationProto(const UserInformationProto& from);
  UserInformationProto(UserInformationProto&& from) noexcept
    : UserInformationProto() {
    *this = ::std::move(from);
  }

  inline UserInformationProto& operator=(const UserInformationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInformationProto& operator=(UserInformationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInformationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInformationProto* internal_default_instance() {
    return reinterpret_cast<const UserInformationProto*>(
               &_UserInformationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInformationProto& a, UserInformationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInformationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInformationProto* New() const final {
    return CreateMaybeMessage<UserInformationProto>(nullptr);
  }

  UserInformationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInformationProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInformationProto& from);
  void MergeFrom(const UserInformationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInformationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.UserInformationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IpcConnectionContext_2eproto);
    return ::descriptor_table_IpcConnectionContext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectiveUserFieldNumber = 1,
    kRealUserFieldNumber = 2,
  };
  // optional string effectiveUser = 1;
  bool has_effectiveuser() const;
  private:
  bool _internal_has_effectiveuser() const;
  public:
  void clear_effectiveuser();
  const std::string& effectiveuser() const;
  void set_effectiveuser(const std::string& value);
  void set_effectiveuser(std::string&& value);
  void set_effectiveuser(const char* value);
  void set_effectiveuser(const char* value, size_t size);
  std::string* mutable_effectiveuser();
  std::string* release_effectiveuser();
  void set_allocated_effectiveuser(std::string* effectiveuser);
  private:
  const std::string& _internal_effectiveuser() const;
  void _internal_set_effectiveuser(const std::string& value);
  std::string* _internal_mutable_effectiveuser();
  public:

  // optional string realUser = 2;
  bool has_realuser() const;
  private:
  bool _internal_has_realuser() const;
  public:
  void clear_realuser();
  const std::string& realuser() const;
  void set_realuser(const std::string& value);
  void set_realuser(std::string&& value);
  void set_realuser(const char* value);
  void set_realuser(const char* value, size_t size);
  std::string* mutable_realuser();
  std::string* release_realuser();
  void set_allocated_realuser(std::string* realuser);
  private:
  const std::string& _internal_realuser() const;
  void _internal_set_realuser(const std::string& value);
  std::string* _internal_mutable_realuser();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UserInformationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectiveuser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr realuser_;
  friend struct ::TableStruct_IpcConnectionContext_2eproto;
};
// -------------------------------------------------------------------

class IpcConnectionContextProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.IpcConnectionContextProto) */ {
 public:
  IpcConnectionContextProto();
  virtual ~IpcConnectionContextProto();

  IpcConnectionContextProto(const IpcConnectionContextProto& from);
  IpcConnectionContextProto(IpcConnectionContextProto&& from) noexcept
    : IpcConnectionContextProto() {
    *this = ::std::move(from);
  }

  inline IpcConnectionContextProto& operator=(const IpcConnectionContextProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpcConnectionContextProto& operator=(IpcConnectionContextProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpcConnectionContextProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpcConnectionContextProto* internal_default_instance() {
    return reinterpret_cast<const IpcConnectionContextProto*>(
               &_IpcConnectionContextProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IpcConnectionContextProto& a, IpcConnectionContextProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IpcConnectionContextProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpcConnectionContextProto* New() const final {
    return CreateMaybeMessage<IpcConnectionContextProto>(nullptr);
  }

  IpcConnectionContextProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpcConnectionContextProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpcConnectionContextProto& from);
  void MergeFrom(const IpcConnectionContextProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpcConnectionContextProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.IpcConnectionContextProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IpcConnectionContext_2eproto);
    return ::descriptor_table_IpcConnectionContext_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 3,
    kUserInfoFieldNumber = 2,
  };
  // optional string protocol = 3;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // optional .Hdfs.Internal.UserInformationProto userInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::Hdfs::Internal::UserInformationProto& userinfo() const;
  ::Hdfs::Internal::UserInformationProto* release_userinfo();
  ::Hdfs::Internal::UserInformationProto* mutable_userinfo();
  void set_allocated_userinfo(::Hdfs::Internal::UserInformationProto* userinfo);
  private:
  const ::Hdfs::Internal::UserInformationProto& _internal_userinfo() const;
  ::Hdfs::Internal::UserInformationProto* _internal_mutable_userinfo();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.IpcConnectionContextProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::Hdfs::Internal::UserInformationProto* userinfo_;
  friend struct ::TableStruct_IpcConnectionContext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInformationProto

// optional string effectiveUser = 1;
inline bool UserInformationProto::_internal_has_effectiveuser() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInformationProto::has_effectiveuser() const {
  return _internal_has_effectiveuser();
}
inline void UserInformationProto::clear_effectiveuser() {
  effectiveuser_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInformationProto::effectiveuser() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UserInformationProto.effectiveUser)
  return _internal_effectiveuser();
}
inline void UserInformationProto::set_effectiveuser(const std::string& value) {
  _internal_set_effectiveuser(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.UserInformationProto.effectiveUser)
}
inline std::string* UserInformationProto::mutable_effectiveuser() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UserInformationProto.effectiveUser)
  return _internal_mutable_effectiveuser();
}
inline const std::string& UserInformationProto::_internal_effectiveuser() const {
  return effectiveuser_.GetNoArena();
}
inline void UserInformationProto::_internal_set_effectiveuser(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  effectiveuser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInformationProto::set_effectiveuser(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  effectiveuser_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.UserInformationProto.effectiveUser)
}
inline void UserInformationProto::set_effectiveuser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  effectiveuser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.UserInformationProto.effectiveUser)
}
inline void UserInformationProto::set_effectiveuser(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  effectiveuser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.UserInformationProto.effectiveUser)
}
inline std::string* UserInformationProto::_internal_mutable_effectiveuser() {
  _has_bits_[0] |= 0x00000001u;
  return effectiveuser_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInformationProto::release_effectiveuser() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UserInformationProto.effectiveUser)
  if (!_internal_has_effectiveuser()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return effectiveuser_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInformationProto::set_allocated_effectiveuser(std::string* effectiveuser) {
  if (effectiveuser != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effectiveuser_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectiveuser);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UserInformationProto.effectiveUser)
}

// optional string realUser = 2;
inline bool UserInformationProto::_internal_has_realuser() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInformationProto::has_realuser() const {
  return _internal_has_realuser();
}
inline void UserInformationProto::clear_realuser() {
  realuser_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInformationProto::realuser() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.UserInformationProto.realUser)
  return _internal_realuser();
}
inline void UserInformationProto::set_realuser(const std::string& value) {
  _internal_set_realuser(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.UserInformationProto.realUser)
}
inline std::string* UserInformationProto::mutable_realuser() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.UserInformationProto.realUser)
  return _internal_mutable_realuser();
}
inline const std::string& UserInformationProto::_internal_realuser() const {
  return realuser_.GetNoArena();
}
inline void UserInformationProto::_internal_set_realuser(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  realuser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInformationProto::set_realuser(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  realuser_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.UserInformationProto.realUser)
}
inline void UserInformationProto::set_realuser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  realuser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.UserInformationProto.realUser)
}
inline void UserInformationProto::set_realuser(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  realuser_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.UserInformationProto.realUser)
}
inline std::string* UserInformationProto::_internal_mutable_realuser() {
  _has_bits_[0] |= 0x00000002u;
  return realuser_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInformationProto::release_realuser() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.UserInformationProto.realUser)
  if (!_internal_has_realuser()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return realuser_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInformationProto::set_allocated_realuser(std::string* realuser) {
  if (realuser != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  realuser_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), realuser);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.UserInformationProto.realUser)
}

// -------------------------------------------------------------------

// IpcConnectionContextProto

// optional .Hdfs.Internal.UserInformationProto userInfo = 2;
inline bool IpcConnectionContextProto::_internal_has_userinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || userinfo_ != nullptr);
  return value;
}
inline bool IpcConnectionContextProto::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void IpcConnectionContextProto::clear_userinfo() {
  if (userinfo_ != nullptr) userinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Hdfs::Internal::UserInformationProto& IpcConnectionContextProto::_internal_userinfo() const {
  const ::Hdfs::Internal::UserInformationProto* p = userinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::UserInformationProto*>(
      &::Hdfs::Internal::_UserInformationProto_default_instance_);
}
inline const ::Hdfs::Internal::UserInformationProto& IpcConnectionContextProto::userinfo() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.IpcConnectionContextProto.userInfo)
  return _internal_userinfo();
}
inline ::Hdfs::Internal::UserInformationProto* IpcConnectionContextProto::release_userinfo() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.IpcConnectionContextProto.userInfo)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::UserInformationProto* temp = userinfo_;
  userinfo_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::UserInformationProto* IpcConnectionContextProto::_internal_mutable_userinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::UserInformationProto>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  return userinfo_;
}
inline ::Hdfs::Internal::UserInformationProto* IpcConnectionContextProto::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.IpcConnectionContextProto.userInfo)
  return _internal_mutable_userinfo();
}
inline void IpcConnectionContextProto::set_allocated_userinfo(::Hdfs::Internal::UserInformationProto* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.IpcConnectionContextProto.userInfo)
}

// optional string protocol = 3;
inline bool IpcConnectionContextProto::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpcConnectionContextProto::has_protocol() const {
  return _internal_has_protocol();
}
inline void IpcConnectionContextProto::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpcConnectionContextProto::protocol() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.IpcConnectionContextProto.protocol)
  return _internal_protocol();
}
inline void IpcConnectionContextProto::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.IpcConnectionContextProto.protocol)
}
inline std::string* IpcConnectionContextProto::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.IpcConnectionContextProto.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& IpcConnectionContextProto::_internal_protocol() const {
  return protocol_.GetNoArena();
}
inline void IpcConnectionContextProto::_internal_set_protocol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IpcConnectionContextProto::set_protocol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.IpcConnectionContextProto.protocol)
}
inline void IpcConnectionContextProto::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.IpcConnectionContextProto.protocol)
}
inline void IpcConnectionContextProto::set_protocol(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.IpcConnectionContextProto.protocol)
}
inline std::string* IpcConnectionContextProto::_internal_mutable_protocol() {
  _has_bits_[0] |= 0x00000001u;
  return protocol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IpcConnectionContextProto::release_protocol() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.IpcConnectionContextProto.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return protocol_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IpcConnectionContextProto::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  protocol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.IpcConnectionContextProto.protocol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IpcConnectionContext_2eproto
