// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientDatanodeProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientDatanodeProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ClientDatanodeProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "hdfs.pb.h"
#include "Security.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientDatanodeProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientDatanodeProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientDatanodeProtocol_2eproto;
namespace Hdfs {
namespace Internal {
class DeleteBlockPoolRequestProto;
class DeleteBlockPoolRequestProtoDefaultTypeInternal;
extern DeleteBlockPoolRequestProtoDefaultTypeInternal _DeleteBlockPoolRequestProto_default_instance_;
class DeleteBlockPoolResponseProto;
class DeleteBlockPoolResponseProtoDefaultTypeInternal;
extern DeleteBlockPoolResponseProtoDefaultTypeInternal _DeleteBlockPoolResponseProto_default_instance_;
class GetBlockLocalPathInfoRequestProto;
class GetBlockLocalPathInfoRequestProtoDefaultTypeInternal;
extern GetBlockLocalPathInfoRequestProtoDefaultTypeInternal _GetBlockLocalPathInfoRequestProto_default_instance_;
class GetBlockLocalPathInfoResponseProto;
class GetBlockLocalPathInfoResponseProtoDefaultTypeInternal;
extern GetBlockLocalPathInfoResponseProtoDefaultTypeInternal _GetBlockLocalPathInfoResponseProto_default_instance_;
class GetHdfsBlockLocationsRequestProto;
class GetHdfsBlockLocationsRequestProtoDefaultTypeInternal;
extern GetHdfsBlockLocationsRequestProtoDefaultTypeInternal _GetHdfsBlockLocationsRequestProto_default_instance_;
class GetHdfsBlockLocationsResponseProto;
class GetHdfsBlockLocationsResponseProtoDefaultTypeInternal;
extern GetHdfsBlockLocationsResponseProtoDefaultTypeInternal _GetHdfsBlockLocationsResponseProto_default_instance_;
class GetReplicaVisibleLengthRequestProto;
class GetReplicaVisibleLengthRequestProtoDefaultTypeInternal;
extern GetReplicaVisibleLengthRequestProtoDefaultTypeInternal _GetReplicaVisibleLengthRequestProto_default_instance_;
class GetReplicaVisibleLengthResponseProto;
class GetReplicaVisibleLengthResponseProtoDefaultTypeInternal;
extern GetReplicaVisibleLengthResponseProtoDefaultTypeInternal _GetReplicaVisibleLengthResponseProto_default_instance_;
class RefreshNamenodesRequestProto;
class RefreshNamenodesRequestProtoDefaultTypeInternal;
extern RefreshNamenodesRequestProtoDefaultTypeInternal _RefreshNamenodesRequestProto_default_instance_;
class RefreshNamenodesResponseProto;
class RefreshNamenodesResponseProtoDefaultTypeInternal;
extern RefreshNamenodesResponseProtoDefaultTypeInternal _RefreshNamenodesResponseProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template<> ::Hdfs::Internal::DeleteBlockPoolRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteBlockPoolRequestProto>(Arena*);
template<> ::Hdfs::Internal::DeleteBlockPoolResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::DeleteBlockPoolResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetBlockLocalPathInfoRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetBlockLocalPathInfoRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetBlockLocalPathInfoResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetBlockLocalPathInfoResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetHdfsBlockLocationsRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetHdfsBlockLocationsRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetHdfsBlockLocationsResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetHdfsBlockLocationsResponseProto>(Arena*);
template<> ::Hdfs::Internal::GetReplicaVisibleLengthRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetReplicaVisibleLengthRequestProto>(Arena*);
template<> ::Hdfs::Internal::GetReplicaVisibleLengthResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::GetReplicaVisibleLengthResponseProto>(Arena*);
template<> ::Hdfs::Internal::RefreshNamenodesRequestProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RefreshNamenodesRequestProto>(Arena*);
template<> ::Hdfs::Internal::RefreshNamenodesResponseProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RefreshNamenodesResponseProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Hdfs {
namespace Internal {

// ===================================================================

class GetReplicaVisibleLengthRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetReplicaVisibleLengthRequestProto) */ {
 public:
  GetReplicaVisibleLengthRequestProto();
  virtual ~GetReplicaVisibleLengthRequestProto();

  GetReplicaVisibleLengthRequestProto(const GetReplicaVisibleLengthRequestProto& from);
  GetReplicaVisibleLengthRequestProto(GetReplicaVisibleLengthRequestProto&& from) noexcept
    : GetReplicaVisibleLengthRequestProto() {
    *this = ::std::move(from);
  }

  inline GetReplicaVisibleLengthRequestProto& operator=(const GetReplicaVisibleLengthRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReplicaVisibleLengthRequestProto& operator=(GetReplicaVisibleLengthRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReplicaVisibleLengthRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReplicaVisibleLengthRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetReplicaVisibleLengthRequestProto*>(
               &_GetReplicaVisibleLengthRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetReplicaVisibleLengthRequestProto& a, GetReplicaVisibleLengthRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReplicaVisibleLengthRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReplicaVisibleLengthRequestProto* New() const final {
    return CreateMaybeMessage<GetReplicaVisibleLengthRequestProto>(nullptr);
  }

  GetReplicaVisibleLengthRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReplicaVisibleLengthRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReplicaVisibleLengthRequestProto& from);
  void MergeFrom(const GetReplicaVisibleLengthRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReplicaVisibleLengthRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetReplicaVisibleLengthRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::ExtendedBlockProto& block() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_block();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_block() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetReplicaVisibleLengthRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::ExtendedBlockProto* block_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetReplicaVisibleLengthResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetReplicaVisibleLengthResponseProto) */ {
 public:
  GetReplicaVisibleLengthResponseProto();
  virtual ~GetReplicaVisibleLengthResponseProto();

  GetReplicaVisibleLengthResponseProto(const GetReplicaVisibleLengthResponseProto& from);
  GetReplicaVisibleLengthResponseProto(GetReplicaVisibleLengthResponseProto&& from) noexcept
    : GetReplicaVisibleLengthResponseProto() {
    *this = ::std::move(from);
  }

  inline GetReplicaVisibleLengthResponseProto& operator=(const GetReplicaVisibleLengthResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReplicaVisibleLengthResponseProto& operator=(GetReplicaVisibleLengthResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReplicaVisibleLengthResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReplicaVisibleLengthResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetReplicaVisibleLengthResponseProto*>(
               &_GetReplicaVisibleLengthResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetReplicaVisibleLengthResponseProto& a, GetReplicaVisibleLengthResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReplicaVisibleLengthResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReplicaVisibleLengthResponseProto* New() const final {
    return CreateMaybeMessage<GetReplicaVisibleLengthResponseProto>(nullptr);
  }

  GetReplicaVisibleLengthResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReplicaVisibleLengthResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReplicaVisibleLengthResponseProto& from);
  void MergeFrom(const GetReplicaVisibleLengthResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReplicaVisibleLengthResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetReplicaVisibleLengthResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
  };
  // required uint64 length = 1;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetReplicaVisibleLengthResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RefreshNamenodesRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RefreshNamenodesRequestProto) */ {
 public:
  RefreshNamenodesRequestProto();
  virtual ~RefreshNamenodesRequestProto();

  RefreshNamenodesRequestProto(const RefreshNamenodesRequestProto& from);
  RefreshNamenodesRequestProto(RefreshNamenodesRequestProto&& from) noexcept
    : RefreshNamenodesRequestProto() {
    *this = ::std::move(from);
  }

  inline RefreshNamenodesRequestProto& operator=(const RefreshNamenodesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshNamenodesRequestProto& operator=(RefreshNamenodesRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshNamenodesRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshNamenodesRequestProto* internal_default_instance() {
    return reinterpret_cast<const RefreshNamenodesRequestProto*>(
               &_RefreshNamenodesRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RefreshNamenodesRequestProto& a, RefreshNamenodesRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshNamenodesRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshNamenodesRequestProto* New() const final {
    return CreateMaybeMessage<RefreshNamenodesRequestProto>(nullptr);
  }

  RefreshNamenodesRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshNamenodesRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshNamenodesRequestProto& from);
  void MergeFrom(const RefreshNamenodesRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshNamenodesRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RefreshNamenodesRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RefreshNamenodesRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class RefreshNamenodesResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RefreshNamenodesResponseProto) */ {
 public:
  RefreshNamenodesResponseProto();
  virtual ~RefreshNamenodesResponseProto();

  RefreshNamenodesResponseProto(const RefreshNamenodesResponseProto& from);
  RefreshNamenodesResponseProto(RefreshNamenodesResponseProto&& from) noexcept
    : RefreshNamenodesResponseProto() {
    *this = ::std::move(from);
  }

  inline RefreshNamenodesResponseProto& operator=(const RefreshNamenodesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshNamenodesResponseProto& operator=(RefreshNamenodesResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshNamenodesResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshNamenodesResponseProto* internal_default_instance() {
    return reinterpret_cast<const RefreshNamenodesResponseProto*>(
               &_RefreshNamenodesResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RefreshNamenodesResponseProto& a, RefreshNamenodesResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshNamenodesResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshNamenodesResponseProto* New() const final {
    return CreateMaybeMessage<RefreshNamenodesResponseProto>(nullptr);
  }

  RefreshNamenodesResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshNamenodesResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshNamenodesResponseProto& from);
  void MergeFrom(const RefreshNamenodesResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshNamenodesResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RefreshNamenodesResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RefreshNamenodesResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeleteBlockPoolRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DeleteBlockPoolRequestProto) */ {
 public:
  DeleteBlockPoolRequestProto();
  virtual ~DeleteBlockPoolRequestProto();

  DeleteBlockPoolRequestProto(const DeleteBlockPoolRequestProto& from);
  DeleteBlockPoolRequestProto(DeleteBlockPoolRequestProto&& from) noexcept
    : DeleteBlockPoolRequestProto() {
    *this = ::std::move(from);
  }

  inline DeleteBlockPoolRequestProto& operator=(const DeleteBlockPoolRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBlockPoolRequestProto& operator=(DeleteBlockPoolRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBlockPoolRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBlockPoolRequestProto* internal_default_instance() {
    return reinterpret_cast<const DeleteBlockPoolRequestProto*>(
               &_DeleteBlockPoolRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteBlockPoolRequestProto& a, DeleteBlockPoolRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBlockPoolRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBlockPoolRequestProto* New() const final {
    return CreateMaybeMessage<DeleteBlockPoolRequestProto>(nullptr);
  }

  DeleteBlockPoolRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBlockPoolRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBlockPoolRequestProto& from);
  void MergeFrom(const DeleteBlockPoolRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBlockPoolRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DeleteBlockPoolRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockPoolFieldNumber = 1,
    kForceFieldNumber = 2,
  };
  // required string blockPool = 1;
  bool has_blockpool() const;
  private:
  bool _internal_has_blockpool() const;
  public:
  void clear_blockpool();
  const std::string& blockpool() const;
  void set_blockpool(const std::string& value);
  void set_blockpool(std::string&& value);
  void set_blockpool(const char* value);
  void set_blockpool(const char* value, size_t size);
  std::string* mutable_blockpool();
  std::string* release_blockpool();
  void set_allocated_blockpool(std::string* blockpool);
  private:
  const std::string& _internal_blockpool() const;
  void _internal_set_blockpool(const std::string& value);
  std::string* _internal_mutable_blockpool();
  public:

  // required bool force = 2;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteBlockPoolRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockpool_;
  bool force_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeleteBlockPoolResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.DeleteBlockPoolResponseProto) */ {
 public:
  DeleteBlockPoolResponseProto();
  virtual ~DeleteBlockPoolResponseProto();

  DeleteBlockPoolResponseProto(const DeleteBlockPoolResponseProto& from);
  DeleteBlockPoolResponseProto(DeleteBlockPoolResponseProto&& from) noexcept
    : DeleteBlockPoolResponseProto() {
    *this = ::std::move(from);
  }

  inline DeleteBlockPoolResponseProto& operator=(const DeleteBlockPoolResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBlockPoolResponseProto& operator=(DeleteBlockPoolResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBlockPoolResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBlockPoolResponseProto* internal_default_instance() {
    return reinterpret_cast<const DeleteBlockPoolResponseProto*>(
               &_DeleteBlockPoolResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteBlockPoolResponseProto& a, DeleteBlockPoolResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBlockPoolResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBlockPoolResponseProto* New() const final {
    return CreateMaybeMessage<DeleteBlockPoolResponseProto>(nullptr);
  }

  DeleteBlockPoolResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBlockPoolResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBlockPoolResponseProto& from);
  void MergeFrom(const DeleteBlockPoolResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBlockPoolResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.DeleteBlockPoolResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteBlockPoolResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetBlockLocalPathInfoRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetBlockLocalPathInfoRequestProto) */ {
 public:
  GetBlockLocalPathInfoRequestProto();
  virtual ~GetBlockLocalPathInfoRequestProto();

  GetBlockLocalPathInfoRequestProto(const GetBlockLocalPathInfoRequestProto& from);
  GetBlockLocalPathInfoRequestProto(GetBlockLocalPathInfoRequestProto&& from) noexcept
    : GetBlockLocalPathInfoRequestProto() {
    *this = ::std::move(from);
  }

  inline GetBlockLocalPathInfoRequestProto& operator=(const GetBlockLocalPathInfoRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockLocalPathInfoRequestProto& operator=(GetBlockLocalPathInfoRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockLocalPathInfoRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockLocalPathInfoRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetBlockLocalPathInfoRequestProto*>(
               &_GetBlockLocalPathInfoRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetBlockLocalPathInfoRequestProto& a, GetBlockLocalPathInfoRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockLocalPathInfoRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockLocalPathInfoRequestProto* New() const final {
    return CreateMaybeMessage<GetBlockLocalPathInfoRequestProto>(nullptr);
  }

  GetBlockLocalPathInfoRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockLocalPathInfoRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockLocalPathInfoRequestProto& from);
  void MergeFrom(const GetBlockLocalPathInfoRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockLocalPathInfoRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetBlockLocalPathInfoRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::ExtendedBlockProto& block() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_block();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_block() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_block();
  public:

  // required .Hdfs.Internal.TokenProto token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::Hdfs::Internal::TokenProto& token() const;
  ::Hdfs::Internal::TokenProto* release_token();
  ::Hdfs::Internal::TokenProto* mutable_token();
  void set_allocated_token(::Hdfs::Internal::TokenProto* token);
  private:
  const ::Hdfs::Internal::TokenProto& _internal_token() const;
  ::Hdfs::Internal::TokenProto* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetBlockLocalPathInfoRequestProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Hdfs::Internal::ExtendedBlockProto* block_;
  ::Hdfs::Internal::TokenProto* token_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetBlockLocalPathInfoResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetBlockLocalPathInfoResponseProto) */ {
 public:
  GetBlockLocalPathInfoResponseProto();
  virtual ~GetBlockLocalPathInfoResponseProto();

  GetBlockLocalPathInfoResponseProto(const GetBlockLocalPathInfoResponseProto& from);
  GetBlockLocalPathInfoResponseProto(GetBlockLocalPathInfoResponseProto&& from) noexcept
    : GetBlockLocalPathInfoResponseProto() {
    *this = ::std::move(from);
  }

  inline GetBlockLocalPathInfoResponseProto& operator=(const GetBlockLocalPathInfoResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockLocalPathInfoResponseProto& operator=(GetBlockLocalPathInfoResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockLocalPathInfoResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockLocalPathInfoResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetBlockLocalPathInfoResponseProto*>(
               &_GetBlockLocalPathInfoResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetBlockLocalPathInfoResponseProto& a, GetBlockLocalPathInfoResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockLocalPathInfoResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockLocalPathInfoResponseProto* New() const final {
    return CreateMaybeMessage<GetBlockLocalPathInfoResponseProto>(nullptr);
  }

  GetBlockLocalPathInfoResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockLocalPathInfoResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockLocalPathInfoResponseProto& from);
  void MergeFrom(const GetBlockLocalPathInfoResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockLocalPathInfoResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetBlockLocalPathInfoResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPathFieldNumber = 2,
    kLocalMetaPathFieldNumber = 3,
    kBlockFieldNumber = 1,
  };
  // required string localPath = 2;
  bool has_localpath() const;
  private:
  bool _internal_has_localpath() const;
  public:
  void clear_localpath();
  const std::string& localpath() const;
  void set_localpath(const std::string& value);
  void set_localpath(std::string&& value);
  void set_localpath(const char* value);
  void set_localpath(const char* value, size_t size);
  std::string* mutable_localpath();
  std::string* release_localpath();
  void set_allocated_localpath(std::string* localpath);
  private:
  const std::string& _internal_localpath() const;
  void _internal_set_localpath(const std::string& value);
  std::string* _internal_mutable_localpath();
  public:

  // required string localMetaPath = 3;
  bool has_localmetapath() const;
  private:
  bool _internal_has_localmetapath() const;
  public:
  void clear_localmetapath();
  const std::string& localmetapath() const;
  void set_localmetapath(const std::string& value);
  void set_localmetapath(std::string&& value);
  void set_localmetapath(const char* value);
  void set_localmetapath(const char* value, size_t size);
  std::string* mutable_localmetapath();
  std::string* release_localmetapath();
  void set_allocated_localmetapath(std::string* localmetapath);
  private:
  const std::string& _internal_localmetapath() const;
  void _internal_set_localmetapath(const std::string& value);
  std::string* _internal_mutable_localmetapath();
  public:

  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::Hdfs::Internal::ExtendedBlockProto& block() const;
  ::Hdfs::Internal::ExtendedBlockProto* release_block();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_block();
  void set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block);
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_block() const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetBlockLocalPathInfoResponseProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localmetapath_;
  ::Hdfs::Internal::ExtendedBlockProto* block_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetHdfsBlockLocationsRequestProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetHdfsBlockLocationsRequestProto) */ {
 public:
  GetHdfsBlockLocationsRequestProto();
  virtual ~GetHdfsBlockLocationsRequestProto();

  GetHdfsBlockLocationsRequestProto(const GetHdfsBlockLocationsRequestProto& from);
  GetHdfsBlockLocationsRequestProto(GetHdfsBlockLocationsRequestProto&& from) noexcept
    : GetHdfsBlockLocationsRequestProto() {
    *this = ::std::move(from);
  }

  inline GetHdfsBlockLocationsRequestProto& operator=(const GetHdfsBlockLocationsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHdfsBlockLocationsRequestProto& operator=(GetHdfsBlockLocationsRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHdfsBlockLocationsRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHdfsBlockLocationsRequestProto* internal_default_instance() {
    return reinterpret_cast<const GetHdfsBlockLocationsRequestProto*>(
               &_GetHdfsBlockLocationsRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetHdfsBlockLocationsRequestProto& a, GetHdfsBlockLocationsRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHdfsBlockLocationsRequestProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHdfsBlockLocationsRequestProto* New() const final {
    return CreateMaybeMessage<GetHdfsBlockLocationsRequestProto>(nullptr);
  }

  GetHdfsBlockLocationsRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHdfsBlockLocationsRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHdfsBlockLocationsRequestProto& from);
  void MergeFrom(const GetHdfsBlockLocationsRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHdfsBlockLocationsRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetHdfsBlockLocationsRequestProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
    kTokensFieldNumber = 2,
  };
  // repeated .Hdfs.Internal.ExtendedBlockProto blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::Hdfs::Internal::ExtendedBlockProto* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::ExtendedBlockProto >*
      mutable_blocks();
  private:
  const ::Hdfs::Internal::ExtendedBlockProto& _internal_blocks(int index) const;
  ::Hdfs::Internal::ExtendedBlockProto* _internal_add_blocks();
  public:
  const ::Hdfs::Internal::ExtendedBlockProto& blocks(int index) const;
  ::Hdfs::Internal::ExtendedBlockProto* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::ExtendedBlockProto >&
      blocks() const;

  // repeated .Hdfs.Internal.TokenProto tokens = 2;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::Hdfs::Internal::TokenProto* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::TokenProto >*
      mutable_tokens();
  private:
  const ::Hdfs::Internal::TokenProto& _internal_tokens(int index) const;
  ::Hdfs::Internal::TokenProto* _internal_add_tokens();
  public:
  const ::Hdfs::Internal::TokenProto& tokens(int index) const;
  ::Hdfs::Internal::TokenProto* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::TokenProto >&
      tokens() const;

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetHdfsBlockLocationsRequestProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::ExtendedBlockProto > blocks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::TokenProto > tokens_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// -------------------------------------------------------------------

class GetHdfsBlockLocationsResponseProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.GetHdfsBlockLocationsResponseProto) */ {
 public:
  GetHdfsBlockLocationsResponseProto();
  virtual ~GetHdfsBlockLocationsResponseProto();

  GetHdfsBlockLocationsResponseProto(const GetHdfsBlockLocationsResponseProto& from);
  GetHdfsBlockLocationsResponseProto(GetHdfsBlockLocationsResponseProto&& from) noexcept
    : GetHdfsBlockLocationsResponseProto() {
    *this = ::std::move(from);
  }

  inline GetHdfsBlockLocationsResponseProto& operator=(const GetHdfsBlockLocationsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHdfsBlockLocationsResponseProto& operator=(GetHdfsBlockLocationsResponseProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHdfsBlockLocationsResponseProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHdfsBlockLocationsResponseProto* internal_default_instance() {
    return reinterpret_cast<const GetHdfsBlockLocationsResponseProto*>(
               &_GetHdfsBlockLocationsResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetHdfsBlockLocationsResponseProto& a, GetHdfsBlockLocationsResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHdfsBlockLocationsResponseProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHdfsBlockLocationsResponseProto* New() const final {
    return CreateMaybeMessage<GetHdfsBlockLocationsResponseProto>(nullptr);
  }

  GetHdfsBlockLocationsResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHdfsBlockLocationsResponseProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHdfsBlockLocationsResponseProto& from);
  void MergeFrom(const GetHdfsBlockLocationsResponseProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHdfsBlockLocationsResponseProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.GetHdfsBlockLocationsResponseProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientDatanodeProtocol_2eproto);
    return ::descriptor_table_ClientDatanodeProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeIdsFieldNumber = 1,
    kVolumeIndexesFieldNumber = 2,
  };
  // repeated bytes volumeIds = 1;
  int volumeids_size() const;
  private:
  int _internal_volumeids_size() const;
  public:
  void clear_volumeids();
  const std::string& volumeids(int index) const;
  std::string* mutable_volumeids(int index);
  void set_volumeids(int index, const std::string& value);
  void set_volumeids(int index, std::string&& value);
  void set_volumeids(int index, const char* value);
  void set_volumeids(int index, const void* value, size_t size);
  std::string* add_volumeids();
  void add_volumeids(const std::string& value);
  void add_volumeids(std::string&& value);
  void add_volumeids(const char* value);
  void add_volumeids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& volumeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_volumeids();
  private:
  const std::string& _internal_volumeids(int index) const;
  std::string* _internal_add_volumeids();
  public:

  // repeated uint32 volumeIndexes = 2;
  int volumeindexes_size() const;
  private:
  int _internal_volumeindexes_size() const;
  public:
  void clear_volumeindexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volumeindexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volumeindexes() const;
  void _internal_add_volumeindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volumeindexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volumeindexes(int index) const;
  void set_volumeindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volumeindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volumeindexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volumeindexes();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetHdfsBlockLocationsResponseProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> volumeids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volumeindexes_;
  friend struct ::TableStruct_ClientDatanodeProtocol_2eproto;
};
// ===================================================================

class ClientDatanodeProtocolService_Stub;

class ClientDatanodeProtocolService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ClientDatanodeProtocolService() {};
 public:
  virtual ~ClientDatanodeProtocolService();

  typedef ClientDatanodeProtocolService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void getReplicaVisibleLength(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetReplicaVisibleLengthRequestProto* request,
                       ::Hdfs::Internal::GetReplicaVisibleLengthResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void refreshNamenodes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RefreshNamenodesRequestProto* request,
                       ::Hdfs::Internal::RefreshNamenodesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void deleteBlockPool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DeleteBlockPoolRequestProto* request,
                       ::Hdfs::Internal::DeleteBlockPoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getBlockLocalPathInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetBlockLocalPathInfoRequestProto* request,
                       ::Hdfs::Internal::GetBlockLocalPathInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getHdfsBlockLocations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetHdfsBlockLocationsRequestProto* request,
                       ::Hdfs::Internal::GetHdfsBlockLocationsResponseProto* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientDatanodeProtocolService);
};

class ClientDatanodeProtocolService_Stub : public ClientDatanodeProtocolService {
 public:
  ClientDatanodeProtocolService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ClientDatanodeProtocolService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ClientDatanodeProtocolService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ClientDatanodeProtocolService ------------------------------------------

  void getReplicaVisibleLength(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetReplicaVisibleLengthRequestProto* request,
                       ::Hdfs::Internal::GetReplicaVisibleLengthResponseProto* response,
                       ::google::protobuf::Closure* done);
  void refreshNamenodes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::RefreshNamenodesRequestProto* request,
                       ::Hdfs::Internal::RefreshNamenodesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void deleteBlockPool(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::DeleteBlockPoolRequestProto* request,
                       ::Hdfs::Internal::DeleteBlockPoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getBlockLocalPathInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetBlockLocalPathInfoRequestProto* request,
                       ::Hdfs::Internal::GetBlockLocalPathInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getHdfsBlockLocations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Hdfs::Internal::GetHdfsBlockLocationsRequestProto* request,
                       ::Hdfs::Internal::GetHdfsBlockLocationsResponseProto* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientDatanodeProtocolService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetReplicaVisibleLengthRequestProto

// required .Hdfs.Internal.ExtendedBlockProto block = 1;
inline bool GetReplicaVisibleLengthRequestProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool GetReplicaVisibleLengthRequestProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetReplicaVisibleLengthRequestProto::_internal_block() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetReplicaVisibleLengthRequestProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetReplicaVisibleLengthRequestProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetReplicaVisibleLengthRequestProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetReplicaVisibleLengthRequestProto.block)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetReplicaVisibleLengthRequestProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetReplicaVisibleLengthRequestProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetReplicaVisibleLengthRequestProto.block)
  return _internal_mutable_block();
}
inline void GetReplicaVisibleLengthRequestProto::set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetReplicaVisibleLengthRequestProto.block)
}

// -------------------------------------------------------------------

// GetReplicaVisibleLengthResponseProto

// required uint64 length = 1;
inline bool GetReplicaVisibleLengthResponseProto::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetReplicaVisibleLengthResponseProto::has_length() const {
  return _internal_has_length();
}
inline void GetReplicaVisibleLengthResponseProto::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetReplicaVisibleLengthResponseProto::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetReplicaVisibleLengthResponseProto::length() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetReplicaVisibleLengthResponseProto.length)
  return _internal_length();
}
inline void GetReplicaVisibleLengthResponseProto::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  length_ = value;
}
inline void GetReplicaVisibleLengthResponseProto::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetReplicaVisibleLengthResponseProto.length)
}

// -------------------------------------------------------------------

// RefreshNamenodesRequestProto

// -------------------------------------------------------------------

// RefreshNamenodesResponseProto

// -------------------------------------------------------------------

// DeleteBlockPoolRequestProto

// required string blockPool = 1;
inline bool DeleteBlockPoolRequestProto::_internal_has_blockpool() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteBlockPoolRequestProto::has_blockpool() const {
  return _internal_has_blockpool();
}
inline void DeleteBlockPoolRequestProto::clear_blockpool() {
  blockpool_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteBlockPoolRequestProto::blockpool() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
  return _internal_blockpool();
}
inline void DeleteBlockPoolRequestProto::set_blockpool(const std::string& value) {
  _internal_set_blockpool(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
}
inline std::string* DeleteBlockPoolRequestProto::mutable_blockpool() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
  return _internal_mutable_blockpool();
}
inline const std::string& DeleteBlockPoolRequestProto::_internal_blockpool() const {
  return blockpool_.GetNoArena();
}
inline void DeleteBlockPoolRequestProto::_internal_set_blockpool(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  blockpool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteBlockPoolRequestProto::set_blockpool(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  blockpool_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
}
inline void DeleteBlockPoolRequestProto::set_blockpool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  blockpool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
}
inline void DeleteBlockPoolRequestProto::set_blockpool(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  blockpool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
}
inline std::string* DeleteBlockPoolRequestProto::_internal_mutable_blockpool() {
  _has_bits_[0] |= 0x00000001u;
  return blockpool_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteBlockPoolRequestProto::release_blockpool() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
  if (!_internal_has_blockpool()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return blockpool_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBlockPoolRequestProto::set_allocated_blockpool(std::string* blockpool) {
  if (blockpool != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  blockpool_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockpool);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.DeleteBlockPoolRequestProto.blockPool)
}

// required bool force = 2;
inline bool DeleteBlockPoolRequestProto::_internal_has_force() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteBlockPoolRequestProto::has_force() const {
  return _internal_has_force();
}
inline void DeleteBlockPoolRequestProto::clear_force() {
  force_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DeleteBlockPoolRequestProto::_internal_force() const {
  return force_;
}
inline bool DeleteBlockPoolRequestProto::force() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.DeleteBlockPoolRequestProto.force)
  return _internal_force();
}
inline void DeleteBlockPoolRequestProto::_internal_set_force(bool value) {
  _has_bits_[0] |= 0x00000002u;
  force_ = value;
}
inline void DeleteBlockPoolRequestProto::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.DeleteBlockPoolRequestProto.force)
}

// -------------------------------------------------------------------

// DeleteBlockPoolResponseProto

// -------------------------------------------------------------------

// GetBlockLocalPathInfoRequestProto

// required .Hdfs.Internal.ExtendedBlockProto block = 1;
inline bool GetBlockLocalPathInfoRequestProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool GetBlockLocalPathInfoRequestProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetBlockLocalPathInfoRequestProto::_internal_block() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetBlockLocalPathInfoRequestProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetBlockLocalPathInfoRequestProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.block)
  _has_bits_[0] &= ~0x00000001u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetBlockLocalPathInfoRequestProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetBlockLocalPathInfoRequestProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.block)
  return _internal_mutable_block();
}
inline void GetBlockLocalPathInfoRequestProto::set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.block)
}

// required .Hdfs.Internal.TokenProto token = 2;
inline bool GetBlockLocalPathInfoRequestProto::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || token_ != nullptr);
  return value;
}
inline bool GetBlockLocalPathInfoRequestProto::has_token() const {
  return _internal_has_token();
}
inline const ::Hdfs::Internal::TokenProto& GetBlockLocalPathInfoRequestProto::_internal_token() const {
  const ::Hdfs::Internal::TokenProto* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::TokenProto*>(
      &::Hdfs::Internal::_TokenProto_default_instance_);
}
inline const ::Hdfs::Internal::TokenProto& GetBlockLocalPathInfoRequestProto::token() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.token)
  return _internal_token();
}
inline ::Hdfs::Internal::TokenProto* GetBlockLocalPathInfoRequestProto::release_token() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.token)
  _has_bits_[0] &= ~0x00000002u;
  ::Hdfs::Internal::TokenProto* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::TokenProto* GetBlockLocalPathInfoRequestProto::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000002u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::TokenProto>(GetArenaNoVirtual());
    token_ = p;
  }
  return token_;
}
inline ::Hdfs::Internal::TokenProto* GetBlockLocalPathInfoRequestProto::mutable_token() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.token)
  return _internal_mutable_token();
}
inline void GetBlockLocalPathInfoRequestProto::set_allocated_token(::Hdfs::Internal::TokenProto* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetBlockLocalPathInfoRequestProto.token)
}

// -------------------------------------------------------------------

// GetBlockLocalPathInfoResponseProto

// required .Hdfs.Internal.ExtendedBlockProto block = 1;
inline bool GetBlockLocalPathInfoResponseProto::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool GetBlockLocalPathInfoResponseProto::has_block() const {
  return _internal_has_block();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetBlockLocalPathInfoResponseProto::_internal_block() const {
  const ::Hdfs::Internal::ExtendedBlockProto* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Hdfs::Internal::ExtendedBlockProto*>(
      &::Hdfs::Internal::_ExtendedBlockProto_default_instance_);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetBlockLocalPathInfoResponseProto::block() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.block)
  return _internal_block();
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetBlockLocalPathInfoResponseProto::release_block() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.block)
  _has_bits_[0] &= ~0x00000004u;
  ::Hdfs::Internal::ExtendedBlockProto* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetBlockLocalPathInfoResponseProto::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000004u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Hdfs::Internal::ExtendedBlockProto>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetBlockLocalPathInfoResponseProto::mutable_block() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.block)
  return _internal_mutable_block();
}
inline void GetBlockLocalPathInfoResponseProto::set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.block)
}

// required string localPath = 2;
inline bool GetBlockLocalPathInfoResponseProto::_internal_has_localpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBlockLocalPathInfoResponseProto::has_localpath() const {
  return _internal_has_localpath();
}
inline void GetBlockLocalPathInfoResponseProto::clear_localpath() {
  localpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBlockLocalPathInfoResponseProto::localpath() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
  return _internal_localpath();
}
inline void GetBlockLocalPathInfoResponseProto::set_localpath(const std::string& value) {
  _internal_set_localpath(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
}
inline std::string* GetBlockLocalPathInfoResponseProto::mutable_localpath() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
  return _internal_mutable_localpath();
}
inline const std::string& GetBlockLocalPathInfoResponseProto::_internal_localpath() const {
  return localpath_.GetNoArena();
}
inline void GetBlockLocalPathInfoResponseProto::_internal_set_localpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockLocalPathInfoResponseProto::set_localpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  localpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
}
inline void GetBlockLocalPathInfoResponseProto::set_localpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
}
inline void GetBlockLocalPathInfoResponseProto::set_localpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  localpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
}
inline std::string* GetBlockLocalPathInfoResponseProto::_internal_mutable_localpath() {
  _has_bits_[0] |= 0x00000001u;
  return localpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockLocalPathInfoResponseProto::release_localpath() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
  if (!_internal_has_localpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return localpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockLocalPathInfoResponseProto::set_allocated_localpath(std::string* localpath) {
  if (localpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  localpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localpath);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localPath)
}

// required string localMetaPath = 3;
inline bool GetBlockLocalPathInfoResponseProto::_internal_has_localmetapath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetBlockLocalPathInfoResponseProto::has_localmetapath() const {
  return _internal_has_localmetapath();
}
inline void GetBlockLocalPathInfoResponseProto::clear_localmetapath() {
  localmetapath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetBlockLocalPathInfoResponseProto::localmetapath() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
  return _internal_localmetapath();
}
inline void GetBlockLocalPathInfoResponseProto::set_localmetapath(const std::string& value) {
  _internal_set_localmetapath(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
}
inline std::string* GetBlockLocalPathInfoResponseProto::mutable_localmetapath() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
  return _internal_mutable_localmetapath();
}
inline const std::string& GetBlockLocalPathInfoResponseProto::_internal_localmetapath() const {
  return localmetapath_.GetNoArena();
}
inline void GetBlockLocalPathInfoResponseProto::_internal_set_localmetapath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  localmetapath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockLocalPathInfoResponseProto::set_localmetapath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  localmetapath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
}
inline void GetBlockLocalPathInfoResponseProto::set_localmetapath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  localmetapath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
}
inline void GetBlockLocalPathInfoResponseProto::set_localmetapath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  localmetapath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
}
inline std::string* GetBlockLocalPathInfoResponseProto::_internal_mutable_localmetapath() {
  _has_bits_[0] |= 0x00000002u;
  return localmetapath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockLocalPathInfoResponseProto::release_localmetapath() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
  if (!_internal_has_localmetapath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return localmetapath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockLocalPathInfoResponseProto::set_allocated_localmetapath(std::string* localmetapath) {
  if (localmetapath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  localmetapath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localmetapath);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.GetBlockLocalPathInfoResponseProto.localMetaPath)
}

// -------------------------------------------------------------------

// GetHdfsBlockLocationsRequestProto

// repeated .Hdfs.Internal.ExtendedBlockProto blocks = 1;
inline int GetHdfsBlockLocationsRequestProto::_internal_blocks_size() const {
  return blocks_.size();
}
inline int GetHdfsBlockLocationsRequestProto::blocks_size() const {
  return _internal_blocks_size();
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetHdfsBlockLocationsRequestProto::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::ExtendedBlockProto >*
GetHdfsBlockLocationsRequestProto::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.blocks)
  return &blocks_;
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetHdfsBlockLocationsRequestProto::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetHdfsBlockLocationsRequestProto::blocks(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.blocks)
  return _internal_blocks(index);
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetHdfsBlockLocationsRequestProto::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetHdfsBlockLocationsRequestProto::add_blocks() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::ExtendedBlockProto >&
GetHdfsBlockLocationsRequestProto::blocks() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.blocks)
  return blocks_;
}

// repeated .Hdfs.Internal.TokenProto tokens = 2;
inline int GetHdfsBlockLocationsRequestProto::_internal_tokens_size() const {
  return tokens_.size();
}
inline int GetHdfsBlockLocationsRequestProto::tokens_size() const {
  return _internal_tokens_size();
}
inline ::Hdfs::Internal::TokenProto* GetHdfsBlockLocationsRequestProto::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::TokenProto >*
GetHdfsBlockLocationsRequestProto::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.tokens)
  return &tokens_;
}
inline const ::Hdfs::Internal::TokenProto& GetHdfsBlockLocationsRequestProto::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::Hdfs::Internal::TokenProto& GetHdfsBlockLocationsRequestProto::tokens(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.tokens)
  return _internal_tokens(index);
}
inline ::Hdfs::Internal::TokenProto* GetHdfsBlockLocationsRequestProto::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::Hdfs::Internal::TokenProto* GetHdfsBlockLocationsRequestProto::add_tokens() {
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.tokens)
  return _internal_add_tokens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Hdfs::Internal::TokenProto >&
GetHdfsBlockLocationsRequestProto::tokens() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetHdfsBlockLocationsRequestProto.tokens)
  return tokens_;
}

// -------------------------------------------------------------------

// GetHdfsBlockLocationsResponseProto

// repeated bytes volumeIds = 1;
inline int GetHdfsBlockLocationsResponseProto::_internal_volumeids_size() const {
  return volumeids_.size();
}
inline int GetHdfsBlockLocationsResponseProto::volumeids_size() const {
  return _internal_volumeids_size();
}
inline void GetHdfsBlockLocationsResponseProto::clear_volumeids() {
  volumeids_.Clear();
}
inline std::string* GetHdfsBlockLocationsResponseProto::add_volumeids() {
  // @@protoc_insertion_point(field_add_mutable:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
  return _internal_add_volumeids();
}
inline const std::string& GetHdfsBlockLocationsResponseProto::_internal_volumeids(int index) const {
  return volumeids_.Get(index);
}
inline const std::string& GetHdfsBlockLocationsResponseProto::volumeids(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
  return _internal_volumeids(index);
}
inline std::string* GetHdfsBlockLocationsResponseProto::mutable_volumeids(int index) {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
  return volumeids_.Mutable(index);
}
inline void GetHdfsBlockLocationsResponseProto::set_volumeids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
  volumeids_.Mutable(index)->assign(value);
}
inline void GetHdfsBlockLocationsResponseProto::set_volumeids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
  volumeids_.Mutable(index)->assign(std::move(value));
}
inline void GetHdfsBlockLocationsResponseProto::set_volumeids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  volumeids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
}
inline void GetHdfsBlockLocationsResponseProto::set_volumeids(int index, const void* value, size_t size) {
  volumeids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
}
inline std::string* GetHdfsBlockLocationsResponseProto::_internal_add_volumeids() {
  return volumeids_.Add();
}
inline void GetHdfsBlockLocationsResponseProto::add_volumeids(const std::string& value) {
  volumeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
}
inline void GetHdfsBlockLocationsResponseProto::add_volumeids(std::string&& value) {
  volumeids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
}
inline void GetHdfsBlockLocationsResponseProto::add_volumeids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  volumeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
}
inline void GetHdfsBlockLocationsResponseProto::add_volumeids(const void* value, size_t size) {
  volumeids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetHdfsBlockLocationsResponseProto::volumeids() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
  return volumeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetHdfsBlockLocationsResponseProto::mutable_volumeids() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIds)
  return &volumeids_;
}

// repeated uint32 volumeIndexes = 2;
inline int GetHdfsBlockLocationsResponseProto::_internal_volumeindexes_size() const {
  return volumeindexes_.size();
}
inline int GetHdfsBlockLocationsResponseProto::volumeindexes_size() const {
  return _internal_volumeindexes_size();
}
inline void GetHdfsBlockLocationsResponseProto::clear_volumeindexes() {
  volumeindexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetHdfsBlockLocationsResponseProto::_internal_volumeindexes(int index) const {
  return volumeindexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetHdfsBlockLocationsResponseProto::volumeindexes(int index) const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIndexes)
  return _internal_volumeindexes(index);
}
inline void GetHdfsBlockLocationsResponseProto::set_volumeindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volumeindexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIndexes)
}
inline void GetHdfsBlockLocationsResponseProto::_internal_add_volumeindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volumeindexes_.Add(value);
}
inline void GetHdfsBlockLocationsResponseProto::add_volumeindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volumeindexes(value);
  // @@protoc_insertion_point(field_add:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIndexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetHdfsBlockLocationsResponseProto::_internal_volumeindexes() const {
  return volumeindexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetHdfsBlockLocationsResponseProto::volumeindexes() const {
  // @@protoc_insertion_point(field_list:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIndexes)
  return _internal_volumeindexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetHdfsBlockLocationsResponseProto::_internal_mutable_volumeindexes() {
  return &volumeindexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetHdfsBlockLocationsResponseProto::mutable_volumeindexes() {
  // @@protoc_insertion_point(field_mutable_list:Hdfs.Internal.GetHdfsBlockLocationsResponseProto.volumeIndexes)
  return _internal_mutable_volumeindexes();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ClientDatanodeProtocol_2eproto
