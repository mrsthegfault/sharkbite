// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufRpcEngine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtobufRpcEngine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtobufRpcEngine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtobufRpcEngine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtobufRpcEngine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtobufRpcEngine_2eproto;
namespace Hdfs {
namespace Internal {
class RequestHeaderProto;
class RequestHeaderProtoDefaultTypeInternal;
extern RequestHeaderProtoDefaultTypeInternal _RequestHeaderProto_default_instance_;
}  // namespace Internal
}  // namespace Hdfs
PROTOBUF_NAMESPACE_OPEN
template<> ::Hdfs::Internal::RequestHeaderProto* Arena::CreateMaybeMessage<::Hdfs::Internal::RequestHeaderProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Hdfs {
namespace Internal {

// ===================================================================

class RequestHeaderProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hdfs.Internal.RequestHeaderProto) */ {
 public:
  RequestHeaderProto();
  virtual ~RequestHeaderProto();

  RequestHeaderProto(const RequestHeaderProto& from);
  RequestHeaderProto(RequestHeaderProto&& from) noexcept
    : RequestHeaderProto() {
    *this = ::std::move(from);
  }

  inline RequestHeaderProto& operator=(const RequestHeaderProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeaderProto& operator=(RequestHeaderProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestHeaderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHeaderProto* internal_default_instance() {
    return reinterpret_cast<const RequestHeaderProto*>(
               &_RequestHeaderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeaderProto& a, RequestHeaderProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeaderProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestHeaderProto* New() const final {
    return CreateMaybeMessage<RequestHeaderProto>(nullptr);
  }

  RequestHeaderProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeaderProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestHeaderProto& from);
  void MergeFrom(const RequestHeaderProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeaderProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hdfs.Internal.RequestHeaderProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufRpcEngine_2eproto);
    return ::descriptor_table_ProtobufRpcEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 1,
    kDeclaringClassProtocolNameFieldNumber = 2,
    kClientProtocolVersionFieldNumber = 3,
  };
  // required string methodName = 1;
  bool has_methodname() const;
  private:
  bool _internal_has_methodname() const;
  public:
  void clear_methodname();
  const std::string& methodname() const;
  void set_methodname(const std::string& value);
  void set_methodname(std::string&& value);
  void set_methodname(const char* value);
  void set_methodname(const char* value, size_t size);
  std::string* mutable_methodname();
  std::string* release_methodname();
  void set_allocated_methodname(std::string* methodname);
  private:
  const std::string& _internal_methodname() const;
  void _internal_set_methodname(const std::string& value);
  std::string* _internal_mutable_methodname();
  public:

  // required string declaringClassProtocolName = 2;
  bool has_declaringclassprotocolname() const;
  private:
  bool _internal_has_declaringclassprotocolname() const;
  public:
  void clear_declaringclassprotocolname();
  const std::string& declaringclassprotocolname() const;
  void set_declaringclassprotocolname(const std::string& value);
  void set_declaringclassprotocolname(std::string&& value);
  void set_declaringclassprotocolname(const char* value);
  void set_declaringclassprotocolname(const char* value, size_t size);
  std::string* mutable_declaringclassprotocolname();
  std::string* release_declaringclassprotocolname();
  void set_allocated_declaringclassprotocolname(std::string* declaringclassprotocolname);
  private:
  const std::string& _internal_declaringclassprotocolname() const;
  void _internal_set_declaringclassprotocolname(const std::string& value);
  std::string* _internal_mutable_declaringclassprotocolname();
  public:

  // required uint64 clientProtocolVersion = 3;
  bool has_clientprotocolversion() const;
  private:
  bool _internal_has_clientprotocolversion() const;
  public:
  void clear_clientprotocolversion();
  ::PROTOBUF_NAMESPACE_ID::uint64 clientprotocolversion() const;
  void set_clientprotocolversion(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clientprotocolversion() const;
  void _internal_set_clientprotocolversion(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RequestHeaderProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr methodname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr declaringclassprotocolname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clientprotocolversion_;
  friend struct ::TableStruct_ProtobufRpcEngine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeaderProto

// required string methodName = 1;
inline bool RequestHeaderProto::_internal_has_methodname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestHeaderProto::has_methodname() const {
  return _internal_has_methodname();
}
inline void RequestHeaderProto::clear_methodname() {
  methodname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestHeaderProto::methodname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RequestHeaderProto.methodName)
  return _internal_methodname();
}
inline void RequestHeaderProto::set_methodname(const std::string& value) {
  _internal_set_methodname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RequestHeaderProto.methodName)
}
inline std::string* RequestHeaderProto::mutable_methodname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RequestHeaderProto.methodName)
  return _internal_mutable_methodname();
}
inline const std::string& RequestHeaderProto::_internal_methodname() const {
  return methodname_.GetNoArena();
}
inline void RequestHeaderProto::_internal_set_methodname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  methodname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestHeaderProto::set_methodname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  methodname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RequestHeaderProto.methodName)
}
inline void RequestHeaderProto::set_methodname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  methodname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RequestHeaderProto.methodName)
}
inline void RequestHeaderProto::set_methodname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  methodname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RequestHeaderProto.methodName)
}
inline std::string* RequestHeaderProto::_internal_mutable_methodname() {
  _has_bits_[0] |= 0x00000001u;
  return methodname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestHeaderProto::release_methodname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RequestHeaderProto.methodName)
  if (!_internal_has_methodname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return methodname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeaderProto::set_allocated_methodname(std::string* methodname) {
  if (methodname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  methodname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), methodname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RequestHeaderProto.methodName)
}

// required string declaringClassProtocolName = 2;
inline bool RequestHeaderProto::_internal_has_declaringclassprotocolname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestHeaderProto::has_declaringclassprotocolname() const {
  return _internal_has_declaringclassprotocolname();
}
inline void RequestHeaderProto::clear_declaringclassprotocolname() {
  declaringclassprotocolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RequestHeaderProto::declaringclassprotocolname() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
  return _internal_declaringclassprotocolname();
}
inline void RequestHeaderProto::set_declaringclassprotocolname(const std::string& value) {
  _internal_set_declaringclassprotocolname(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
}
inline std::string* RequestHeaderProto::mutable_declaringclassprotocolname() {
  // @@protoc_insertion_point(field_mutable:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
  return _internal_mutable_declaringclassprotocolname();
}
inline const std::string& RequestHeaderProto::_internal_declaringclassprotocolname() const {
  return declaringclassprotocolname_.GetNoArena();
}
inline void RequestHeaderProto::_internal_set_declaringclassprotocolname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  declaringclassprotocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestHeaderProto::set_declaringclassprotocolname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  declaringclassprotocolname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
}
inline void RequestHeaderProto::set_declaringclassprotocolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  declaringclassprotocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
}
inline void RequestHeaderProto::set_declaringclassprotocolname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  declaringclassprotocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
}
inline std::string* RequestHeaderProto::_internal_mutable_declaringclassprotocolname() {
  _has_bits_[0] |= 0x00000002u;
  return declaringclassprotocolname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestHeaderProto::release_declaringclassprotocolname() {
  // @@protoc_insertion_point(field_release:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
  if (!_internal_has_declaringclassprotocolname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return declaringclassprotocolname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeaderProto::set_allocated_declaringclassprotocolname(std::string* declaringclassprotocolname) {
  if (declaringclassprotocolname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  declaringclassprotocolname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), declaringclassprotocolname);
  // @@protoc_insertion_point(field_set_allocated:Hdfs.Internal.RequestHeaderProto.declaringClassProtocolName)
}

// required uint64 clientProtocolVersion = 3;
inline bool RequestHeaderProto::_internal_has_clientprotocolversion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestHeaderProto::has_clientprotocolversion() const {
  return _internal_has_clientprotocolversion();
}
inline void RequestHeaderProto::clear_clientprotocolversion() {
  clientprotocolversion_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestHeaderProto::_internal_clientprotocolversion() const {
  return clientprotocolversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestHeaderProto::clientprotocolversion() const {
  // @@protoc_insertion_point(field_get:Hdfs.Internal.RequestHeaderProto.clientProtocolVersion)
  return _internal_clientprotocolversion();
}
inline void RequestHeaderProto::_internal_set_clientprotocolversion(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  clientprotocolversion_ = value;
}
inline void RequestHeaderProto::set_clientprotocolversion(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clientprotocolversion(value);
  // @@protoc_insertion_point(field_set:Hdfs.Internal.RequestHeaderProto.clientProtocolVersion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtobufRpcEngine_2eproto
