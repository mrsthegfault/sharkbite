/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef data_TYPES_V2H
#define data_TYPES_V2H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "security_types.h"
#include "client_types.h"


namespace org { namespace apache { namespace accumulov2 { namespace core { namespace dataImpl { namespace thrift {

struct TCMStatus {
  enum type {
    ACCEPTED = 0,
    REJECTED = 1,
    VIOLATED = 2,
    IGNORED = 3
  };
};

extern const std::map<int, const char*> _TCMStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TCMStatus::type& val);

typedef int64_t ScanID;

typedef int64_t UpdateID;

typedef std::map<class TKeyExtent, std::vector<class TRange> >  ScanBatch;

typedef std::map<class TKeyExtent, std::vector<class TConditionalMutation> >  CMBatch;

typedef std::map<class TKeyExtent, std::vector<class TMutation> >  UpdateBatch;

typedef std::map<class TKeyExtent, std::map<std::string, class MapFileInfo> >  TabletFiles;

class TKey;

class TColumn;

class TMutation;

class TKeyExtent;

class TKeyValue;

class ScanResult;

class TRange;

class MultiScanResult;

class InitialScan;

class InitialMultiScan;

class IterInfo;

class TConstraintViolationSummary;

class UpdateErrors;

class TCMResult;

class MapFileInfo;

class TCondition;

class TConditionalMutation;

class TConditionalSession;

class TSummarizerConfiguration;

class TSummary;

class TSummaries;

class TRowRange;

class TSummaryRequest;

typedef struct _TKey__isset {
  _TKey__isset() : row(false), colFamily(false), colQualifier(false), colVisibility(false), timestamp(false) {}
  bool row :1;
  bool colFamily :1;
  bool colQualifier :1;
  bool colVisibility :1;
  bool timestamp :1;
} _TKey__isset;

class TKey : public virtual ::apache::thrift::TBase {
 public:

  TKey(const TKey&);
  TKey& operator=(const TKey&);
  TKey() : row(), colFamily(), colQualifier(), colVisibility(), timestamp(0) {
  }

  virtual ~TKey() throw();
  std::string row;
  std::string colFamily;
  std::string colQualifier;
  std::string colVisibility;
  int64_t timestamp;

  _TKey__isset __isset;

  void __set_row(const std::string& val);

  void __set_colFamily(const std::string& val);

  void __set_colQualifier(const std::string& val);

  void __set_colVisibility(const std::string& val);

  void __set_timestamp(const int64_t val);

  bool operator == (const TKey & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(colFamily == rhs.colFamily))
      return false;
    if (!(colQualifier == rhs.colQualifier))
      return false;
    if (!(colVisibility == rhs.colVisibility))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TKey &a, TKey &b);

std::ostream& operator<<(std::ostream& out, const TKey& obj);

typedef struct _TColumn__isset {
  _TColumn__isset() : columnFamily(false), columnQualifier(false), columnVisibility(false) {}
  bool columnFamily :1;
  bool columnQualifier :1;
  bool columnVisibility :1;
} _TColumn__isset;

class TColumn : public virtual ::apache::thrift::TBase {
 public:

  TColumn(const TColumn&);
  TColumn& operator=(const TColumn&);
  TColumn() : columnFamily(), columnQualifier(), columnVisibility() {
  }

  virtual ~TColumn() throw();
  std::string columnFamily;
  std::string columnQualifier;
  std::string columnVisibility;

  _TColumn__isset __isset;

  void __set_columnFamily(const std::string& val);

  void __set_columnQualifier(const std::string& val);

  void __set_columnVisibility(const std::string& val);

  bool operator == (const TColumn & rhs) const
  {
    if (!(columnFamily == rhs.columnFamily))
      return false;
    if (!(columnQualifier == rhs.columnQualifier))
      return false;
    if (!(columnVisibility == rhs.columnVisibility))
      return false;
    return true;
  }
  bool operator != (const TColumn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumn &a, TColumn &b);

std::ostream& operator<<(std::ostream& out, const TColumn& obj);

typedef struct _TMutation__isset {
  _TMutation__isset() : row(false), data(false), values(false), entries(false), sources(false) {}
  bool row :1;
  bool data :1;
  bool values :1;
  bool entries :1;
  bool sources :1;
} _TMutation__isset;

class TMutation : public virtual ::apache::thrift::TBase {
 public:

  TMutation(const TMutation&);
  TMutation& operator=(const TMutation&);
  TMutation() : row(), data(), entries(0) {
  }

  virtual ~TMutation() throw();
  std::string row;
  std::string data;
  std::vector<std::string>  values;
  int32_t entries;
  std::vector<std::string>  sources;

  _TMutation__isset __isset;

  void __set_row(const std::string& val);

  void __set_data(const std::string& val);

  void __set_values(const std::vector<std::string> & val);

  void __set_entries(const int32_t val);

  void __set_sources(const std::vector<std::string> & val);

  bool operator == (const TMutation & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(entries == rhs.entries))
      return false;
    if (__isset.sources != rhs.__isset.sources)
      return false;
    else if (__isset.sources && !(sources == rhs.sources))
      return false;
    return true;
  }
  bool operator != (const TMutation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMutation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMutation &a, TMutation &b);

std::ostream& operator<<(std::ostream& out, const TMutation& obj);

typedef struct _TKeyExtent__isset {
  _TKeyExtent__isset() : table(false), endRow(false), prevEndRow(false) {}
  bool table :1;
  bool endRow :1;
  bool prevEndRow :1;
} _TKeyExtent__isset;

class TKeyExtent : public virtual ::apache::thrift::TBase {
 public:

  TKeyExtent(const TKeyExtent&);
  TKeyExtent& operator=(const TKeyExtent&);
  TKeyExtent() : table(), endRow(), prevEndRow() {
  }

  virtual ~TKeyExtent() throw();
  std::string table;
  std::string endRow;
  std::string prevEndRow;

  _TKeyExtent__isset __isset;

  void __set_table(const std::string& val);

  void __set_endRow(const std::string& val);

  void __set_prevEndRow(const std::string& val);

  bool operator == (const TKeyExtent & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(endRow == rhs.endRow))
      return false;
    if (!(prevEndRow == rhs.prevEndRow))
      return false;
    return true;
  }
  bool operator != (const TKeyExtent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TKeyExtent & rhs) const
   {
     if (table < rhs.table)
       return true;
     if (endRow < rhs.endRow)
       return true;
     if (prevEndRow < rhs.prevEndRow)
       return true;
     else return false;
   }

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TKeyExtent &a, TKeyExtent &b);

std::ostream& operator<<(std::ostream& out, const TKeyExtent& obj);

typedef struct _TKeyValue__isset {
  _TKeyValue__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _TKeyValue__isset;

class TKeyValue : public virtual ::apache::thrift::TBase {
 public:

  TKeyValue(const TKeyValue&);
  TKeyValue& operator=(const TKeyValue&);
  TKeyValue() : value() {
  }

  virtual ~TKeyValue() throw();
  TKey key;
  std::string value;

  _TKeyValue__isset __isset;

  void __set_key(const TKey& val);

  void __set_value(const std::string& val);

  bool operator == (const TKeyValue & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TKeyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TKeyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TKeyValue &a, TKeyValue &b);

std::ostream& operator<<(std::ostream& out, const TKeyValue& obj);

typedef struct _ScanResult__isset {
  _ScanResult__isset() : results(false), more(false) {}
  bool results :1;
  bool more :1;
} _ScanResult__isset;

class ScanResult : public virtual ::apache::thrift::TBase {
 public:

  ScanResult(const ScanResult&);
  ScanResult& operator=(const ScanResult&);
  ScanResult() : more(0) {
  }

  virtual ~ScanResult() throw();
  std::vector<TKeyValue>  results;
  bool more;

  _ScanResult__isset __isset;

  void __set_results(const std::vector<TKeyValue> & val);

  void __set_more(const bool val);

  bool operator == (const ScanResult & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    if (!(more == rhs.more))
      return false;
    return true;
  }
  bool operator != (const ScanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScanResult &a, ScanResult &b);

std::ostream& operator<<(std::ostream& out, const ScanResult& obj);

typedef struct _TRange__isset {
  _TRange__isset() : start(false), stop(false), startKeyInclusive(false), stopKeyInclusive(false), infiniteStartKey(false), infiniteStopKey(false) {}
  bool start :1;
  bool stop :1;
  bool startKeyInclusive :1;
  bool stopKeyInclusive :1;
  bool infiniteStartKey :1;
  bool infiniteStopKey :1;
} _TRange__isset;

class TRange : public virtual ::apache::thrift::TBase {
 public:

  TRange(const TRange&);
  TRange& operator=(const TRange&);
  TRange() : startKeyInclusive(0), stopKeyInclusive(0), infiniteStartKey(0), infiniteStopKey(0) {
  }

  virtual ~TRange() throw();
  TKey start;
  TKey stop;
  bool startKeyInclusive;
  bool stopKeyInclusive;
  bool infiniteStartKey;
  bool infiniteStopKey;

  _TRange__isset __isset;

  void __set_start(const TKey& val);

  void __set_stop(const TKey& val);

  void __set_startKeyInclusive(const bool val);

  void __set_stopKeyInclusive(const bool val);

  void __set_infiniteStartKey(const bool val);

  void __set_infiniteStopKey(const bool val);

  bool operator == (const TRange & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    if (!(startKeyInclusive == rhs.startKeyInclusive))
      return false;
    if (!(stopKeyInclusive == rhs.stopKeyInclusive))
      return false;
    if (!(infiniteStartKey == rhs.infiniteStartKey))
      return false;
    if (!(infiniteStopKey == rhs.infiniteStopKey))
      return false;
    return true;
  }
  bool operator != (const TRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRange &a, TRange &b);

std::ostream& operator<<(std::ostream& out, const TRange& obj);

typedef struct _MultiScanResult__isset {
  _MultiScanResult__isset() : results(false), failures(false), fullScans(false), partScan(false), partNextKey(false), partNextKeyInclusive(false), more(false) {}
  bool results :1;
  bool failures :1;
  bool fullScans :1;
  bool partScan :1;
  bool partNextKey :1;
  bool partNextKeyInclusive :1;
  bool more :1;
} _MultiScanResult__isset;

class MultiScanResult : public virtual ::apache::thrift::TBase {
 public:

  MultiScanResult(const MultiScanResult&);
  MultiScanResult& operator=(const MultiScanResult&);
  MultiScanResult() : partNextKeyInclusive(0), more(0) {
  }

  virtual ~MultiScanResult() throw();
  std::vector<TKeyValue>  results;
  ScanBatch failures;
  std::vector<TKeyExtent>  fullScans;
  TKeyExtent partScan;
  TKey partNextKey;
  bool partNextKeyInclusive;
  bool more;

  _MultiScanResult__isset __isset;

  void __set_results(const std::vector<TKeyValue> & val);

  void __set_failures(const ScanBatch& val);

  void __set_fullScans(const std::vector<TKeyExtent> & val);

  void __set_partScan(const TKeyExtent& val);

  void __set_partNextKey(const TKey& val);

  void __set_partNextKeyInclusive(const bool val);

  void __set_more(const bool val);

  bool operator == (const MultiScanResult & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    if (!(failures == rhs.failures))
      return false;
    if (!(fullScans == rhs.fullScans))
      return false;
    if (!(partScan == rhs.partScan))
      return false;
    if (!(partNextKey == rhs.partNextKey))
      return false;
    if (!(partNextKeyInclusive == rhs.partNextKeyInclusive))
      return false;
    if (!(more == rhs.more))
      return false;
    return true;
  }
  bool operator != (const MultiScanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultiScanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MultiScanResult &a, MultiScanResult &b);

std::ostream& operator<<(std::ostream& out, const MultiScanResult& obj);

typedef struct _InitialScan__isset {
  _InitialScan__isset() : scanID(false), result(false) {}
  bool scanID :1;
  bool result :1;
} _InitialScan__isset;

class InitialScan : public virtual ::apache::thrift::TBase {
 public:

  InitialScan(const InitialScan&);
  InitialScan& operator=(const InitialScan&);
  InitialScan() : scanID(0) {
  }

  virtual ~InitialScan() throw();
  ScanID scanID;
  ScanResult result;

  _InitialScan__isset __isset;

  void __set_scanID(const ScanID val);

  void __set_result(const ScanResult& val);

  bool operator == (const InitialScan & rhs) const
  {
    if (!(scanID == rhs.scanID))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const InitialScan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitialScan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InitialScan &a, InitialScan &b);

std::ostream& operator<<(std::ostream& out, const InitialScan& obj);

typedef struct _InitialMultiScan__isset {
  _InitialMultiScan__isset() : scanID(false), result(false) {}
  bool scanID :1;
  bool result :1;
} _InitialMultiScan__isset;

class InitialMultiScan : public virtual ::apache::thrift::TBase {
 public:

  InitialMultiScan(const InitialMultiScan&);
  InitialMultiScan& operator=(const InitialMultiScan&);
  InitialMultiScan() : scanID(0) {
  }

  virtual ~InitialMultiScan() throw();
  ScanID scanID;
  MultiScanResult result;

  _InitialMultiScan__isset __isset;

  void __set_scanID(const ScanID val);

  void __set_result(const MultiScanResult& val);

  bool operator == (const InitialMultiScan & rhs) const
  {
    if (!(scanID == rhs.scanID))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const InitialMultiScan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitialMultiScan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InitialMultiScan &a, InitialMultiScan &b);

std::ostream& operator<<(std::ostream& out, const InitialMultiScan& obj);

typedef struct _IterInfo__isset {
  _IterInfo__isset() : priority(false), className(false), iterName(false) {}
  bool priority :1;
  bool className :1;
  bool iterName :1;
} _IterInfo__isset;

class IterInfo : public virtual ::apache::thrift::TBase {
 public:

  IterInfo(const IterInfo&);
  IterInfo& operator=(const IterInfo&);
  IterInfo() : priority(0), className(), iterName() {
  }

  virtual ~IterInfo() throw();
  int32_t priority;
  std::string className;
  std::string iterName;

  _IterInfo__isset __isset;

  void __set_priority(const int32_t val);

  void __set_className(const std::string& val);

  void __set_iterName(const std::string& val);

  bool operator == (const IterInfo & rhs) const
  {
    if (!(priority == rhs.priority))
      return false;
    if (!(className == rhs.className))
      return false;
    if (!(iterName == rhs.iterName))
      return false;
    return true;
  }
  bool operator != (const IterInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IterInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IterInfo &a, IterInfo &b);

std::ostream& operator<<(std::ostream& out, const IterInfo& obj);

typedef struct _TConstraintViolationSummary__isset {
  _TConstraintViolationSummary__isset() : constrainClass(false), violationCode(false), violationDescription(false), numberOfViolatingMutations(false) {}
  bool constrainClass :1;
  bool violationCode :1;
  bool violationDescription :1;
  bool numberOfViolatingMutations :1;
} _TConstraintViolationSummary__isset;

class TConstraintViolationSummary : public virtual ::apache::thrift::TBase {
 public:

  TConstraintViolationSummary(const TConstraintViolationSummary&);
  TConstraintViolationSummary& operator=(const TConstraintViolationSummary&);
  TConstraintViolationSummary() : constrainClass(), violationCode(0), violationDescription(), numberOfViolatingMutations(0) {
  }

  virtual ~TConstraintViolationSummary() throw();
  std::string constrainClass;
  int16_t violationCode;
  std::string violationDescription;
  int64_t numberOfViolatingMutations;

  _TConstraintViolationSummary__isset __isset;

  void __set_constrainClass(const std::string& val);

  void __set_violationCode(const int16_t val);

  void __set_violationDescription(const std::string& val);

  void __set_numberOfViolatingMutations(const int64_t val);

  bool operator == (const TConstraintViolationSummary & rhs) const
  {
    if (!(constrainClass == rhs.constrainClass))
      return false;
    if (!(violationCode == rhs.violationCode))
      return false;
    if (!(violationDescription == rhs.violationDescription))
      return false;
    if (!(numberOfViolatingMutations == rhs.numberOfViolatingMutations))
      return false;
    return true;
  }
  bool operator != (const TConstraintViolationSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConstraintViolationSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TConstraintViolationSummary &a, TConstraintViolationSummary &b);

std::ostream& operator<<(std::ostream& out, const TConstraintViolationSummary& obj);

typedef struct _UpdateErrors__isset {
  _UpdateErrors__isset() : failedExtents(false), violationSummaries(false), authorizationFailures(false) {}
  bool failedExtents :1;
  bool violationSummaries :1;
  bool authorizationFailures :1;
} _UpdateErrors__isset;

class UpdateErrors : public virtual ::apache::thrift::TBase {
 public:

  UpdateErrors(const UpdateErrors&);
  UpdateErrors& operator=(const UpdateErrors&);
  UpdateErrors() {
  }

  virtual ~UpdateErrors() throw();
  std::map<TKeyExtent, int64_t>  failedExtents;
  std::vector<TConstraintViolationSummary>  violationSummaries;
  std::map<TKeyExtent,  ::org::apache::accumulov2::core::clientImpl::thrift::SecurityErrorCode::type>  authorizationFailures;

  _UpdateErrors__isset __isset;

  void __set_failedExtents(const std::map<TKeyExtent, int64_t> & val);

  void __set_violationSummaries(const std::vector<TConstraintViolationSummary> & val);

  void __set_authorizationFailures(const std::map<TKeyExtent,  ::org::apache::accumulov2::core::clientImpl::thrift::SecurityErrorCode::type> & val);

  bool operator == (const UpdateErrors & rhs) const
  {
    if (!(failedExtents == rhs.failedExtents))
      return false;
    if (!(violationSummaries == rhs.violationSummaries))
      return false;
    if (!(authorizationFailures == rhs.authorizationFailures))
      return false;
    return true;
  }
  bool operator != (const UpdateErrors &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateErrors & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateErrors &a, UpdateErrors &b);

std::ostream& operator<<(std::ostream& out, const UpdateErrors& obj);

typedef struct _TCMResult__isset {
  _TCMResult__isset() : cmid(false), status(false) {}
  bool cmid :1;
  bool status :1;
} _TCMResult__isset;

class TCMResult : public virtual ::apache::thrift::TBase {
 public:

  TCMResult(const TCMResult&);
  TCMResult& operator=(const TCMResult&);
  TCMResult() : cmid(0), status((TCMStatus::type)0) {
  }

  virtual ~TCMResult() throw();
  int64_t cmid;
  TCMStatus::type status;

  _TCMResult__isset __isset;

  void __set_cmid(const int64_t val);

  void __set_status(const TCMStatus::type val);

  bool operator == (const TCMResult & rhs) const
  {
    if (!(cmid == rhs.cmid))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TCMResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCMResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCMResult &a, TCMResult &b);

std::ostream& operator<<(std::ostream& out, const TCMResult& obj);

typedef struct _MapFileInfo__isset {
  _MapFileInfo__isset() : estimatedSize(false) {}
  bool estimatedSize :1;
} _MapFileInfo__isset;

class MapFileInfo : public virtual ::apache::thrift::TBase {
 public:

  MapFileInfo(const MapFileInfo&);
  MapFileInfo& operator=(const MapFileInfo&);
  MapFileInfo() : estimatedSize(0) {
  }

  virtual ~MapFileInfo() throw();
  int64_t estimatedSize;

  _MapFileInfo__isset __isset;

  void __set_estimatedSize(const int64_t val);

  bool operator == (const MapFileInfo & rhs) const
  {
    if (!(estimatedSize == rhs.estimatedSize))
      return false;
    return true;
  }
  bool operator != (const MapFileInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapFileInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MapFileInfo &a, MapFileInfo &b);

std::ostream& operator<<(std::ostream& out, const MapFileInfo& obj);

typedef struct _TCondition__isset {
  _TCondition__isset() : cf(false), cq(false), cv(false), ts(false), hasTimestamp(false), val(false), iterators(false) {}
  bool cf :1;
  bool cq :1;
  bool cv :1;
  bool ts :1;
  bool hasTimestamp :1;
  bool val :1;
  bool iterators :1;
} _TCondition__isset;

class TCondition : public virtual ::apache::thrift::TBase {
 public:

  TCondition(const TCondition&);
  TCondition& operator=(const TCondition&);
  TCondition() : cf(), cq(), cv(), ts(0), hasTimestamp(0), val(), iterators() {
  }

  virtual ~TCondition() throw();
  std::string cf;
  std::string cq;
  std::string cv;
  int64_t ts;
  bool hasTimestamp;
  std::string val;
  std::string iterators;

  _TCondition__isset __isset;

  void __set_cf(const std::string& val);

  void __set_cq(const std::string& val);

  void __set_cv(const std::string& val);

  void __set_ts(const int64_t val);

  void __set_hasTimestamp(const bool val);

  void __set_val(const std::string& val);

  void __set_iterators(const std::string& val);

  bool operator == (const TCondition & rhs) const
  {
    if (!(cf == rhs.cf))
      return false;
    if (!(cq == rhs.cq))
      return false;
    if (!(cv == rhs.cv))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (!(hasTimestamp == rhs.hasTimestamp))
      return false;
    if (!(val == rhs.val))
      return false;
    if (!(iterators == rhs.iterators))
      return false;
    return true;
  }
  bool operator != (const TCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCondition &a, TCondition &b);

std::ostream& operator<<(std::ostream& out, const TCondition& obj);

typedef struct _TConditionalMutation__isset {
  _TConditionalMutation__isset() : conditions(false), mutation(false), id(false) {}
  bool conditions :1;
  bool mutation :1;
  bool id :1;
} _TConditionalMutation__isset;

class TConditionalMutation : public virtual ::apache::thrift::TBase {
 public:

  TConditionalMutation(const TConditionalMutation&);
  TConditionalMutation& operator=(const TConditionalMutation&);
  TConditionalMutation() : id(0) {
  }

  virtual ~TConditionalMutation() throw();
  std::vector<TCondition>  conditions;
  TMutation mutation;
  int64_t id;

  _TConditionalMutation__isset __isset;

  void __set_conditions(const std::vector<TCondition> & val);

  void __set_mutation(const TMutation& val);

  void __set_id(const int64_t val);

  bool operator == (const TConditionalMutation & rhs) const
  {
    if (!(conditions == rhs.conditions))
      return false;
    if (!(mutation == rhs.mutation))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TConditionalMutation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConditionalMutation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TConditionalMutation &a, TConditionalMutation &b);

std::ostream& operator<<(std::ostream& out, const TConditionalMutation& obj);

typedef struct _TConditionalSession__isset {
  _TConditionalSession__isset() : sessionId(false), tserverLock(false), ttl(false) {}
  bool sessionId :1;
  bool tserverLock :1;
  bool ttl :1;
} _TConditionalSession__isset;

class TConditionalSession : public virtual ::apache::thrift::TBase {
 public:

  TConditionalSession(const TConditionalSession&);
  TConditionalSession& operator=(const TConditionalSession&);
  TConditionalSession() : sessionId(0), tserverLock(), ttl(0) {
  }

  virtual ~TConditionalSession() throw();
  int64_t sessionId;
  std::string tserverLock;
  int64_t ttl;

  _TConditionalSession__isset __isset;

  void __set_sessionId(const int64_t val);

  void __set_tserverLock(const std::string& val);

  void __set_ttl(const int64_t val);

  bool operator == (const TConditionalSession & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(tserverLock == rhs.tserverLock))
      return false;
    if (!(ttl == rhs.ttl))
      return false;
    return true;
  }
  bool operator != (const TConditionalSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConditionalSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TConditionalSession &a, TConditionalSession &b);

std::ostream& operator<<(std::ostream& out, const TConditionalSession& obj);

typedef struct _TSummarizerConfiguration__isset {
  _TSummarizerConfiguration__isset() : classname(false), options(false), configId(false) {}
  bool classname :1;
  bool options :1;
  bool configId :1;
} _TSummarizerConfiguration__isset;

class TSummarizerConfiguration : public virtual ::apache::thrift::TBase {
 public:

  TSummarizerConfiguration(const TSummarizerConfiguration&);
  TSummarizerConfiguration& operator=(const TSummarizerConfiguration&);
  TSummarizerConfiguration() : classname(), configId() {
  }

  virtual ~TSummarizerConfiguration() throw();
  std::string classname;
  std::map<std::string, std::string>  options;
  std::string configId;

  _TSummarizerConfiguration__isset __isset;

  void __set_classname(const std::string& val);

  void __set_options(const std::map<std::string, std::string> & val);

  void __set_configId(const std::string& val);

  bool operator == (const TSummarizerConfiguration & rhs) const
  {
    if (!(classname == rhs.classname))
      return false;
    if (!(options == rhs.options))
      return false;
    if (!(configId == rhs.configId))
      return false;
    return true;
  }
  bool operator != (const TSummarizerConfiguration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSummarizerConfiguration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSummarizerConfiguration &a, TSummarizerConfiguration &b);

std::ostream& operator<<(std::ostream& out, const TSummarizerConfiguration& obj);

typedef struct _TSummary__isset {
  _TSummary__isset() : summary(false), config(false), filesContaining(false), filesExceeding(false), filesLarge(false) {}
  bool summary :1;
  bool config :1;
  bool filesContaining :1;
  bool filesExceeding :1;
  bool filesLarge :1;
} _TSummary__isset;

class TSummary : public virtual ::apache::thrift::TBase {
 public:

  TSummary(const TSummary&);
  TSummary& operator=(const TSummary&);
  TSummary() : filesContaining(0), filesExceeding(0), filesLarge(0) {
  }

  virtual ~TSummary() throw();
  std::map<std::string, int64_t>  summary;
  TSummarizerConfiguration config;
  int64_t filesContaining;
  int64_t filesExceeding;
  int64_t filesLarge;

  _TSummary__isset __isset;

  void __set_summary(const std::map<std::string, int64_t> & val);

  void __set_config(const TSummarizerConfiguration& val);

  void __set_filesContaining(const int64_t val);

  void __set_filesExceeding(const int64_t val);

  void __set_filesLarge(const int64_t val);

  bool operator == (const TSummary & rhs) const
  {
    if (!(summary == rhs.summary))
      return false;
    if (!(config == rhs.config))
      return false;
    if (!(filesContaining == rhs.filesContaining))
      return false;
    if (!(filesExceeding == rhs.filesExceeding))
      return false;
    if (!(filesLarge == rhs.filesLarge))
      return false;
    return true;
  }
  bool operator != (const TSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSummary &a, TSummary &b);

std::ostream& operator<<(std::ostream& out, const TSummary& obj);

typedef struct _TSummaries__isset {
  _TSummaries__isset() : finished(false), sessionId(false), totalFiles(false), deletedFiles(false), summaries(false) {}
  bool finished :1;
  bool sessionId :1;
  bool totalFiles :1;
  bool deletedFiles :1;
  bool summaries :1;
} _TSummaries__isset;

class TSummaries : public virtual ::apache::thrift::TBase {
 public:

  TSummaries(const TSummaries&);
  TSummaries& operator=(const TSummaries&);
  TSummaries() : finished(0), sessionId(0), totalFiles(0), deletedFiles(0) {
  }

  virtual ~TSummaries() throw();
  bool finished;
  int64_t sessionId;
  int64_t totalFiles;
  int64_t deletedFiles;
  std::vector<TSummary>  summaries;

  _TSummaries__isset __isset;

  void __set_finished(const bool val);

  void __set_sessionId(const int64_t val);

  void __set_totalFiles(const int64_t val);

  void __set_deletedFiles(const int64_t val);

  void __set_summaries(const std::vector<TSummary> & val);

  bool operator == (const TSummaries & rhs) const
  {
    if (!(finished == rhs.finished))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(totalFiles == rhs.totalFiles))
      return false;
    if (!(deletedFiles == rhs.deletedFiles))
      return false;
    if (!(summaries == rhs.summaries))
      return false;
    return true;
  }
  bool operator != (const TSummaries &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSummaries & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSummaries &a, TSummaries &b);

std::ostream& operator<<(std::ostream& out, const TSummaries& obj);

typedef struct _TRowRange__isset {
  _TRowRange__isset() : startRow(false), endRow(false) {}
  bool startRow :1;
  bool endRow :1;
} _TRowRange__isset;

class TRowRange : public virtual ::apache::thrift::TBase {
 public:

  TRowRange(const TRowRange&);
  TRowRange& operator=(const TRowRange&);
  TRowRange() : startRow(), endRow() {
  }

  virtual ~TRowRange() throw();
  std::string startRow;
  std::string endRow;

  _TRowRange__isset __isset;

  void __set_startRow(const std::string& val);

  void __set_endRow(const std::string& val);

  bool operator == (const TRowRange & rhs) const
  {
    if (!(startRow == rhs.startRow))
      return false;
    if (!(endRow == rhs.endRow))
      return false;
    return true;
  }
  bool operator != (const TRowRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRowRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRowRange &a, TRowRange &b);

std::ostream& operator<<(std::ostream& out, const TRowRange& obj);

typedef struct _TSummaryRequest__isset {
  _TSummaryRequest__isset() : tableId(false), bounds(false), summarizers(false), summarizerPattern(false) {}
  bool tableId :1;
  bool bounds :1;
  bool summarizers :1;
  bool summarizerPattern :1;
} _TSummaryRequest__isset;

class TSummaryRequest : public virtual ::apache::thrift::TBase {
 public:

  TSummaryRequest(const TSummaryRequest&);
  TSummaryRequest& operator=(const TSummaryRequest&);
  TSummaryRequest() : tableId(), summarizerPattern() {
  }

  virtual ~TSummaryRequest() throw();
  std::string tableId;
  TRowRange bounds;
  std::vector<TSummarizerConfiguration>  summarizers;
  std::string summarizerPattern;

  _TSummaryRequest__isset __isset;

  void __set_tableId(const std::string& val);

  void __set_bounds(const TRowRange& val);

  void __set_summarizers(const std::vector<TSummarizerConfiguration> & val);

  void __set_summarizerPattern(const std::string& val);

  bool operator == (const TSummaryRequest & rhs) const
  {
    if (!(tableId == rhs.tableId))
      return false;
    if (!(bounds == rhs.bounds))
      return false;
    if (!(summarizers == rhs.summarizers))
      return false;
    if (!(summarizerPattern == rhs.summarizerPattern))
      return false;
    return true;
  }
  bool operator != (const TSummaryRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSummaryRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSummaryRequest &a, TSummaryRequest &b);

std::ostream& operator<<(std::ostream& out, const TSummaryRequest& obj);

}}}}}} // namespace

#endif
