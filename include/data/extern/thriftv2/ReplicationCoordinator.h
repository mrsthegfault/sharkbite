/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReplicationCoordinator_V2H
#define ReplicationCoordinator_V2H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "replication_types.h"

namespace org { namespace apache { namespace accumulov2 { namespace core { namespace replication { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReplicationCoordinatorIf {
 public:
  virtual ~ReplicationCoordinatorIf() {}
  virtual void getServicerAddress(std::string& _return, const std::string& remoteTableId, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
};

class ReplicationCoordinatorIfFactory {
 public:
  typedef ReplicationCoordinatorIf Handler;

  virtual ~ReplicationCoordinatorIfFactory() {}

  virtual ReplicationCoordinatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReplicationCoordinatorIf* /* handler */) = 0;
};

class ReplicationCoordinatorIfSingletonFactory : virtual public ReplicationCoordinatorIfFactory {
 public:
  ReplicationCoordinatorIfSingletonFactory(const std::shared_ptr<ReplicationCoordinatorIf>& iface) : iface_(iface) {}
  virtual ~ReplicationCoordinatorIfSingletonFactory() {}

  virtual ReplicationCoordinatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReplicationCoordinatorIf* /* handler */) {}

 protected:
  std::shared_ptr<ReplicationCoordinatorIf> iface_;
};

class ReplicationCoordinatorNull : virtual public ReplicationCoordinatorIf {
 public:
  virtual ~ReplicationCoordinatorNull() {}
  void getServicerAddress(std::string& /* _return */, const std::string& /* remoteTableId */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    return;
  }
};

typedef struct _ReplicationCoordinator_getServicerAddress_args__isset {
  _ReplicationCoordinator_getServicerAddress_args__isset() : remoteTableId(false), credentials(false) {}
  bool remoteTableId :1;
  bool credentials :1;
} _ReplicationCoordinator_getServicerAddress_args__isset;

class ReplicationCoordinator_getServicerAddress_args {
 public:

  ReplicationCoordinator_getServicerAddress_args(const ReplicationCoordinator_getServicerAddress_args&);
  ReplicationCoordinator_getServicerAddress_args& operator=(const ReplicationCoordinator_getServicerAddress_args&);
  ReplicationCoordinator_getServicerAddress_args() : remoteTableId() {
  }

  virtual ~ReplicationCoordinator_getServicerAddress_args() throw();
  std::string remoteTableId;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _ReplicationCoordinator_getServicerAddress_args__isset __isset;

  void __set_remoteTableId(const std::string& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const ReplicationCoordinator_getServicerAddress_args & rhs) const
  {
    if (!(remoteTableId == rhs.remoteTableId))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const ReplicationCoordinator_getServicerAddress_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicationCoordinator_getServicerAddress_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReplicationCoordinator_getServicerAddress_pargs {
 public:


  virtual ~ReplicationCoordinator_getServicerAddress_pargs() throw();
  const std::string* remoteTableId;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReplicationCoordinator_getServicerAddress_result__isset {
  _ReplicationCoordinator_getServicerAddress_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ReplicationCoordinator_getServicerAddress_result__isset;

class ReplicationCoordinator_getServicerAddress_result {
 public:

  ReplicationCoordinator_getServicerAddress_result(const ReplicationCoordinator_getServicerAddress_result&);
  ReplicationCoordinator_getServicerAddress_result& operator=(const ReplicationCoordinator_getServicerAddress_result&);
  ReplicationCoordinator_getServicerAddress_result() : success() {
  }

  virtual ~ReplicationCoordinator_getServicerAddress_result() throw();
  std::string success;
  ReplicationCoordinatorException e;

  _ReplicationCoordinator_getServicerAddress_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const ReplicationCoordinatorException& val);

  bool operator == (const ReplicationCoordinator_getServicerAddress_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ReplicationCoordinator_getServicerAddress_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicationCoordinator_getServicerAddress_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReplicationCoordinator_getServicerAddress_presult__isset {
  _ReplicationCoordinator_getServicerAddress_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ReplicationCoordinator_getServicerAddress_presult__isset;

class ReplicationCoordinator_getServicerAddress_presult {
 public:


  virtual ~ReplicationCoordinator_getServicerAddress_presult() throw();
  std::string* success;
  ReplicationCoordinatorException e;

  _ReplicationCoordinator_getServicerAddress_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReplicationCoordinatorClient : virtual public ReplicationCoordinatorIf {
 public:
  ReplicationCoordinatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReplicationCoordinatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getServicerAddress(std::string& _return, const std::string& remoteTableId, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_getServicerAddress(const std::string& remoteTableId, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getServicerAddress(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReplicationCoordinatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  std::shared_ptr<ReplicationCoordinatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReplicationCoordinatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getServicerAddress(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReplicationCoordinatorProcessor(std::shared_ptr<ReplicationCoordinatorIf> iface) :
    iface_(iface) {
    processMap_["getServicerAddress"] = &ReplicationCoordinatorProcessor::process_getServicerAddress;
  }

  virtual ~ReplicationCoordinatorProcessor() {}
};

class ReplicationCoordinatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReplicationCoordinatorProcessorFactory(const std::shared_ptr< ReplicationCoordinatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  std::shared_ptr< ReplicationCoordinatorIfFactory > handlerFactory_;
};

class ReplicationCoordinatorMultiface : virtual public ReplicationCoordinatorIf {
 public:
  ReplicationCoordinatorMultiface(std::vector<std::shared_ptr<ReplicationCoordinatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReplicationCoordinatorMultiface() {}
 protected:
  std::vector<std::shared_ptr<ReplicationCoordinatorIf> > ifaces_;
  ReplicationCoordinatorMultiface() {}
  void add(std::shared_ptr<ReplicationCoordinatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getServicerAddress(std::string& _return, const std::string& remoteTableId, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServicerAddress(_return, remoteTableId, credentials);
    }
    ifaces_[i]->getServicerAddress(_return, remoteTableId, credentials);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReplicationCoordinatorConcurrentClient : virtual public ReplicationCoordinatorIf {
 public:
  ReplicationCoordinatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReplicationCoordinatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getServicerAddress(std::string& _return, const std::string& remoteTableId, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_getServicerAddress(const std::string& remoteTableId, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getServicerAddress(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}}}} // namespace

#endif
