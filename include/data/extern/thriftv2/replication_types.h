/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef replication_TYPES_V2H
#define replication_TYPES_V2H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "data_types.h"
#include "security_types.h"


namespace org { namespace apache { namespace accumulov2 { namespace core { namespace replication { namespace thrift {

struct RemoteReplicationErrorCode {
  enum type {
    COULD_NOT_DESERIALIZE = 0,
    COULD_NOT_APPLY = 1,
    TABLE_DOES_NOT_EXIST = 2,
    CANNOT_AUTHENTICATE = 3,
    CANNOT_INSTANTIATE_REPLAYER = 4
  };
};

extern const std::map<int, const char*> _RemoteReplicationErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RemoteReplicationErrorCode::type& val);

struct ReplicationCoordinatorErrorCode {
  enum type {
    NO_AVAILABLE_SERVERS = 0,
    SERVICE_CONFIGURATION_UNAVAILABLE = 1,
    CANNOT_AUTHENTICATE = 2
  };
};

extern const std::map<int, const char*> _ReplicationCoordinatorErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ReplicationCoordinatorErrorCode::type& val);

class WalEdits;

class KeyValues;

class ReplicationCoordinatorException;

class RemoteReplicationException;

typedef struct _WalEdits__isset {
  _WalEdits__isset() : edits(false) {}
  bool edits :1;
} _WalEdits__isset;

class WalEdits : public virtual ::apache::thrift::TBase {
 public:

  WalEdits(const WalEdits&);
  WalEdits& operator=(const WalEdits&);
  WalEdits() {
  }

  virtual ~WalEdits() throw();
  std::vector<std::string>  edits;

  _WalEdits__isset __isset;

  void __set_edits(const std::vector<std::string> & val);

  bool operator == (const WalEdits & rhs) const
  {
    if (!(edits == rhs.edits))
      return false;
    return true;
  }
  bool operator != (const WalEdits &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WalEdits & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WalEdits &a, WalEdits &b);

std::ostream& operator<<(std::ostream& out, const WalEdits& obj);

typedef struct _KeyValues__isset {
  _KeyValues__isset() : keyValues(false) {}
  bool keyValues :1;
} _KeyValues__isset;

class KeyValues : public virtual ::apache::thrift::TBase {
 public:

  KeyValues(const KeyValues&);
  KeyValues& operator=(const KeyValues&);
  KeyValues() {
  }

  virtual ~KeyValues() throw();
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyValue>  keyValues;

  _KeyValues__isset __isset;

  void __set_keyValues(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyValue> & val);

  bool operator == (const KeyValues & rhs) const
  {
    if (!(keyValues == rhs.keyValues))
      return false;
    return true;
  }
  bool operator != (const KeyValues &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyValues & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyValues &a, KeyValues &b);

std::ostream& operator<<(std::ostream& out, const KeyValues& obj);

typedef struct _ReplicationCoordinatorException__isset {
  _ReplicationCoordinatorException__isset() : code(false), reason(false) {}
  bool code :1;
  bool reason :1;
} _ReplicationCoordinatorException__isset;

class ReplicationCoordinatorException : public ::apache::thrift::TException {
 public:

  ReplicationCoordinatorException(const ReplicationCoordinatorException&);
  ReplicationCoordinatorException& operator=(const ReplicationCoordinatorException&);
  ReplicationCoordinatorException() : code((ReplicationCoordinatorErrorCode::type)0), reason() {
  }

  virtual ~ReplicationCoordinatorException() throw();
  ReplicationCoordinatorErrorCode::type code;
  std::string reason;

  _ReplicationCoordinatorException__isset __isset;

  void __set_code(const ReplicationCoordinatorErrorCode::type val);

  void __set_reason(const std::string& val);

  bool operator == (const ReplicationCoordinatorException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const ReplicationCoordinatorException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicationCoordinatorException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ReplicationCoordinatorException &a, ReplicationCoordinatorException &b);

std::ostream& operator<<(std::ostream& out, const ReplicationCoordinatorException& obj);

typedef struct _RemoteReplicationException__isset {
  _RemoteReplicationException__isset() : code(false), reason(false) {}
  bool code :1;
  bool reason :1;
} _RemoteReplicationException__isset;

class RemoteReplicationException : public ::apache::thrift::TException {
 public:

  RemoteReplicationException(const RemoteReplicationException&);
  RemoteReplicationException& operator=(const RemoteReplicationException&);
  RemoteReplicationException() : code((RemoteReplicationErrorCode::type)0), reason() {
  }

  virtual ~RemoteReplicationException() throw();
  RemoteReplicationErrorCode::type code;
  std::string reason;

  _RemoteReplicationException__isset __isset;

  void __set_code(const RemoteReplicationErrorCode::type val);

  void __set_reason(const std::string& val);

  bool operator == (const RemoteReplicationException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const RemoteReplicationException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteReplicationException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(RemoteReplicationException &a, RemoteReplicationException &b);

std::ostream& operator<<(std::ostream& out, const RemoteReplicationException& obj);

}}}}}} // namespace

#endif
