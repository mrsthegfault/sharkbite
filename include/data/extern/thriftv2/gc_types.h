/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gc_TYPES_V2H
#define gc_TYPES_V2H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "security_types.h"
#include "trace_types.h"
#include "client_types.h"


namespace org { namespace apache { namespace accumulov2 { namespace core { namespace gc { namespace thrift {

class GcCycleStats;

class GCStatus;

typedef struct _GcCycleStats__isset {
  _GcCycleStats__isset() : started(false), finished(false), candidates(false), inUse(false), deleted(false), errors(false) {}
  bool started :1;
  bool finished :1;
  bool candidates :1;
  bool inUse :1;
  bool deleted :1;
  bool errors :1;
} _GcCycleStats__isset;

class GcCycleStats : public virtual ::apache::thrift::TBase {
 public:

  GcCycleStats(const GcCycleStats&);
  GcCycleStats& operator=(const GcCycleStats&);
  GcCycleStats() : started(0), finished(0), candidates(0), inUse(0), deleted(0), errors(0) {
  }

  virtual ~GcCycleStats() throw();
  int64_t started;
  int64_t finished;
  int64_t candidates;
  int64_t inUse;
  int64_t deleted;
  int64_t errors;

  _GcCycleStats__isset __isset;

  void __set_started(const int64_t val);

  void __set_finished(const int64_t val);

  void __set_candidates(const int64_t val);

  void __set_inUse(const int64_t val);

  void __set_deleted(const int64_t val);

  void __set_errors(const int64_t val);

  bool operator == (const GcCycleStats & rhs) const
  {
    if (!(started == rhs.started))
      return false;
    if (!(finished == rhs.finished))
      return false;
    if (!(candidates == rhs.candidates))
      return false;
    if (!(inUse == rhs.inUse))
      return false;
    if (!(deleted == rhs.deleted))
      return false;
    if (!(errors == rhs.errors))
      return false;
    return true;
  }
  bool operator != (const GcCycleStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GcCycleStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GcCycleStats &a, GcCycleStats &b);

std::ostream& operator<<(std::ostream& out, const GcCycleStats& obj);

typedef struct _GCStatus__isset {
  _GCStatus__isset() : last(false), lastLog(false), current(false), currentLog(false) {}
  bool last :1;
  bool lastLog :1;
  bool current :1;
  bool currentLog :1;
} _GCStatus__isset;

class GCStatus : public virtual ::apache::thrift::TBase {
 public:

  GCStatus(const GCStatus&);
  GCStatus& operator=(const GCStatus&);
  GCStatus() {
  }

  virtual ~GCStatus() throw();
  GcCycleStats last;
  GcCycleStats lastLog;
  GcCycleStats current;
  GcCycleStats currentLog;

  _GCStatus__isset __isset;

  void __set_last(const GcCycleStats& val);

  void __set_lastLog(const GcCycleStats& val);

  void __set_current(const GcCycleStats& val);

  void __set_currentLog(const GcCycleStats& val);

  bool operator == (const GCStatus & rhs) const
  {
    if (!(last == rhs.last))
      return false;
    if (!(lastLog == rhs.lastLog))
      return false;
    if (!(current == rhs.current))
      return false;
    if (!(currentLog == rhs.currentLog))
      return false;
    return true;
  }
  bool operator != (const GCStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GCStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GCStatus &a, GCStatus &b);

std::ostream& operator<<(std::ostream& out, const GCStatus& obj);

}}}}}} // namespace

#endif
