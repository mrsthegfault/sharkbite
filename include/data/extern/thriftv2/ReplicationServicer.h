/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReplicationServicer_V2H
#define ReplicationServicer_V2H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "replication_types.h"

namespace org { namespace apache { namespace accumulov2 { namespace core { namespace replication { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReplicationServicerIf {
 public:
  virtual ~ReplicationServicerIf() {}
  virtual int64_t replicateLog(const std::string& remoteTableId, const WalEdits& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
  virtual int64_t replicateKeyValues(const std::string& remoteTableId, const KeyValues& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
};

class ReplicationServicerIfFactory {
 public:
  typedef ReplicationServicerIf Handler;

  virtual ~ReplicationServicerIfFactory() {}

  virtual ReplicationServicerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReplicationServicerIf* /* handler */) = 0;
};

class ReplicationServicerIfSingletonFactory : virtual public ReplicationServicerIfFactory {
 public:
  ReplicationServicerIfSingletonFactory(const std::shared_ptr<ReplicationServicerIf>& iface) : iface_(iface) {}
  virtual ~ReplicationServicerIfSingletonFactory() {}

  virtual ReplicationServicerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReplicationServicerIf* /* handler */) {}

 protected:
  std::shared_ptr<ReplicationServicerIf> iface_;
};

class ReplicationServicerNull : virtual public ReplicationServicerIf {
 public:
  virtual ~ReplicationServicerNull() {}
  int64_t replicateLog(const std::string& /* remoteTableId */, const WalEdits& /* data */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t replicateKeyValues(const std::string& /* remoteTableId */, const KeyValues& /* data */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _ReplicationServicer_replicateLog_args__isset {
  _ReplicationServicer_replicateLog_args__isset() : remoteTableId(false), data(false), credentials(false) {}
  bool remoteTableId :1;
  bool data :1;
  bool credentials :1;
} _ReplicationServicer_replicateLog_args__isset;

class ReplicationServicer_replicateLog_args {
 public:

  ReplicationServicer_replicateLog_args(const ReplicationServicer_replicateLog_args&);
  ReplicationServicer_replicateLog_args& operator=(const ReplicationServicer_replicateLog_args&);
  ReplicationServicer_replicateLog_args() : remoteTableId() {
  }

  virtual ~ReplicationServicer_replicateLog_args() throw();
  std::string remoteTableId;
  WalEdits data;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _ReplicationServicer_replicateLog_args__isset __isset;

  void __set_remoteTableId(const std::string& val);

  void __set_data(const WalEdits& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const ReplicationServicer_replicateLog_args & rhs) const
  {
    if (!(remoteTableId == rhs.remoteTableId))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const ReplicationServicer_replicateLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicationServicer_replicateLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReplicationServicer_replicateLog_pargs {
 public:


  virtual ~ReplicationServicer_replicateLog_pargs() throw();
  const std::string* remoteTableId;
  const WalEdits* data;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReplicationServicer_replicateLog_result__isset {
  _ReplicationServicer_replicateLog_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ReplicationServicer_replicateLog_result__isset;

class ReplicationServicer_replicateLog_result {
 public:

  ReplicationServicer_replicateLog_result(const ReplicationServicer_replicateLog_result&);
  ReplicationServicer_replicateLog_result& operator=(const ReplicationServicer_replicateLog_result&);
  ReplicationServicer_replicateLog_result() : success(0) {
  }

  virtual ~ReplicationServicer_replicateLog_result() throw();
  int64_t success;
  RemoteReplicationException e;

  _ReplicationServicer_replicateLog_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const RemoteReplicationException& val);

  bool operator == (const ReplicationServicer_replicateLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ReplicationServicer_replicateLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicationServicer_replicateLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReplicationServicer_replicateLog_presult__isset {
  _ReplicationServicer_replicateLog_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ReplicationServicer_replicateLog_presult__isset;

class ReplicationServicer_replicateLog_presult {
 public:


  virtual ~ReplicationServicer_replicateLog_presult() throw();
  int64_t* success;
  RemoteReplicationException e;

  _ReplicationServicer_replicateLog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ReplicationServicer_replicateKeyValues_args__isset {
  _ReplicationServicer_replicateKeyValues_args__isset() : remoteTableId(false), data(false), credentials(false) {}
  bool remoteTableId :1;
  bool data :1;
  bool credentials :1;
} _ReplicationServicer_replicateKeyValues_args__isset;

class ReplicationServicer_replicateKeyValues_args {
 public:

  ReplicationServicer_replicateKeyValues_args(const ReplicationServicer_replicateKeyValues_args&);
  ReplicationServicer_replicateKeyValues_args& operator=(const ReplicationServicer_replicateKeyValues_args&);
  ReplicationServicer_replicateKeyValues_args() : remoteTableId() {
  }

  virtual ~ReplicationServicer_replicateKeyValues_args() throw();
  std::string remoteTableId;
  KeyValues data;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _ReplicationServicer_replicateKeyValues_args__isset __isset;

  void __set_remoteTableId(const std::string& val);

  void __set_data(const KeyValues& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const ReplicationServicer_replicateKeyValues_args & rhs) const
  {
    if (!(remoteTableId == rhs.remoteTableId))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const ReplicationServicer_replicateKeyValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicationServicer_replicateKeyValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReplicationServicer_replicateKeyValues_pargs {
 public:


  virtual ~ReplicationServicer_replicateKeyValues_pargs() throw();
  const std::string* remoteTableId;
  const KeyValues* data;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReplicationServicer_replicateKeyValues_result__isset {
  _ReplicationServicer_replicateKeyValues_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ReplicationServicer_replicateKeyValues_result__isset;

class ReplicationServicer_replicateKeyValues_result {
 public:

  ReplicationServicer_replicateKeyValues_result(const ReplicationServicer_replicateKeyValues_result&);
  ReplicationServicer_replicateKeyValues_result& operator=(const ReplicationServicer_replicateKeyValues_result&);
  ReplicationServicer_replicateKeyValues_result() : success(0) {
  }

  virtual ~ReplicationServicer_replicateKeyValues_result() throw();
  int64_t success;
  RemoteReplicationException e;

  _ReplicationServicer_replicateKeyValues_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const RemoteReplicationException& val);

  bool operator == (const ReplicationServicer_replicateKeyValues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ReplicationServicer_replicateKeyValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplicationServicer_replicateKeyValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReplicationServicer_replicateKeyValues_presult__isset {
  _ReplicationServicer_replicateKeyValues_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ReplicationServicer_replicateKeyValues_presult__isset;

class ReplicationServicer_replicateKeyValues_presult {
 public:


  virtual ~ReplicationServicer_replicateKeyValues_presult() throw();
  int64_t* success;
  RemoteReplicationException e;

  _ReplicationServicer_replicateKeyValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReplicationServicerClient : virtual public ReplicationServicerIf {
 public:
  ReplicationServicerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReplicationServicerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t replicateLog(const std::string& remoteTableId, const WalEdits& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_replicateLog(const std::string& remoteTableId, const WalEdits& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int64_t recv_replicateLog();
  int64_t replicateKeyValues(const std::string& remoteTableId, const KeyValues& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_replicateKeyValues(const std::string& remoteTableId, const KeyValues& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int64_t recv_replicateKeyValues();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReplicationServicerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  std::shared_ptr<ReplicationServicerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReplicationServicerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_replicateLog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replicateKeyValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReplicationServicerProcessor(std::shared_ptr<ReplicationServicerIf> iface) :
    iface_(iface) {
    processMap_["replicateLog"] = &ReplicationServicerProcessor::process_replicateLog;
    processMap_["replicateKeyValues"] = &ReplicationServicerProcessor::process_replicateKeyValues;
  }

  virtual ~ReplicationServicerProcessor() {}
};

class ReplicationServicerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReplicationServicerProcessorFactory(const std::shared_ptr< ReplicationServicerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  std::shared_ptr< ReplicationServicerIfFactory > handlerFactory_;
};

class ReplicationServicerMultiface : virtual public ReplicationServicerIf {
 public:
  ReplicationServicerMultiface(std::vector<std::shared_ptr<ReplicationServicerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReplicationServicerMultiface() {}
 protected:
  std::vector<std::shared_ptr<ReplicationServicerIf> > ifaces_;
  ReplicationServicerMultiface() {}
  void add(std::shared_ptr<ReplicationServicerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t replicateLog(const std::string& remoteTableId, const WalEdits& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replicateLog(remoteTableId, data, credentials);
    }
    return ifaces_[i]->replicateLog(remoteTableId, data, credentials);
  }

  int64_t replicateKeyValues(const std::string& remoteTableId, const KeyValues& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replicateKeyValues(remoteTableId, data, credentials);
    }
    return ifaces_[i]->replicateKeyValues(remoteTableId, data, credentials);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReplicationServicerConcurrentClient : virtual public ReplicationServicerIf {
 public:
  ReplicationServicerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReplicationServicerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t replicateLog(const std::string& remoteTableId, const WalEdits& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_replicateLog(const std::string& remoteTableId, const WalEdits& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int64_t recv_replicateLog(const int32_t seqid);
  int64_t replicateKeyValues(const std::string& remoteTableId, const KeyValues& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_replicateKeyValues(const std::string& remoteTableId, const KeyValues& data, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int64_t recv_replicateKeyValues(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}}}} // namespace

#endif
