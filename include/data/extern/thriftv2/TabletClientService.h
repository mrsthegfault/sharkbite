/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TabletClientService_V2H
#define TabletClientService_V2H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "tabletserver_types.h"
#include "ClientService.h"

namespace org { namespace apache { namespace accumulov2 { namespace core { namespace tabletserver { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TabletClientServiceIf : virtual public  ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceIf {
 public:
  virtual ~TabletClientServiceIf() {}
  virtual void startScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& range, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const int32_t batchSize, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const bool isolated, const int64_t readaheadThreshold, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints) = 0;
  virtual void continueScan( ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) = 0;
  virtual void closeScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) = 0;
  virtual void startMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& batch, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints) = 0;
  virtual void continueMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) = 0;
  virtual void closeMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) = 0;
  virtual  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID startUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const TDurability::type durability) = 0;
  virtual void applyUpdates(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & mutations) = 0;
  virtual void closeUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID) = 0;
  virtual void update(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& mutation, const TDurability::type durability) = 0;
  virtual void startConditionalUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & authorizations, const std::string& tableID, const TDurability::type durability, const std::string& classLoaderContext) = 0;
  virtual void conditionalUpdate(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID, const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& mutations, const std::vector<std::string> & symbols) = 0;
  virtual void invalidateConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID) = 0;
  virtual void closeConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID) = 0;
  virtual void bulkImport(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& files, const bool setTime) = 0;
  virtual void loadFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const std::string& dir, const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & files, const bool setTime) = 0;
  virtual void splitTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const std::string& splitPoint) = 0;
  virtual void loadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent) = 0;
  virtual void unloadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const TUnloadTabletGoal::type goal, const int64_t requestTime) = 0;
  virtual void flush(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow) = 0;
  virtual void flushTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent) = 0;
  virtual void chop(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent) = 0;
  virtual void compact(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow) = 0;
  virtual void getTabletServerStatus( ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
  virtual void getTabletStats(std::vector<TabletStats> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& tableId) = 0;
  virtual void getHistoricalStats(TabletStats& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
  virtual void halt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock) = 0;
  virtual void fastHalt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock) = 0;
  virtual void getActiveScans(std::vector<ActiveScan> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
  virtual void getActiveCompactions(std::vector<ActiveCompaction> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
  virtual void removeLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & filenames) = 0;
  virtual void getActiveLogs(std::vector<std::string> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) = 0;
  virtual void startGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request) = 0;
  virtual void startGetSummariesForPartition( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const int32_t modulus, const int32_t remainder) = 0;
  virtual void startGetSummariesFromFiles( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & files) = 0;
  virtual void contiuneGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const int64_t sessionId) = 0;
};

class TabletClientServiceIfFactory : virtual public  ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceIfFactory {
 public:
  typedef TabletClientServiceIf Handler;

  virtual ~TabletClientServiceIfFactory() {}

  virtual TabletClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceIf* /* handler */) = 0;
};

class TabletClientServiceIfSingletonFactory : virtual public TabletClientServiceIfFactory {
 public:
  TabletClientServiceIfSingletonFactory(const std::shared_ptr<TabletClientServiceIf>& iface) : iface_(iface) {}
  virtual ~TabletClientServiceIfSingletonFactory() {}

  virtual TabletClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceIf* /* handler */) {}

 protected:
  std::shared_ptr<TabletClientServiceIf> iface_;
};

class TabletClientServiceNull : virtual public TabletClientServiceIf , virtual public  ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceNull {
 public:
  virtual ~TabletClientServiceNull() {}
  void startScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* extent */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& /* range */, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & /* columns */, const int32_t /* batchSize */, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & /* ssiList */, const std::map<std::string, std::map<std::string, std::string> > & /* ssio */, const std::vector<std::string> & /* authorizations */, const bool /* waitForWrites */, const bool /* isolated */, const int64_t /* readaheadThreshold */, const TSamplerConfiguration& /* samplerConfig */, const int64_t /* batchTimeOut */, const std::string& /* classLoaderContext */, const std::map<std::string, std::string> & /* executionHints */) {
    return;
  }
  void continueScan( ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID /* scanID */) {
    return;
  }
  void closeScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID /* scanID */) {
    return;
  }
  void startMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& /* batch */, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & /* columns */, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & /* ssiList */, const std::map<std::string, std::map<std::string, std::string> > & /* ssio */, const std::vector<std::string> & /* authorizations */, const bool /* waitForWrites */, const TSamplerConfiguration& /* samplerConfig */, const int64_t /* batchTimeOut */, const std::string& /* classLoaderContext */, const std::map<std::string, std::string> & /* executionHints */) {
    return;
  }
  void continueMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID /* scanID */) {
    return;
  }
  void closeMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID /* scanID */) {
    return;
  }
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID startUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const TDurability::type /* durability */) {
     ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID _return = 0;
    return _return;
  }
  void applyUpdates(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID /* updateID */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* keyExtent */, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & /* mutations */) {
    return;
  }
  void closeUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID /* updateID */) {
    return;
  }
  void update(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* keyExtent */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& /* mutation */, const TDurability::type /* durability */) {
    return;
  }
  void startConditionalUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::vector<std::string> & /* authorizations */, const std::string& /* tableID */, const TDurability::type /* durability */, const std::string& /* classLoaderContext */) {
    return;
  }
  void conditionalUpdate(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID /* sessID */, const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& /* mutations */, const std::vector<std::string> & /* symbols */) {
    return;
  }
  void invalidateConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID /* sessID */) {
    return;
  }
  void closeConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID /* sessID */) {
    return;
  }
  void bulkImport(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const int64_t /* tid */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& /* files */, const bool /* setTime */) {
    return;
  }
  void loadFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const int64_t /* tid */, const std::string& /* dir */, const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & /* files */, const bool /* setTime */) {
    return;
  }
  void splitTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* extent */, const std::string& /* splitPoint */) {
    return;
  }
  void loadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* extent */) {
    return;
  }
  void unloadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* extent */, const TUnloadTabletGoal::type /* goal */, const int64_t /* requestTime */) {
    return;
  }
  void flush(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */, const std::string& /* tableId */, const std::string& /* startRow */, const std::string& /* endRow */) {
    return;
  }
  void flushTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* extent */) {
    return;
  }
  void chop(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& /* extent */) {
    return;
  }
  void compact(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */, const std::string& /* tableId */, const std::string& /* startRow */, const std::string& /* endRow */) {
    return;
  }
  void getTabletServerStatus( ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    return;
  }
  void getTabletStats(std::vector<TabletStats> & /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* tableId */) {
    return;
  }
  void getHistoricalStats(TabletStats& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    return;
  }
  void halt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */) {
    return;
  }
  void fastHalt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::string& /* lock */) {
    return;
  }
  void getActiveScans(std::vector<ActiveScan> & /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    return;
  }
  void getActiveCompactions(std::vector<ActiveCompaction> & /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    return;
  }
  void removeLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const std::vector<std::string> & /* filenames */) {
    return;
  }
  void getActiveLogs(std::vector<std::string> & /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */) {
    return;
  }
  void startGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& /* request */) {
    return;
  }
  void startGetSummariesForPartition( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& /* request */, const int32_t /* modulus */, const int32_t /* remainder */) {
    return;
  }
  void startGetSummariesFromFiles( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& /* credentials */, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& /* request */, const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & /* files */) {
    return;
  }
  void contiuneGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& /* _return */, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& /* tinfo */, const int64_t /* sessionId */) {
    return;
  }
};

typedef struct _TabletClientService_startScan_args__isset {
  _TabletClientService_startScan_args__isset() : tinfo(false), credentials(false), extent(false), range(false), columns(false), batchSize(false), ssiList(false), ssio(false), authorizations(false), waitForWrites(false), isolated(false), readaheadThreshold(false), samplerConfig(false), batchTimeOut(false), classLoaderContext(false), executionHints(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool extent :1;
  bool range :1;
  bool columns :1;
  bool batchSize :1;
  bool ssiList :1;
  bool ssio :1;
  bool authorizations :1;
  bool waitForWrites :1;
  bool isolated :1;
  bool readaheadThreshold :1;
  bool samplerConfig :1;
  bool batchTimeOut :1;
  bool classLoaderContext :1;
  bool executionHints :1;
} _TabletClientService_startScan_args__isset;

class TabletClientService_startScan_args {
 public:

  TabletClientService_startScan_args(const TabletClientService_startScan_args&);
  TabletClientService_startScan_args& operator=(const TabletClientService_startScan_args&);
  TabletClientService_startScan_args() : batchSize(0), waitForWrites(0), isolated(0), readaheadThreshold(0), batchTimeOut(0), classLoaderContext() {
  }

  virtual ~TabletClientService_startScan_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent extent;
   ::org::apache::accumulov2::core::dataImpl::thrift::TRange range;
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn>  columns;
  int32_t batchSize;
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo>  ssiList;
  std::map<std::string, std::map<std::string, std::string> >  ssio;
  std::vector<std::string>  authorizations;
  bool waitForWrites;
  bool isolated;
  int64_t readaheadThreshold;
  TSamplerConfiguration samplerConfig;
  int64_t batchTimeOut;
  std::string classLoaderContext;
  std::map<std::string, std::string>  executionHints;

  _TabletClientService_startScan_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_extent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  void __set_range(const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& val);

  void __set_columns(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & val);

  void __set_batchSize(const int32_t val);

  void __set_ssiList(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & val);

  void __set_ssio(const std::map<std::string, std::map<std::string, std::string> > & val);

  void __set_authorizations(const std::vector<std::string> & val);

  void __set_waitForWrites(const bool val);

  void __set_isolated(const bool val);

  void __set_readaheadThreshold(const int64_t val);

  void __set_samplerConfig(const TSamplerConfiguration& val);

  void __set_batchTimeOut(const int64_t val);

  void __set_classLoaderContext(const std::string& val);

  void __set_executionHints(const std::map<std::string, std::string> & val);

  bool operator == (const TabletClientService_startScan_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(extent == rhs.extent))
      return false;
    if (!(range == rhs.range))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (!(batchSize == rhs.batchSize))
      return false;
    if (!(ssiList == rhs.ssiList))
      return false;
    if (!(ssio == rhs.ssio))
      return false;
    if (!(authorizations == rhs.authorizations))
      return false;
    if (!(waitForWrites == rhs.waitForWrites))
      return false;
    if (!(isolated == rhs.isolated))
      return false;
    if (!(readaheadThreshold == rhs.readaheadThreshold))
      return false;
    if (!(samplerConfig == rhs.samplerConfig))
      return false;
    if (!(batchTimeOut == rhs.batchTimeOut))
      return false;
    if (!(classLoaderContext == rhs.classLoaderContext))
      return false;
    if (!(executionHints == rhs.executionHints))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startScan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startScan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_startScan_pargs {
 public:


  virtual ~TabletClientService_startScan_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* extent;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange* range;
  const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> * columns;
  const int32_t* batchSize;
  const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> * ssiList;
  const std::map<std::string, std::map<std::string, std::string> > * ssio;
  const std::vector<std::string> * authorizations;
  const bool* waitForWrites;
  const bool* isolated;
  const int64_t* readaheadThreshold;
  const TSamplerConfiguration* samplerConfig;
  const int64_t* batchTimeOut;
  const std::string* classLoaderContext;
  const std::map<std::string, std::string> * executionHints;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startScan_result__isset {
  _TabletClientService_startScan_result__isset() : success(false), sec(false), nste(false), tmfe(false), tsnpe(false) {}
  bool success :1;
  bool sec :1;
  bool nste :1;
  bool tmfe :1;
  bool tsnpe :1;
} _TabletClientService_startScan_result__isset;

class TabletClientService_startScan_result {
 public:

  TabletClientService_startScan_result(const TabletClientService_startScan_result&);
  TabletClientService_startScan_result& operator=(const TabletClientService_startScan_result&);
  TabletClientService_startScan_result() {
  }

  virtual ~TabletClientService_startScan_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  NotServingTabletException nste;
  TooManyFilesException tmfe;
  TSampleNotPresentException tsnpe;

  _TabletClientService_startScan_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  void __set_nste(const NotServingTabletException& val);

  void __set_tmfe(const TooManyFilesException& val);

  void __set_tsnpe(const TSampleNotPresentException& val);

  bool operator == (const TabletClientService_startScan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    if (!(nste == rhs.nste))
      return false;
    if (!(tmfe == rhs.tmfe))
      return false;
    if (!(tsnpe == rhs.tsnpe))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startScan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startScan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startScan_presult__isset {
  _TabletClientService_startScan_presult__isset() : success(false), sec(false), nste(false), tmfe(false), tsnpe(false) {}
  bool success :1;
  bool sec :1;
  bool nste :1;
  bool tmfe :1;
  bool tsnpe :1;
} _TabletClientService_startScan_presult__isset;

class TabletClientService_startScan_presult {
 public:


  virtual ~TabletClientService_startScan_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  NotServingTabletException nste;
  TooManyFilesException tmfe;
  TSampleNotPresentException tsnpe;

  _TabletClientService_startScan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_continueScan_args__isset {
  _TabletClientService_continueScan_args__isset() : tinfo(false), scanID(false) {}
  bool tinfo :1;
  bool scanID :1;
} _TabletClientService_continueScan_args__isset;

class TabletClientService_continueScan_args {
 public:

  TabletClientService_continueScan_args(const TabletClientService_continueScan_args&);
  TabletClientService_continueScan_args& operator=(const TabletClientService_continueScan_args&);
  TabletClientService_continueScan_args() : scanID(0) {
  }

  virtual ~TabletClientService_continueScan_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID;

  _TabletClientService_continueScan_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_scanID(const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID val);

  bool operator == (const TabletClientService_continueScan_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(scanID == rhs.scanID))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_continueScan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_continueScan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_continueScan_pargs {
 public:


  virtual ~TabletClientService_continueScan_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID* scanID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_continueScan_result__isset {
  _TabletClientService_continueScan_result__isset() : success(false), nssi(false), nste(false), tmfe(false), tsnpe(false) {}
  bool success :1;
  bool nssi :1;
  bool nste :1;
  bool tmfe :1;
  bool tsnpe :1;
} _TabletClientService_continueScan_result__isset;

class TabletClientService_continueScan_result {
 public:

  TabletClientService_continueScan_result(const TabletClientService_continueScan_result&);
  TabletClientService_continueScan_result& operator=(const TabletClientService_continueScan_result&);
  TabletClientService_continueScan_result() {
  }

  virtual ~TabletClientService_continueScan_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult success;
  NoSuchScanIDException nssi;
  NotServingTabletException nste;
  TooManyFilesException tmfe;
  TSampleNotPresentException tsnpe;

  _TabletClientService_continueScan_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& val);

  void __set_nssi(const NoSuchScanIDException& val);

  void __set_nste(const NotServingTabletException& val);

  void __set_tmfe(const TooManyFilesException& val);

  void __set_tsnpe(const TSampleNotPresentException& val);

  bool operator == (const TabletClientService_continueScan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(nssi == rhs.nssi))
      return false;
    if (!(nste == rhs.nste))
      return false;
    if (!(tmfe == rhs.tmfe))
      return false;
    if (!(tsnpe == rhs.tsnpe))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_continueScan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_continueScan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_continueScan_presult__isset {
  _TabletClientService_continueScan_presult__isset() : success(false), nssi(false), nste(false), tmfe(false), tsnpe(false) {}
  bool success :1;
  bool nssi :1;
  bool nste :1;
  bool tmfe :1;
  bool tsnpe :1;
} _TabletClientService_continueScan_presult__isset;

class TabletClientService_continueScan_presult {
 public:


  virtual ~TabletClientService_continueScan_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult* success;
  NoSuchScanIDException nssi;
  NotServingTabletException nste;
  TooManyFilesException tmfe;
  TSampleNotPresentException tsnpe;

  _TabletClientService_continueScan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_closeScan_args__isset {
  _TabletClientService_closeScan_args__isset() : tinfo(false), scanID(false) {}
  bool tinfo :1;
  bool scanID :1;
} _TabletClientService_closeScan_args__isset;

class TabletClientService_closeScan_args {
 public:

  TabletClientService_closeScan_args(const TabletClientService_closeScan_args&);
  TabletClientService_closeScan_args& operator=(const TabletClientService_closeScan_args&);
  TabletClientService_closeScan_args() : scanID(0) {
  }

  virtual ~TabletClientService_closeScan_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID;

  _TabletClientService_closeScan_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_scanID(const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID val);

  bool operator == (const TabletClientService_closeScan_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(scanID == rhs.scanID))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_closeScan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_closeScan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_closeScan_pargs {
 public:


  virtual ~TabletClientService_closeScan_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID* scanID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startMultiScan_args__isset {
  _TabletClientService_startMultiScan_args__isset() : tinfo(false), credentials(false), batch(false), columns(false), ssiList(false), ssio(false), authorizations(false), waitForWrites(false), samplerConfig(false), batchTimeOut(false), classLoaderContext(false), executionHints(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool batch :1;
  bool columns :1;
  bool ssiList :1;
  bool ssio :1;
  bool authorizations :1;
  bool waitForWrites :1;
  bool samplerConfig :1;
  bool batchTimeOut :1;
  bool classLoaderContext :1;
  bool executionHints :1;
} _TabletClientService_startMultiScan_args__isset;

class TabletClientService_startMultiScan_args {
 public:

  TabletClientService_startMultiScan_args(const TabletClientService_startMultiScan_args&);
  TabletClientService_startMultiScan_args& operator=(const TabletClientService_startMultiScan_args&);
  TabletClientService_startMultiScan_args() : waitForWrites(0), batchTimeOut(0), classLoaderContext() {
  }

  virtual ~TabletClientService_startMultiScan_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
   ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch batch;
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn>  columns;
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo>  ssiList;
  std::map<std::string, std::map<std::string, std::string> >  ssio;
  std::vector<std::string>  authorizations;
  bool waitForWrites;
  TSamplerConfiguration samplerConfig;
  int64_t batchTimeOut;
  std::string classLoaderContext;
  std::map<std::string, std::string>  executionHints;

  _TabletClientService_startMultiScan_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_batch(const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& val);

  void __set_columns(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & val);

  void __set_ssiList(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & val);

  void __set_ssio(const std::map<std::string, std::map<std::string, std::string> > & val);

  void __set_authorizations(const std::vector<std::string> & val);

  void __set_waitForWrites(const bool val);

  void __set_samplerConfig(const TSamplerConfiguration& val);

  void __set_batchTimeOut(const int64_t val);

  void __set_classLoaderContext(const std::string& val);

  void __set_executionHints(const std::map<std::string, std::string> & val);

  bool operator == (const TabletClientService_startMultiScan_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(batch == rhs.batch))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (!(ssiList == rhs.ssiList))
      return false;
    if (!(ssio == rhs.ssio))
      return false;
    if (!(authorizations == rhs.authorizations))
      return false;
    if (!(waitForWrites == rhs.waitForWrites))
      return false;
    if (!(samplerConfig == rhs.samplerConfig))
      return false;
    if (!(batchTimeOut == rhs.batchTimeOut))
      return false;
    if (!(classLoaderContext == rhs.classLoaderContext))
      return false;
    if (!(executionHints == rhs.executionHints))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startMultiScan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startMultiScan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_startMultiScan_pargs {
 public:


  virtual ~TabletClientService_startMultiScan_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch* batch;
  const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> * columns;
  const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> * ssiList;
  const std::map<std::string, std::map<std::string, std::string> > * ssio;
  const std::vector<std::string> * authorizations;
  const bool* waitForWrites;
  const TSamplerConfiguration* samplerConfig;
  const int64_t* batchTimeOut;
  const std::string* classLoaderContext;
  const std::map<std::string, std::string> * executionHints;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startMultiScan_result__isset {
  _TabletClientService_startMultiScan_result__isset() : success(false), sec(false), tsnpe(false) {}
  bool success :1;
  bool sec :1;
  bool tsnpe :1;
} _TabletClientService_startMultiScan_result__isset;

class TabletClientService_startMultiScan_result {
 public:

  TabletClientService_startMultiScan_result(const TabletClientService_startMultiScan_result&);
  TabletClientService_startMultiScan_result& operator=(const TabletClientService_startMultiScan_result&);
  TabletClientService_startMultiScan_result() {
  }

  virtual ~TabletClientService_startMultiScan_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  TSampleNotPresentException tsnpe;

  _TabletClientService_startMultiScan_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  void __set_tsnpe(const TSampleNotPresentException& val);

  bool operator == (const TabletClientService_startMultiScan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    if (!(tsnpe == rhs.tsnpe))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startMultiScan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startMultiScan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startMultiScan_presult__isset {
  _TabletClientService_startMultiScan_presult__isset() : success(false), sec(false), tsnpe(false) {}
  bool success :1;
  bool sec :1;
  bool tsnpe :1;
} _TabletClientService_startMultiScan_presult__isset;

class TabletClientService_startMultiScan_presult {
 public:


  virtual ~TabletClientService_startMultiScan_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  TSampleNotPresentException tsnpe;

  _TabletClientService_startMultiScan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_continueMultiScan_args__isset {
  _TabletClientService_continueMultiScan_args__isset() : tinfo(false), scanID(false) {}
  bool tinfo :1;
  bool scanID :1;
} _TabletClientService_continueMultiScan_args__isset;

class TabletClientService_continueMultiScan_args {
 public:

  TabletClientService_continueMultiScan_args(const TabletClientService_continueMultiScan_args&);
  TabletClientService_continueMultiScan_args& operator=(const TabletClientService_continueMultiScan_args&);
  TabletClientService_continueMultiScan_args() : scanID(0) {
  }

  virtual ~TabletClientService_continueMultiScan_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID;

  _TabletClientService_continueMultiScan_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_scanID(const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID val);

  bool operator == (const TabletClientService_continueMultiScan_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(scanID == rhs.scanID))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_continueMultiScan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_continueMultiScan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_continueMultiScan_pargs {
 public:


  virtual ~TabletClientService_continueMultiScan_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID* scanID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_continueMultiScan_result__isset {
  _TabletClientService_continueMultiScan_result__isset() : success(false), nssi(false), tsnpe(false) {}
  bool success :1;
  bool nssi :1;
  bool tsnpe :1;
} _TabletClientService_continueMultiScan_result__isset;

class TabletClientService_continueMultiScan_result {
 public:

  TabletClientService_continueMultiScan_result(const TabletClientService_continueMultiScan_result&);
  TabletClientService_continueMultiScan_result& operator=(const TabletClientService_continueMultiScan_result&);
  TabletClientService_continueMultiScan_result() {
  }

  virtual ~TabletClientService_continueMultiScan_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult success;
  NoSuchScanIDException nssi;
  TSampleNotPresentException tsnpe;

  _TabletClientService_continueMultiScan_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& val);

  void __set_nssi(const NoSuchScanIDException& val);

  void __set_tsnpe(const TSampleNotPresentException& val);

  bool operator == (const TabletClientService_continueMultiScan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(nssi == rhs.nssi))
      return false;
    if (!(tsnpe == rhs.tsnpe))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_continueMultiScan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_continueMultiScan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_continueMultiScan_presult__isset {
  _TabletClientService_continueMultiScan_presult__isset() : success(false), nssi(false), tsnpe(false) {}
  bool success :1;
  bool nssi :1;
  bool tsnpe :1;
} _TabletClientService_continueMultiScan_presult__isset;

class TabletClientService_continueMultiScan_presult {
 public:


  virtual ~TabletClientService_continueMultiScan_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult* success;
  NoSuchScanIDException nssi;
  TSampleNotPresentException tsnpe;

  _TabletClientService_continueMultiScan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_closeMultiScan_args__isset {
  _TabletClientService_closeMultiScan_args__isset() : tinfo(false), scanID(false) {}
  bool tinfo :1;
  bool scanID :1;
} _TabletClientService_closeMultiScan_args__isset;

class TabletClientService_closeMultiScan_args {
 public:

  TabletClientService_closeMultiScan_args(const TabletClientService_closeMultiScan_args&);
  TabletClientService_closeMultiScan_args& operator=(const TabletClientService_closeMultiScan_args&);
  TabletClientService_closeMultiScan_args() : scanID(0) {
  }

  virtual ~TabletClientService_closeMultiScan_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID;

  _TabletClientService_closeMultiScan_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_scanID(const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID val);

  bool operator == (const TabletClientService_closeMultiScan_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(scanID == rhs.scanID))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_closeMultiScan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_closeMultiScan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_closeMultiScan_pargs {
 public:


  virtual ~TabletClientService_closeMultiScan_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID* scanID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_closeMultiScan_result__isset {
  _TabletClientService_closeMultiScan_result__isset() : nssi(false) {}
  bool nssi :1;
} _TabletClientService_closeMultiScan_result__isset;

class TabletClientService_closeMultiScan_result {
 public:

  TabletClientService_closeMultiScan_result(const TabletClientService_closeMultiScan_result&);
  TabletClientService_closeMultiScan_result& operator=(const TabletClientService_closeMultiScan_result&);
  TabletClientService_closeMultiScan_result() {
  }

  virtual ~TabletClientService_closeMultiScan_result() throw();
  NoSuchScanIDException nssi;

  _TabletClientService_closeMultiScan_result__isset __isset;

  void __set_nssi(const NoSuchScanIDException& val);

  bool operator == (const TabletClientService_closeMultiScan_result & rhs) const
  {
    if (!(nssi == rhs.nssi))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_closeMultiScan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_closeMultiScan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_closeMultiScan_presult__isset {
  _TabletClientService_closeMultiScan_presult__isset() : nssi(false) {}
  bool nssi :1;
} _TabletClientService_closeMultiScan_presult__isset;

class TabletClientService_closeMultiScan_presult {
 public:


  virtual ~TabletClientService_closeMultiScan_presult() throw();
  NoSuchScanIDException nssi;

  _TabletClientService_closeMultiScan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_startUpdate_args__isset {
  _TabletClientService_startUpdate_args__isset() : tinfo(false), credentials(false), durability(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool durability :1;
} _TabletClientService_startUpdate_args__isset;

class TabletClientService_startUpdate_args {
 public:

  TabletClientService_startUpdate_args(const TabletClientService_startUpdate_args&);
  TabletClientService_startUpdate_args& operator=(const TabletClientService_startUpdate_args&);
  TabletClientService_startUpdate_args() : durability((TDurability::type)0) {
  }

  virtual ~TabletClientService_startUpdate_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  TDurability::type durability;

  _TabletClientService_startUpdate_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_durability(const TDurability::type val);

  bool operator == (const TabletClientService_startUpdate_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(durability == rhs.durability))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_startUpdate_pargs {
 public:


  virtual ~TabletClientService_startUpdate_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const TDurability::type* durability;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startUpdate_result__isset {
  _TabletClientService_startUpdate_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startUpdate_result__isset;

class TabletClientService_startUpdate_result {
 public:

  TabletClientService_startUpdate_result(const TabletClientService_startUpdate_result&);
  TabletClientService_startUpdate_result& operator=(const TabletClientService_startUpdate_result&);
  TabletClientService_startUpdate_result() : success(0) {
  }

  virtual ~TabletClientService_startUpdate_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startUpdate_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_startUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startUpdate_presult__isset {
  _TabletClientService_startUpdate_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startUpdate_presult__isset;

class TabletClientService_startUpdate_presult {
 public:


  virtual ~TabletClientService_startUpdate_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_applyUpdates_args__isset {
  _TabletClientService_applyUpdates_args__isset() : tinfo(false), updateID(false), keyExtent(false), mutations(false) {}
  bool tinfo :1;
  bool updateID :1;
  bool keyExtent :1;
  bool mutations :1;
} _TabletClientService_applyUpdates_args__isset;

class TabletClientService_applyUpdates_args {
 public:

  TabletClientService_applyUpdates_args(const TabletClientService_applyUpdates_args&);
  TabletClientService_applyUpdates_args& operator=(const TabletClientService_applyUpdates_args&);
  TabletClientService_applyUpdates_args() : updateID(0) {
  }

  virtual ~TabletClientService_applyUpdates_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent keyExtent;
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation>  mutations;

  _TabletClientService_applyUpdates_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_updateID(const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID val);

  void __set_keyExtent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  void __set_mutations(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & val);

  bool operator == (const TabletClientService_applyUpdates_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(updateID == rhs.updateID))
      return false;
    if (!(keyExtent == rhs.keyExtent))
      return false;
    if (!(mutations == rhs.mutations))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_applyUpdates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_applyUpdates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_applyUpdates_pargs {
 public:


  virtual ~TabletClientService_applyUpdates_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID* updateID;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* keyExtent;
  const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> * mutations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_closeUpdate_args__isset {
  _TabletClientService_closeUpdate_args__isset() : tinfo(false), updateID(false) {}
  bool tinfo :1;
  bool updateID :1;
} _TabletClientService_closeUpdate_args__isset;

class TabletClientService_closeUpdate_args {
 public:

  TabletClientService_closeUpdate_args(const TabletClientService_closeUpdate_args&);
  TabletClientService_closeUpdate_args& operator=(const TabletClientService_closeUpdate_args&);
  TabletClientService_closeUpdate_args() : updateID(0) {
  }

  virtual ~TabletClientService_closeUpdate_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID;

  _TabletClientService_closeUpdate_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_updateID(const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID val);

  bool operator == (const TabletClientService_closeUpdate_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(updateID == rhs.updateID))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_closeUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_closeUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_closeUpdate_pargs {
 public:


  virtual ~TabletClientService_closeUpdate_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID* updateID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_closeUpdate_result__isset {
  _TabletClientService_closeUpdate_result__isset() : success(false), nssi(false) {}
  bool success :1;
  bool nssi :1;
} _TabletClientService_closeUpdate_result__isset;

class TabletClientService_closeUpdate_result {
 public:

  TabletClientService_closeUpdate_result(const TabletClientService_closeUpdate_result&);
  TabletClientService_closeUpdate_result& operator=(const TabletClientService_closeUpdate_result&);
  TabletClientService_closeUpdate_result() {
  }

  virtual ~TabletClientService_closeUpdate_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors success;
  NoSuchScanIDException nssi;

  _TabletClientService_closeUpdate_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& val);

  void __set_nssi(const NoSuchScanIDException& val);

  bool operator == (const TabletClientService_closeUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(nssi == rhs.nssi))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_closeUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_closeUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_closeUpdate_presult__isset {
  _TabletClientService_closeUpdate_presult__isset() : success(false), nssi(false) {}
  bool success :1;
  bool nssi :1;
} _TabletClientService_closeUpdate_presult__isset;

class TabletClientService_closeUpdate_presult {
 public:


  virtual ~TabletClientService_closeUpdate_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors* success;
  NoSuchScanIDException nssi;

  _TabletClientService_closeUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_update_args__isset {
  _TabletClientService_update_args__isset() : tinfo(false), credentials(false), keyExtent(false), mutation(false), durability(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool keyExtent :1;
  bool mutation :1;
  bool durability :1;
} _TabletClientService_update_args__isset;

class TabletClientService_update_args {
 public:

  TabletClientService_update_args(const TabletClientService_update_args&);
  TabletClientService_update_args& operator=(const TabletClientService_update_args&);
  TabletClientService_update_args() : durability((TDurability::type)0) {
  }

  virtual ~TabletClientService_update_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent keyExtent;
   ::org::apache::accumulov2::core::dataImpl::thrift::TMutation mutation;
  TDurability::type durability;

  _TabletClientService_update_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_keyExtent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  void __set_mutation(const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& val);

  void __set_durability(const TDurability::type val);

  bool operator == (const TabletClientService_update_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(keyExtent == rhs.keyExtent))
      return false;
    if (!(mutation == rhs.mutation))
      return false;
    if (!(durability == rhs.durability))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_update_pargs {
 public:


  virtual ~TabletClientService_update_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* keyExtent;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation* mutation;
  const TDurability::type* durability;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_update_result__isset {
  _TabletClientService_update_result__isset() : sec(false), nste(false), cve(false) {}
  bool sec :1;
  bool nste :1;
  bool cve :1;
} _TabletClientService_update_result__isset;

class TabletClientService_update_result {
 public:

  TabletClientService_update_result(const TabletClientService_update_result&);
  TabletClientService_update_result& operator=(const TabletClientService_update_result&);
  TabletClientService_update_result() {
  }

  virtual ~TabletClientService_update_result() throw();
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  NotServingTabletException nste;
  ConstraintViolationException cve;

  _TabletClientService_update_result__isset __isset;

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  void __set_nste(const NotServingTabletException& val);

  void __set_cve(const ConstraintViolationException& val);

  bool operator == (const TabletClientService_update_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(nste == rhs.nste))
      return false;
    if (!(cve == rhs.cve))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_update_presult__isset {
  _TabletClientService_update_presult__isset() : sec(false), nste(false), cve(false) {}
  bool sec :1;
  bool nste :1;
  bool cve :1;
} _TabletClientService_update_presult__isset;

class TabletClientService_update_presult {
 public:


  virtual ~TabletClientService_update_presult() throw();
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  NotServingTabletException nste;
  ConstraintViolationException cve;

  _TabletClientService_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_startConditionalUpdate_args__isset {
  _TabletClientService_startConditionalUpdate_args__isset() : tinfo(false), credentials(false), authorizations(false), tableID(false), durability(false), classLoaderContext(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool authorizations :1;
  bool tableID :1;
  bool durability :1;
  bool classLoaderContext :1;
} _TabletClientService_startConditionalUpdate_args__isset;

class TabletClientService_startConditionalUpdate_args {
 public:

  TabletClientService_startConditionalUpdate_args(const TabletClientService_startConditionalUpdate_args&);
  TabletClientService_startConditionalUpdate_args& operator=(const TabletClientService_startConditionalUpdate_args&);
  TabletClientService_startConditionalUpdate_args() : tableID(), durability((TDurability::type)0), classLoaderContext() {
  }

  virtual ~TabletClientService_startConditionalUpdate_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::vector<std::string>  authorizations;
  std::string tableID;
  TDurability::type durability;
  std::string classLoaderContext;

  _TabletClientService_startConditionalUpdate_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_authorizations(const std::vector<std::string> & val);

  void __set_tableID(const std::string& val);

  void __set_durability(const TDurability::type val);

  void __set_classLoaderContext(const std::string& val);

  bool operator == (const TabletClientService_startConditionalUpdate_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(authorizations == rhs.authorizations))
      return false;
    if (!(tableID == rhs.tableID))
      return false;
    if (!(durability == rhs.durability))
      return false;
    if (!(classLoaderContext == rhs.classLoaderContext))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startConditionalUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startConditionalUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_startConditionalUpdate_pargs {
 public:


  virtual ~TabletClientService_startConditionalUpdate_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::vector<std::string> * authorizations;
  const std::string* tableID;
  const TDurability::type* durability;
  const std::string* classLoaderContext;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startConditionalUpdate_result__isset {
  _TabletClientService_startConditionalUpdate_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startConditionalUpdate_result__isset;

class TabletClientService_startConditionalUpdate_result {
 public:

  TabletClientService_startConditionalUpdate_result(const TabletClientService_startConditionalUpdate_result&);
  TabletClientService_startConditionalUpdate_result& operator=(const TabletClientService_startConditionalUpdate_result&);
  TabletClientService_startConditionalUpdate_result() {
  }

  virtual ~TabletClientService_startConditionalUpdate_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startConditionalUpdate_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_startConditionalUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startConditionalUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startConditionalUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startConditionalUpdate_presult__isset {
  _TabletClientService_startConditionalUpdate_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startConditionalUpdate_presult__isset;

class TabletClientService_startConditionalUpdate_presult {
 public:


  virtual ~TabletClientService_startConditionalUpdate_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startConditionalUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_conditionalUpdate_args__isset {
  _TabletClientService_conditionalUpdate_args__isset() : tinfo(false), sessID(false), mutations(false), symbols(false) {}
  bool tinfo :1;
  bool sessID :1;
  bool mutations :1;
  bool symbols :1;
} _TabletClientService_conditionalUpdate_args__isset;

class TabletClientService_conditionalUpdate_args {
 public:

  TabletClientService_conditionalUpdate_args(const TabletClientService_conditionalUpdate_args&);
  TabletClientService_conditionalUpdate_args& operator=(const TabletClientService_conditionalUpdate_args&);
  TabletClientService_conditionalUpdate_args() : sessID(0) {
  }

  virtual ~TabletClientService_conditionalUpdate_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID;
   ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch mutations;
  std::vector<std::string>  symbols;

  _TabletClientService_conditionalUpdate_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_sessID(const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID val);

  void __set_mutations(const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& val);

  void __set_symbols(const std::vector<std::string> & val);

  bool operator == (const TabletClientService_conditionalUpdate_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(sessID == rhs.sessID))
      return false;
    if (!(mutations == rhs.mutations))
      return false;
    if (!(symbols == rhs.symbols))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_conditionalUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_conditionalUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_conditionalUpdate_pargs {
 public:


  virtual ~TabletClientService_conditionalUpdate_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID* sessID;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch* mutations;
  const std::vector<std::string> * symbols;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_conditionalUpdate_result__isset {
  _TabletClientService_conditionalUpdate_result__isset() : success(false), nssi(false) {}
  bool success :1;
  bool nssi :1;
} _TabletClientService_conditionalUpdate_result__isset;

class TabletClientService_conditionalUpdate_result {
 public:

  TabletClientService_conditionalUpdate_result(const TabletClientService_conditionalUpdate_result&);
  TabletClientService_conditionalUpdate_result& operator=(const TabletClientService_conditionalUpdate_result&);
  TabletClientService_conditionalUpdate_result() {
  }

  virtual ~TabletClientService_conditionalUpdate_result() throw();
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult>  success;
  NoSuchScanIDException nssi;

  _TabletClientService_conditionalUpdate_result__isset __isset;

  void __set_success(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & val);

  void __set_nssi(const NoSuchScanIDException& val);

  bool operator == (const TabletClientService_conditionalUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(nssi == rhs.nssi))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_conditionalUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_conditionalUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_conditionalUpdate_presult__isset {
  _TabletClientService_conditionalUpdate_presult__isset() : success(false), nssi(false) {}
  bool success :1;
  bool nssi :1;
} _TabletClientService_conditionalUpdate_presult__isset;

class TabletClientService_conditionalUpdate_presult {
 public:


  virtual ~TabletClientService_conditionalUpdate_presult() throw();
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> * success;
  NoSuchScanIDException nssi;

  _TabletClientService_conditionalUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_invalidateConditionalUpdate_args__isset {
  _TabletClientService_invalidateConditionalUpdate_args__isset() : tinfo(false), sessID(false) {}
  bool tinfo :1;
  bool sessID :1;
} _TabletClientService_invalidateConditionalUpdate_args__isset;

class TabletClientService_invalidateConditionalUpdate_args {
 public:

  TabletClientService_invalidateConditionalUpdate_args(const TabletClientService_invalidateConditionalUpdate_args&);
  TabletClientService_invalidateConditionalUpdate_args& operator=(const TabletClientService_invalidateConditionalUpdate_args&);
  TabletClientService_invalidateConditionalUpdate_args() : sessID(0) {
  }

  virtual ~TabletClientService_invalidateConditionalUpdate_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID;

  _TabletClientService_invalidateConditionalUpdate_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_sessID(const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID val);

  bool operator == (const TabletClientService_invalidateConditionalUpdate_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(sessID == rhs.sessID))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_invalidateConditionalUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_invalidateConditionalUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_invalidateConditionalUpdate_pargs {
 public:


  virtual ~TabletClientService_invalidateConditionalUpdate_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID* sessID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_invalidateConditionalUpdate_result {
 public:

  TabletClientService_invalidateConditionalUpdate_result(const TabletClientService_invalidateConditionalUpdate_result&);
  TabletClientService_invalidateConditionalUpdate_result& operator=(const TabletClientService_invalidateConditionalUpdate_result&);
  TabletClientService_invalidateConditionalUpdate_result() {
  }

  virtual ~TabletClientService_invalidateConditionalUpdate_result() throw();

  bool operator == (const TabletClientService_invalidateConditionalUpdate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TabletClientService_invalidateConditionalUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_invalidateConditionalUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_invalidateConditionalUpdate_presult {
 public:


  virtual ~TabletClientService_invalidateConditionalUpdate_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_closeConditionalUpdate_args__isset {
  _TabletClientService_closeConditionalUpdate_args__isset() : tinfo(false), sessID(false) {}
  bool tinfo :1;
  bool sessID :1;
} _TabletClientService_closeConditionalUpdate_args__isset;

class TabletClientService_closeConditionalUpdate_args {
 public:

  TabletClientService_closeConditionalUpdate_args(const TabletClientService_closeConditionalUpdate_args&);
  TabletClientService_closeConditionalUpdate_args& operator=(const TabletClientService_closeConditionalUpdate_args&);
  TabletClientService_closeConditionalUpdate_args() : sessID(0) {
  }

  virtual ~TabletClientService_closeConditionalUpdate_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID;

  _TabletClientService_closeConditionalUpdate_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_sessID(const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID val);

  bool operator == (const TabletClientService_closeConditionalUpdate_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(sessID == rhs.sessID))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_closeConditionalUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_closeConditionalUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_closeConditionalUpdate_pargs {
 public:


  virtual ~TabletClientService_closeConditionalUpdate_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID* sessID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_bulkImport_args__isset {
  _TabletClientService_bulkImport_args__isset() : tinfo(false), credentials(false), tid(false), files(false), setTime(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool tid :1;
  bool files :1;
  bool setTime :1;
} _TabletClientService_bulkImport_args__isset;

class TabletClientService_bulkImport_args {
 public:

  TabletClientService_bulkImport_args(const TabletClientService_bulkImport_args&);
  TabletClientService_bulkImport_args& operator=(const TabletClientService_bulkImport_args&);
  TabletClientService_bulkImport_args() : tid(0), setTime(0) {
  }

  virtual ~TabletClientService_bulkImport_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  int64_t tid;
   ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles files;
  bool setTime;

  _TabletClientService_bulkImport_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_tid(const int64_t val);

  void __set_files(const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& val);

  void __set_setTime(const bool val);

  bool operator == (const TabletClientService_bulkImport_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (!(files == rhs.files))
      return false;
    if (!(setTime == rhs.setTime))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_bulkImport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_bulkImport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_bulkImport_pargs {
 public:


  virtual ~TabletClientService_bulkImport_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const int64_t* tid;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles* files;
  const bool* setTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_bulkImport_result__isset {
  _TabletClientService_bulkImport_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_bulkImport_result__isset;

class TabletClientService_bulkImport_result {
 public:

  TabletClientService_bulkImport_result(const TabletClientService_bulkImport_result&);
  TabletClientService_bulkImport_result& operator=(const TabletClientService_bulkImport_result&);
  TabletClientService_bulkImport_result() {
  }

  virtual ~TabletClientService_bulkImport_result() throw();
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent>  success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_bulkImport_result__isset __isset;

  void __set_success(const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_bulkImport_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_bulkImport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_bulkImport_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_bulkImport_presult__isset {
  _TabletClientService_bulkImport_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_bulkImport_presult__isset;

class TabletClientService_bulkImport_presult {
 public:


  virtual ~TabletClientService_bulkImport_presult() throw();
  std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> * success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_bulkImport_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_loadFiles_args__isset {
  _TabletClientService_loadFiles_args__isset() : tinfo(false), credentials(false), tid(false), dir(false), files(false), setTime(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool tid :1;
  bool dir :1;
  bool files :1;
  bool setTime :1;
} _TabletClientService_loadFiles_args__isset;

class TabletClientService_loadFiles_args {
 public:

  TabletClientService_loadFiles_args(const TabletClientService_loadFiles_args&);
  TabletClientService_loadFiles_args& operator=(const TabletClientService_loadFiles_args&);
  TabletClientService_loadFiles_args() : tid(0), dir(), setTime(0) {
  }

  virtual ~TabletClientService_loadFiles_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  int64_t tid;
  std::string dir;
  std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> >  files;
  bool setTime;

  _TabletClientService_loadFiles_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_tid(const int64_t val);

  void __set_dir(const std::string& val);

  void __set_files(const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & val);

  void __set_setTime(const bool val);

  bool operator == (const TabletClientService_loadFiles_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(files == rhs.files))
      return false;
    if (!(setTime == rhs.setTime))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_loadFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_loadFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_loadFiles_pargs {
 public:


  virtual ~TabletClientService_loadFiles_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const int64_t* tid;
  const std::string* dir;
  const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > * files;
  const bool* setTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_splitTablet_args__isset {
  _TabletClientService_splitTablet_args__isset() : tinfo(false), credentials(false), extent(false), splitPoint(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool extent :1;
  bool splitPoint :1;
} _TabletClientService_splitTablet_args__isset;

class TabletClientService_splitTablet_args {
 public:

  TabletClientService_splitTablet_args(const TabletClientService_splitTablet_args&);
  TabletClientService_splitTablet_args& operator=(const TabletClientService_splitTablet_args&);
  TabletClientService_splitTablet_args() : splitPoint() {
  }

  virtual ~TabletClientService_splitTablet_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent extent;
  std::string splitPoint;

  _TabletClientService_splitTablet_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_extent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  void __set_splitPoint(const std::string& val);

  bool operator == (const TabletClientService_splitTablet_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(extent == rhs.extent))
      return false;
    if (!(splitPoint == rhs.splitPoint))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_splitTablet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_splitTablet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_splitTablet_pargs {
 public:


  virtual ~TabletClientService_splitTablet_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* extent;
  const std::string* splitPoint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_splitTablet_result__isset {
  _TabletClientService_splitTablet_result__isset() : sec(false), nste(false) {}
  bool sec :1;
  bool nste :1;
} _TabletClientService_splitTablet_result__isset;

class TabletClientService_splitTablet_result {
 public:

  TabletClientService_splitTablet_result(const TabletClientService_splitTablet_result&);
  TabletClientService_splitTablet_result& operator=(const TabletClientService_splitTablet_result&);
  TabletClientService_splitTablet_result() {
  }

  virtual ~TabletClientService_splitTablet_result() throw();
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  NotServingTabletException nste;

  _TabletClientService_splitTablet_result__isset __isset;

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  void __set_nste(const NotServingTabletException& val);

  bool operator == (const TabletClientService_splitTablet_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(nste == rhs.nste))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_splitTablet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_splitTablet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_splitTablet_presult__isset {
  _TabletClientService_splitTablet_presult__isset() : sec(false), nste(false) {}
  bool sec :1;
  bool nste :1;
} _TabletClientService_splitTablet_presult__isset;

class TabletClientService_splitTablet_presult {
 public:


  virtual ~TabletClientService_splitTablet_presult() throw();
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
  NotServingTabletException nste;

  _TabletClientService_splitTablet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_loadTablet_args__isset {
  _TabletClientService_loadTablet_args__isset() : tinfo(false), credentials(false), lock(false), extent(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
  bool extent :1;
} _TabletClientService_loadTablet_args__isset;

class TabletClientService_loadTablet_args {
 public:

  TabletClientService_loadTablet_args(const TabletClientService_loadTablet_args&);
  TabletClientService_loadTablet_args& operator=(const TabletClientService_loadTablet_args&);
  TabletClientService_loadTablet_args() : lock() {
  }

  virtual ~TabletClientService_loadTablet_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent extent;

  _TabletClientService_loadTablet_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  void __set_extent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  bool operator == (const TabletClientService_loadTablet_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    if (!(extent == rhs.extent))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_loadTablet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_loadTablet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_loadTablet_pargs {
 public:


  virtual ~TabletClientService_loadTablet_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* extent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_unloadTablet_args__isset {
  _TabletClientService_unloadTablet_args__isset() : tinfo(false), credentials(false), lock(false), extent(false), goal(false), requestTime(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
  bool extent :1;
  bool goal :1;
  bool requestTime :1;
} _TabletClientService_unloadTablet_args__isset;

class TabletClientService_unloadTablet_args {
 public:

  TabletClientService_unloadTablet_args(const TabletClientService_unloadTablet_args&);
  TabletClientService_unloadTablet_args& operator=(const TabletClientService_unloadTablet_args&);
  TabletClientService_unloadTablet_args() : lock(), goal((TUnloadTabletGoal::type)0), requestTime(0) {
  }

  virtual ~TabletClientService_unloadTablet_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent extent;
  TUnloadTabletGoal::type goal;
  int64_t requestTime;

  _TabletClientService_unloadTablet_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  void __set_extent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  void __set_goal(const TUnloadTabletGoal::type val);

  void __set_requestTime(const int64_t val);

  bool operator == (const TabletClientService_unloadTablet_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    if (!(extent == rhs.extent))
      return false;
    if (!(goal == rhs.goal))
      return false;
    if (!(requestTime == rhs.requestTime))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_unloadTablet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_unloadTablet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_unloadTablet_pargs {
 public:


  virtual ~TabletClientService_unloadTablet_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* extent;
  const TUnloadTabletGoal::type* goal;
  const int64_t* requestTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_flush_args__isset {
  _TabletClientService_flush_args__isset() : tinfo(false), credentials(false), lock(false), tableId(false), startRow(false), endRow(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
  bool tableId :1;
  bool startRow :1;
  bool endRow :1;
} _TabletClientService_flush_args__isset;

class TabletClientService_flush_args {
 public:

  TabletClientService_flush_args(const TabletClientService_flush_args&);
  TabletClientService_flush_args& operator=(const TabletClientService_flush_args&);
  TabletClientService_flush_args() : lock(), tableId(), startRow(), endRow() {
  }

  virtual ~TabletClientService_flush_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;
  std::string tableId;
  std::string startRow;
  std::string endRow;

  _TabletClientService_flush_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  void __set_tableId(const std::string& val);

  void __set_startRow(const std::string& val);

  void __set_endRow(const std::string& val);

  bool operator == (const TabletClientService_flush_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    if (!(tableId == rhs.tableId))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(endRow == rhs.endRow))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_flush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_flush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_flush_pargs {
 public:


  virtual ~TabletClientService_flush_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;
  const std::string* tableId;
  const std::string* startRow;
  const std::string* endRow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_flushTablet_args__isset {
  _TabletClientService_flushTablet_args__isset() : tinfo(false), credentials(false), lock(false), extent(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
  bool extent :1;
} _TabletClientService_flushTablet_args__isset;

class TabletClientService_flushTablet_args {
 public:

  TabletClientService_flushTablet_args(const TabletClientService_flushTablet_args&);
  TabletClientService_flushTablet_args& operator=(const TabletClientService_flushTablet_args&);
  TabletClientService_flushTablet_args() : lock() {
  }

  virtual ~TabletClientService_flushTablet_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent extent;

  _TabletClientService_flushTablet_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  void __set_extent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  bool operator == (const TabletClientService_flushTablet_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    if (!(extent == rhs.extent))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_flushTablet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_flushTablet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_flushTablet_pargs {
 public:


  virtual ~TabletClientService_flushTablet_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* extent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_chop_args__isset {
  _TabletClientService_chop_args__isset() : tinfo(false), credentials(false), lock(false), extent(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
  bool extent :1;
} _TabletClientService_chop_args__isset;

class TabletClientService_chop_args {
 public:

  TabletClientService_chop_args(const TabletClientService_chop_args&);
  TabletClientService_chop_args& operator=(const TabletClientService_chop_args&);
  TabletClientService_chop_args() : lock() {
  }

  virtual ~TabletClientService_chop_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;
   ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent extent;

  _TabletClientService_chop_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  void __set_extent(const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& val);

  bool operator == (const TabletClientService_chop_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    if (!(extent == rhs.extent))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_chop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_chop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_chop_pargs {
 public:


  virtual ~TabletClientService_chop_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent* extent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_compact_args__isset {
  _TabletClientService_compact_args__isset() : tinfo(false), credentials(false), lock(false), tableId(false), startRow(false), endRow(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
  bool tableId :1;
  bool startRow :1;
  bool endRow :1;
} _TabletClientService_compact_args__isset;

class TabletClientService_compact_args {
 public:

  TabletClientService_compact_args(const TabletClientService_compact_args&);
  TabletClientService_compact_args& operator=(const TabletClientService_compact_args&);
  TabletClientService_compact_args() : lock(), tableId(), startRow(), endRow() {
  }

  virtual ~TabletClientService_compact_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;
  std::string tableId;
  std::string startRow;
  std::string endRow;

  _TabletClientService_compact_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  void __set_tableId(const std::string& val);

  void __set_startRow(const std::string& val);

  void __set_endRow(const std::string& val);

  bool operator == (const TabletClientService_compact_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    if (!(tableId == rhs.tableId))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(endRow == rhs.endRow))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_compact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_compact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_compact_pargs {
 public:


  virtual ~TabletClientService_compact_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;
  const std::string* tableId;
  const std::string* startRow;
  const std::string* endRow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getTabletServerStatus_args__isset {
  _TabletClientService_getTabletServerStatus_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo :1;
  bool credentials :1;
} _TabletClientService_getTabletServerStatus_args__isset;

class TabletClientService_getTabletServerStatus_args {
 public:

  TabletClientService_getTabletServerStatus_args(const TabletClientService_getTabletServerStatus_args&);
  TabletClientService_getTabletServerStatus_args& operator=(const TabletClientService_getTabletServerStatus_args&);
  TabletClientService_getTabletServerStatus_args() {
  }

  virtual ~TabletClientService_getTabletServerStatus_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _TabletClientService_getTabletServerStatus_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const TabletClientService_getTabletServerStatus_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getTabletServerStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getTabletServerStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_getTabletServerStatus_pargs {
 public:


  virtual ~TabletClientService_getTabletServerStatus_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getTabletServerStatus_result__isset {
  _TabletClientService_getTabletServerStatus_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getTabletServerStatus_result__isset;

class TabletClientService_getTabletServerStatus_result {
 public:

  TabletClientService_getTabletServerStatus_result(const TabletClientService_getTabletServerStatus_result&);
  TabletClientService_getTabletServerStatus_result& operator=(const TabletClientService_getTabletServerStatus_result&);
  TabletClientService_getTabletServerStatus_result() {
  }

  virtual ~TabletClientService_getTabletServerStatus_result() throw();
   ::org::apache::accumulov2::core::master::thrift::TabletServerStatus success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getTabletServerStatus_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_getTabletServerStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getTabletServerStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getTabletServerStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getTabletServerStatus_presult__isset {
  _TabletClientService_getTabletServerStatus_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getTabletServerStatus_presult__isset;

class TabletClientService_getTabletServerStatus_presult {
 public:


  virtual ~TabletClientService_getTabletServerStatus_presult() throw();
   ::org::apache::accumulov2::core::master::thrift::TabletServerStatus* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getTabletServerStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_getTabletStats_args__isset {
  _TabletClientService_getTabletStats_args__isset() : tinfo(false), credentials(false), tableId(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool tableId :1;
} _TabletClientService_getTabletStats_args__isset;

class TabletClientService_getTabletStats_args {
 public:

  TabletClientService_getTabletStats_args(const TabletClientService_getTabletStats_args&);
  TabletClientService_getTabletStats_args& operator=(const TabletClientService_getTabletStats_args&);
  TabletClientService_getTabletStats_args() : tableId() {
  }

  virtual ~TabletClientService_getTabletStats_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string tableId;

  _TabletClientService_getTabletStats_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_tableId(const std::string& val);

  bool operator == (const TabletClientService_getTabletStats_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tableId == rhs.tableId))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getTabletStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getTabletStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_getTabletStats_pargs {
 public:


  virtual ~TabletClientService_getTabletStats_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* tableId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getTabletStats_result__isset {
  _TabletClientService_getTabletStats_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getTabletStats_result__isset;

class TabletClientService_getTabletStats_result {
 public:

  TabletClientService_getTabletStats_result(const TabletClientService_getTabletStats_result&);
  TabletClientService_getTabletStats_result& operator=(const TabletClientService_getTabletStats_result&);
  TabletClientService_getTabletStats_result() {
  }

  virtual ~TabletClientService_getTabletStats_result() throw();
  std::vector<TabletStats>  success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getTabletStats_result__isset __isset;

  void __set_success(const std::vector<TabletStats> & val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_getTabletStats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getTabletStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getTabletStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getTabletStats_presult__isset {
  _TabletClientService_getTabletStats_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getTabletStats_presult__isset;

class TabletClientService_getTabletStats_presult {
 public:


  virtual ~TabletClientService_getTabletStats_presult() throw();
  std::vector<TabletStats> * success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getTabletStats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_getHistoricalStats_args__isset {
  _TabletClientService_getHistoricalStats_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo :1;
  bool credentials :1;
} _TabletClientService_getHistoricalStats_args__isset;

class TabletClientService_getHistoricalStats_args {
 public:

  TabletClientService_getHistoricalStats_args(const TabletClientService_getHistoricalStats_args&);
  TabletClientService_getHistoricalStats_args& operator=(const TabletClientService_getHistoricalStats_args&);
  TabletClientService_getHistoricalStats_args() {
  }

  virtual ~TabletClientService_getHistoricalStats_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _TabletClientService_getHistoricalStats_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const TabletClientService_getHistoricalStats_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getHistoricalStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getHistoricalStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_getHistoricalStats_pargs {
 public:


  virtual ~TabletClientService_getHistoricalStats_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getHistoricalStats_result__isset {
  _TabletClientService_getHistoricalStats_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getHistoricalStats_result__isset;

class TabletClientService_getHistoricalStats_result {
 public:

  TabletClientService_getHistoricalStats_result(const TabletClientService_getHistoricalStats_result&);
  TabletClientService_getHistoricalStats_result& operator=(const TabletClientService_getHistoricalStats_result&);
  TabletClientService_getHistoricalStats_result() {
  }

  virtual ~TabletClientService_getHistoricalStats_result() throw();
  TabletStats success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getHistoricalStats_result__isset __isset;

  void __set_success(const TabletStats& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_getHistoricalStats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getHistoricalStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getHistoricalStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getHistoricalStats_presult__isset {
  _TabletClientService_getHistoricalStats_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getHistoricalStats_presult__isset;

class TabletClientService_getHistoricalStats_presult {
 public:


  virtual ~TabletClientService_getHistoricalStats_presult() throw();
  TabletStats* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getHistoricalStats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_halt_args__isset {
  _TabletClientService_halt_args__isset() : tinfo(false), credentials(false), lock(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
} _TabletClientService_halt_args__isset;

class TabletClientService_halt_args {
 public:

  TabletClientService_halt_args(const TabletClientService_halt_args&);
  TabletClientService_halt_args& operator=(const TabletClientService_halt_args&);
  TabletClientService_halt_args() : lock() {
  }

  virtual ~TabletClientService_halt_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;

  _TabletClientService_halt_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  bool operator == (const TabletClientService_halt_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_halt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_halt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_halt_pargs {
 public:


  virtual ~TabletClientService_halt_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_halt_result__isset {
  _TabletClientService_halt_result__isset() : sec(false) {}
  bool sec :1;
} _TabletClientService_halt_result__isset;

class TabletClientService_halt_result {
 public:

  TabletClientService_halt_result(const TabletClientService_halt_result&);
  TabletClientService_halt_result& operator=(const TabletClientService_halt_result&);
  TabletClientService_halt_result() {
  }

  virtual ~TabletClientService_halt_result() throw();
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_halt_result__isset __isset;

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_halt_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_halt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_halt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_halt_presult__isset {
  _TabletClientService_halt_presult__isset() : sec(false) {}
  bool sec :1;
} _TabletClientService_halt_presult__isset;

class TabletClientService_halt_presult {
 public:


  virtual ~TabletClientService_halt_presult() throw();
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_halt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_fastHalt_args__isset {
  _TabletClientService_fastHalt_args__isset() : tinfo(false), credentials(false), lock(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool lock :1;
} _TabletClientService_fastHalt_args__isset;

class TabletClientService_fastHalt_args {
 public:

  TabletClientService_fastHalt_args(const TabletClientService_fastHalt_args&);
  TabletClientService_fastHalt_args& operator=(const TabletClientService_fastHalt_args&);
  TabletClientService_fastHalt_args() : lock() {
  }

  virtual ~TabletClientService_fastHalt_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::string lock;

  _TabletClientService_fastHalt_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_lock(const std::string& val);

  bool operator == (const TabletClientService_fastHalt_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(lock == rhs.lock))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_fastHalt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_fastHalt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_fastHalt_pargs {
 public:


  virtual ~TabletClientService_fastHalt_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::string* lock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveScans_args__isset {
  _TabletClientService_getActiveScans_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo :1;
  bool credentials :1;
} _TabletClientService_getActiveScans_args__isset;

class TabletClientService_getActiveScans_args {
 public:

  TabletClientService_getActiveScans_args(const TabletClientService_getActiveScans_args&);
  TabletClientService_getActiveScans_args& operator=(const TabletClientService_getActiveScans_args&);
  TabletClientService_getActiveScans_args() {
  }

  virtual ~TabletClientService_getActiveScans_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _TabletClientService_getActiveScans_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const TabletClientService_getActiveScans_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getActiveScans_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getActiveScans_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_getActiveScans_pargs {
 public:


  virtual ~TabletClientService_getActiveScans_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveScans_result__isset {
  _TabletClientService_getActiveScans_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getActiveScans_result__isset;

class TabletClientService_getActiveScans_result {
 public:

  TabletClientService_getActiveScans_result(const TabletClientService_getActiveScans_result&);
  TabletClientService_getActiveScans_result& operator=(const TabletClientService_getActiveScans_result&);
  TabletClientService_getActiveScans_result() {
  }

  virtual ~TabletClientService_getActiveScans_result() throw();
  std::vector<ActiveScan>  success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getActiveScans_result__isset __isset;

  void __set_success(const std::vector<ActiveScan> & val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_getActiveScans_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getActiveScans_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getActiveScans_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveScans_presult__isset {
  _TabletClientService_getActiveScans_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getActiveScans_presult__isset;

class TabletClientService_getActiveScans_presult {
 public:


  virtual ~TabletClientService_getActiveScans_presult() throw();
  std::vector<ActiveScan> * success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getActiveScans_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_getActiveCompactions_args__isset {
  _TabletClientService_getActiveCompactions_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo :1;
  bool credentials :1;
} _TabletClientService_getActiveCompactions_args__isset;

class TabletClientService_getActiveCompactions_args {
 public:

  TabletClientService_getActiveCompactions_args(const TabletClientService_getActiveCompactions_args&);
  TabletClientService_getActiveCompactions_args& operator=(const TabletClientService_getActiveCompactions_args&);
  TabletClientService_getActiveCompactions_args() {
  }

  virtual ~TabletClientService_getActiveCompactions_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _TabletClientService_getActiveCompactions_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const TabletClientService_getActiveCompactions_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getActiveCompactions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getActiveCompactions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_getActiveCompactions_pargs {
 public:


  virtual ~TabletClientService_getActiveCompactions_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveCompactions_result__isset {
  _TabletClientService_getActiveCompactions_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getActiveCompactions_result__isset;

class TabletClientService_getActiveCompactions_result {
 public:

  TabletClientService_getActiveCompactions_result(const TabletClientService_getActiveCompactions_result&);
  TabletClientService_getActiveCompactions_result& operator=(const TabletClientService_getActiveCompactions_result&);
  TabletClientService_getActiveCompactions_result() {
  }

  virtual ~TabletClientService_getActiveCompactions_result() throw();
  std::vector<ActiveCompaction>  success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getActiveCompactions_result__isset __isset;

  void __set_success(const std::vector<ActiveCompaction> & val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_getActiveCompactions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getActiveCompactions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getActiveCompactions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveCompactions_presult__isset {
  _TabletClientService_getActiveCompactions_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_getActiveCompactions_presult__isset;

class TabletClientService_getActiveCompactions_presult {
 public:


  virtual ~TabletClientService_getActiveCompactions_presult() throw();
  std::vector<ActiveCompaction> * success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_getActiveCompactions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_removeLogs_args__isset {
  _TabletClientService_removeLogs_args__isset() : tinfo(false), credentials(false), filenames(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool filenames :1;
} _TabletClientService_removeLogs_args__isset;

class TabletClientService_removeLogs_args {
 public:

  TabletClientService_removeLogs_args(const TabletClientService_removeLogs_args&);
  TabletClientService_removeLogs_args& operator=(const TabletClientService_removeLogs_args&);
  TabletClientService_removeLogs_args() {
  }

  virtual ~TabletClientService_removeLogs_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
  std::vector<std::string>  filenames;

  _TabletClientService_removeLogs_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_filenames(const std::vector<std::string> & val);

  bool operator == (const TabletClientService_removeLogs_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(filenames == rhs.filenames))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_removeLogs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_removeLogs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_removeLogs_pargs {
 public:


  virtual ~TabletClientService_removeLogs_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const std::vector<std::string> * filenames;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveLogs_args__isset {
  _TabletClientService_getActiveLogs_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo :1;
  bool credentials :1;
} _TabletClientService_getActiveLogs_args__isset;

class TabletClientService_getActiveLogs_args {
 public:

  TabletClientService_getActiveLogs_args(const TabletClientService_getActiveLogs_args&);
  TabletClientService_getActiveLogs_args& operator=(const TabletClientService_getActiveLogs_args&);
  TabletClientService_getActiveLogs_args() {
  }

  virtual ~TabletClientService_getActiveLogs_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;

  _TabletClientService_getActiveLogs_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  bool operator == (const TabletClientService_getActiveLogs_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getActiveLogs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getActiveLogs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_getActiveLogs_pargs {
 public:


  virtual ~TabletClientService_getActiveLogs_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveLogs_result__isset {
  _TabletClientService_getActiveLogs_result__isset() : success(false) {}
  bool success :1;
} _TabletClientService_getActiveLogs_result__isset;

class TabletClientService_getActiveLogs_result {
 public:

  TabletClientService_getActiveLogs_result(const TabletClientService_getActiveLogs_result&);
  TabletClientService_getActiveLogs_result& operator=(const TabletClientService_getActiveLogs_result&);
  TabletClientService_getActiveLogs_result() {
  }

  virtual ~TabletClientService_getActiveLogs_result() throw();
  std::vector<std::string>  success;

  _TabletClientService_getActiveLogs_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TabletClientService_getActiveLogs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_getActiveLogs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_getActiveLogs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_getActiveLogs_presult__isset {
  _TabletClientService_getActiveLogs_presult__isset() : success(false) {}
  bool success :1;
} _TabletClientService_getActiveLogs_presult__isset;

class TabletClientService_getActiveLogs_presult {
 public:


  virtual ~TabletClientService_getActiveLogs_presult() throw();
  std::vector<std::string> * success;

  _TabletClientService_getActiveLogs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_startGetSummaries_args__isset {
  _TabletClientService_startGetSummaries_args__isset() : tinfo(false), credentials(false), request(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool request :1;
} _TabletClientService_startGetSummaries_args__isset;

class TabletClientService_startGetSummaries_args {
 public:

  TabletClientService_startGetSummaries_args(const TabletClientService_startGetSummaries_args&);
  TabletClientService_startGetSummaries_args& operator=(const TabletClientService_startGetSummaries_args&);
  TabletClientService_startGetSummaries_args() {
  }

  virtual ~TabletClientService_startGetSummaries_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest request;

  _TabletClientService_startGetSummaries_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_request(const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& val);

  bool operator == (const TabletClientService_startGetSummaries_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startGetSummaries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startGetSummaries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_startGetSummaries_pargs {
 public:


  virtual ~TabletClientService_startGetSummaries_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startGetSummaries_result__isset {
  _TabletClientService_startGetSummaries_result__isset() : success(false), sec(false), tope(false) {}
  bool success :1;
  bool sec :1;
  bool tope :1;
} _TabletClientService_startGetSummaries_result__isset;

class TabletClientService_startGetSummaries_result {
 public:

  TabletClientService_startGetSummaries_result(const TabletClientService_startGetSummaries_result&);
  TabletClientService_startGetSummaries_result& operator=(const TabletClientService_startGetSummaries_result&);
  TabletClientService_startGetSummaries_result() {
  }

  virtual ~TabletClientService_startGetSummaries_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftTableOperationException tope;

  _TabletClientService_startGetSummaries_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  void __set_tope(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftTableOperationException& val);

  bool operator == (const TabletClientService_startGetSummaries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startGetSummaries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startGetSummaries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startGetSummaries_presult__isset {
  _TabletClientService_startGetSummaries_presult__isset() : success(false), sec(false), tope(false) {}
  bool success :1;
  bool sec :1;
  bool tope :1;
} _TabletClientService_startGetSummaries_presult__isset;

class TabletClientService_startGetSummaries_presult {
 public:


  virtual ~TabletClientService_startGetSummaries_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftTableOperationException tope;

  _TabletClientService_startGetSummaries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_startGetSummariesForPartition_args__isset {
  _TabletClientService_startGetSummariesForPartition_args__isset() : tinfo(false), credentials(false), request(false), modulus(false), remainder(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool request :1;
  bool modulus :1;
  bool remainder :1;
} _TabletClientService_startGetSummariesForPartition_args__isset;

class TabletClientService_startGetSummariesForPartition_args {
 public:

  TabletClientService_startGetSummariesForPartition_args(const TabletClientService_startGetSummariesForPartition_args&);
  TabletClientService_startGetSummariesForPartition_args& operator=(const TabletClientService_startGetSummariesForPartition_args&);
  TabletClientService_startGetSummariesForPartition_args() : modulus(0), remainder(0) {
  }

  virtual ~TabletClientService_startGetSummariesForPartition_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest request;
  int32_t modulus;
  int32_t remainder;

  _TabletClientService_startGetSummariesForPartition_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_request(const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& val);

  void __set_modulus(const int32_t val);

  void __set_remainder(const int32_t val);

  bool operator == (const TabletClientService_startGetSummariesForPartition_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(modulus == rhs.modulus))
      return false;
    if (!(remainder == rhs.remainder))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startGetSummariesForPartition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startGetSummariesForPartition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_startGetSummariesForPartition_pargs {
 public:


  virtual ~TabletClientService_startGetSummariesForPartition_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest* request;
  const int32_t* modulus;
  const int32_t* remainder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startGetSummariesForPartition_result__isset {
  _TabletClientService_startGetSummariesForPartition_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startGetSummariesForPartition_result__isset;

class TabletClientService_startGetSummariesForPartition_result {
 public:

  TabletClientService_startGetSummariesForPartition_result(const TabletClientService_startGetSummariesForPartition_result&);
  TabletClientService_startGetSummariesForPartition_result& operator=(const TabletClientService_startGetSummariesForPartition_result&);
  TabletClientService_startGetSummariesForPartition_result() {
  }

  virtual ~TabletClientService_startGetSummariesForPartition_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startGetSummariesForPartition_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_startGetSummariesForPartition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startGetSummariesForPartition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startGetSummariesForPartition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startGetSummariesForPartition_presult__isset {
  _TabletClientService_startGetSummariesForPartition_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startGetSummariesForPartition_presult__isset;

class TabletClientService_startGetSummariesForPartition_presult {
 public:


  virtual ~TabletClientService_startGetSummariesForPartition_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startGetSummariesForPartition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_startGetSummariesFromFiles_args__isset {
  _TabletClientService_startGetSummariesFromFiles_args__isset() : tinfo(false), credentials(false), request(false), files(false) {}
  bool tinfo :1;
  bool credentials :1;
  bool request :1;
  bool files :1;
} _TabletClientService_startGetSummariesFromFiles_args__isset;

class TabletClientService_startGetSummariesFromFiles_args {
 public:

  TabletClientService_startGetSummariesFromFiles_args(const TabletClientService_startGetSummariesFromFiles_args&);
  TabletClientService_startGetSummariesFromFiles_args& operator=(const TabletClientService_startGetSummariesFromFiles_args&);
  TabletClientService_startGetSummariesFromFiles_args() {
  }

  virtual ~TabletClientService_startGetSummariesFromFiles_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
   ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials credentials;
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest request;
  std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> >  files;

  _TabletClientService_startGetSummariesFromFiles_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_credentials(const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& val);

  void __set_request(const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& val);

  void __set_files(const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & val);

  bool operator == (const TabletClientService_startGetSummariesFromFiles_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startGetSummariesFromFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startGetSummariesFromFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_startGetSummariesFromFiles_pargs {
 public:


  virtual ~TabletClientService_startGetSummariesFromFiles_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials* credentials;
  const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest* request;
  const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > * files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startGetSummariesFromFiles_result__isset {
  _TabletClientService_startGetSummariesFromFiles_result__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startGetSummariesFromFiles_result__isset;

class TabletClientService_startGetSummariesFromFiles_result {
 public:

  TabletClientService_startGetSummariesFromFiles_result(const TabletClientService_startGetSummariesFromFiles_result&);
  TabletClientService_startGetSummariesFromFiles_result& operator=(const TabletClientService_startGetSummariesFromFiles_result&);
  TabletClientService_startGetSummariesFromFiles_result() {
  }

  virtual ~TabletClientService_startGetSummariesFromFiles_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startGetSummariesFromFiles_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& val);

  void __set_sec(const  ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException& val);

  bool operator == (const TabletClientService_startGetSummariesFromFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_startGetSummariesFromFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_startGetSummariesFromFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_startGetSummariesFromFiles_presult__isset {
  _TabletClientService_startGetSummariesFromFiles_presult__isset() : success(false), sec(false) {}
  bool success :1;
  bool sec :1;
} _TabletClientService_startGetSummariesFromFiles_presult__isset;

class TabletClientService_startGetSummariesFromFiles_presult {
 public:


  virtual ~TabletClientService_startGetSummariesFromFiles_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries* success;
   ::org::apache::accumulov2::core::clientImpl::thrift::ThriftSecurityException sec;

  _TabletClientService_startGetSummariesFromFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TabletClientService_contiuneGetSummaries_args__isset {
  _TabletClientService_contiuneGetSummaries_args__isset() : tinfo(false), sessionId(false) {}
  bool tinfo :1;
  bool sessionId :1;
} _TabletClientService_contiuneGetSummaries_args__isset;

class TabletClientService_contiuneGetSummaries_args {
 public:

  TabletClientService_contiuneGetSummaries_args(const TabletClientService_contiuneGetSummaries_args&);
  TabletClientService_contiuneGetSummaries_args& operator=(const TabletClientService_contiuneGetSummaries_args&);
  TabletClientService_contiuneGetSummaries_args() : sessionId(0) {
  }

  virtual ~TabletClientService_contiuneGetSummaries_args() throw();
   ::org::apache::accumulov2::core::trace::thrift::TInfo tinfo;
  int64_t sessionId;

  _TabletClientService_contiuneGetSummaries_args__isset __isset;

  void __set_tinfo(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& val);

  void __set_sessionId(const int64_t val);

  bool operator == (const TabletClientService_contiuneGetSummaries_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_contiuneGetSummaries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_contiuneGetSummaries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TabletClientService_contiuneGetSummaries_pargs {
 public:


  virtual ~TabletClientService_contiuneGetSummaries_pargs() throw();
  const  ::org::apache::accumulov2::core::trace::thrift::TInfo* tinfo;
  const int64_t* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_contiuneGetSummaries_result__isset {
  _TabletClientService_contiuneGetSummaries_result__isset() : success(false), nssi(false) {}
  bool success :1;
  bool nssi :1;
} _TabletClientService_contiuneGetSummaries_result__isset;

class TabletClientService_contiuneGetSummaries_result {
 public:

  TabletClientService_contiuneGetSummaries_result(const TabletClientService_contiuneGetSummaries_result&);
  TabletClientService_contiuneGetSummaries_result& operator=(const TabletClientService_contiuneGetSummaries_result&);
  TabletClientService_contiuneGetSummaries_result() {
  }

  virtual ~TabletClientService_contiuneGetSummaries_result() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries success;
  NoSuchScanIDException nssi;

  _TabletClientService_contiuneGetSummaries_result__isset __isset;

  void __set_success(const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& val);

  void __set_nssi(const NoSuchScanIDException& val);

  bool operator == (const TabletClientService_contiuneGetSummaries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(nssi == rhs.nssi))
      return false;
    return true;
  }
  bool operator != (const TabletClientService_contiuneGetSummaries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletClientService_contiuneGetSummaries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletClientService_contiuneGetSummaries_presult__isset {
  _TabletClientService_contiuneGetSummaries_presult__isset() : success(false), nssi(false) {}
  bool success :1;
  bool nssi :1;
} _TabletClientService_contiuneGetSummaries_presult__isset;

class TabletClientService_contiuneGetSummaries_presult {
 public:


  virtual ~TabletClientService_contiuneGetSummaries_presult() throw();
   ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries* success;
  NoSuchScanIDException nssi;

  _TabletClientService_contiuneGetSummaries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TabletClientServiceClient : virtual public TabletClientServiceIf, public  ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceClient {
 public:
  TabletClientServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceClient(prot, prot) {}
  TabletClientServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void startScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& range, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const int32_t batchSize, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const bool isolated, const int64_t readaheadThreshold, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  void send_startScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& range, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const int32_t batchSize, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const bool isolated, const int64_t readaheadThreshold, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  void recv_startScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& _return);
  void continueScan( ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void send_continueScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void recv_continueScan( ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& _return);
  void closeScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void send_closeScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void startMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& batch, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  void send_startMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& batch, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  void recv_startMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& _return);
  void continueMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void send_continueMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void recv_continueMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& _return);
  void closeMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void send_closeMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void recv_closeMultiScan();
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID startUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const TDurability::type durability);
  void send_startUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const TDurability::type durability);
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID recv_startUpdate();
  void applyUpdates(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & mutations);
  void send_applyUpdates(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & mutations);
  void closeUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID);
  void send_closeUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID);
  void recv_closeUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& _return);
  void update(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& mutation, const TDurability::type durability);
  void send_update(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& mutation, const TDurability::type durability);
  void recv_update();
  void startConditionalUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & authorizations, const std::string& tableID, const TDurability::type durability, const std::string& classLoaderContext);
  void send_startConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & authorizations, const std::string& tableID, const TDurability::type durability, const std::string& classLoaderContext);
  void recv_startConditionalUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& _return);
  void conditionalUpdate(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID, const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& mutations, const std::vector<std::string> & symbols);
  void send_conditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID, const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& mutations, const std::vector<std::string> & symbols);
  void recv_conditionalUpdate(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & _return);
  void invalidateConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  void send_invalidateConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  void recv_invalidateConditionalUpdate();
  void closeConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  void send_closeConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  void bulkImport(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& files, const bool setTime);
  void send_bulkImport(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& files, const bool setTime);
  void recv_bulkImport(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & _return);
  void loadFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const std::string& dir, const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & files, const bool setTime);
  void send_loadFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const std::string& dir, const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & files, const bool setTime);
  void splitTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const std::string& splitPoint);
  void send_splitTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const std::string& splitPoint);
  void recv_splitTablet();
  void loadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void send_loadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void unloadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const TUnloadTabletGoal::type goal, const int64_t requestTime);
  void send_unloadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const TUnloadTabletGoal::type goal, const int64_t requestTime);
  void flush(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void send_flush(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void flushTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void send_flushTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void chop(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void send_chop(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void compact(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void send_compact(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void getTabletServerStatus( ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_getTabletServerStatus(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getTabletServerStatus( ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& _return);
  void getTabletStats(std::vector<TabletStats> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& tableId);
  void send_getTabletStats(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& tableId);
  void recv_getTabletStats(std::vector<TabletStats> & _return);
  void getHistoricalStats(TabletStats& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_getHistoricalStats(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getHistoricalStats(TabletStats& _return);
  void halt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  void send_halt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  void recv_halt();
  void fastHalt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  void send_fastHalt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  void getActiveScans(std::vector<ActiveScan> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_getActiveScans(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getActiveScans(std::vector<ActiveScan> & _return);
  void getActiveCompactions(std::vector<ActiveCompaction> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_getActiveCompactions(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getActiveCompactions(std::vector<ActiveCompaction> & _return);
  void removeLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & filenames);
  void send_removeLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & filenames);
  void getActiveLogs(std::vector<std::string> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void send_getActiveLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getActiveLogs(std::vector<std::string> & _return);
  void startGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request);
  void send_startGetSummaries(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request);
  void recv_startGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return);
  void startGetSummariesForPartition( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const int32_t modulus, const int32_t remainder);
  void send_startGetSummariesForPartition(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const int32_t modulus, const int32_t remainder);
  void recv_startGetSummariesForPartition( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return);
  void startGetSummariesFromFiles( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & files);
  void send_startGetSummariesFromFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & files);
  void recv_startGetSummariesFromFiles( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return);
  void contiuneGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const int64_t sessionId);
  void send_contiuneGetSummaries(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const int64_t sessionId);
  void recv_contiuneGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return);
};

class TabletClientServiceProcessor : public  ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceProcessor {
 protected:
  std::shared_ptr<TabletClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TabletClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_startScan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_continueScan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeScan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startMultiScan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_continueMultiScan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeMultiScan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyUpdates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startConditionalUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_conditionalUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_invalidateConditionalUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeConditionalUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkImport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_splitTablet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadTablet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unloadTablet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flush(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flushTablet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_chop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTabletServerStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTabletStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHistoricalStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_halt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fastHalt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActiveScans(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActiveCompactions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeLogs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActiveLogs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startGetSummaries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startGetSummariesForPartition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startGetSummariesFromFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_contiuneGetSummaries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TabletClientServiceProcessor(std::shared_ptr<TabletClientServiceIf> iface) :
     ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceProcessor(iface),
    iface_(iface) {
    processMap_["startScan"] = &TabletClientServiceProcessor::process_startScan;
    processMap_["continueScan"] = &TabletClientServiceProcessor::process_continueScan;
    processMap_["closeScan"] = &TabletClientServiceProcessor::process_closeScan;
    processMap_["startMultiScan"] = &TabletClientServiceProcessor::process_startMultiScan;
    processMap_["continueMultiScan"] = &TabletClientServiceProcessor::process_continueMultiScan;
    processMap_["closeMultiScan"] = &TabletClientServiceProcessor::process_closeMultiScan;
    processMap_["startUpdate"] = &TabletClientServiceProcessor::process_startUpdate;
    processMap_["applyUpdates"] = &TabletClientServiceProcessor::process_applyUpdates;
    processMap_["closeUpdate"] = &TabletClientServiceProcessor::process_closeUpdate;
    processMap_["update"] = &TabletClientServiceProcessor::process_update;
    processMap_["startConditionalUpdate"] = &TabletClientServiceProcessor::process_startConditionalUpdate;
    processMap_["conditionalUpdate"] = &TabletClientServiceProcessor::process_conditionalUpdate;
    processMap_["invalidateConditionalUpdate"] = &TabletClientServiceProcessor::process_invalidateConditionalUpdate;
    processMap_["closeConditionalUpdate"] = &TabletClientServiceProcessor::process_closeConditionalUpdate;
    processMap_["bulkImport"] = &TabletClientServiceProcessor::process_bulkImport;
    processMap_["loadFiles"] = &TabletClientServiceProcessor::process_loadFiles;
    processMap_["splitTablet"] = &TabletClientServiceProcessor::process_splitTablet;
    processMap_["loadTablet"] = &TabletClientServiceProcessor::process_loadTablet;
    processMap_["unloadTablet"] = &TabletClientServiceProcessor::process_unloadTablet;
    processMap_["flush"] = &TabletClientServiceProcessor::process_flush;
    processMap_["flushTablet"] = &TabletClientServiceProcessor::process_flushTablet;
    processMap_["chop"] = &TabletClientServiceProcessor::process_chop;
    processMap_["compact"] = &TabletClientServiceProcessor::process_compact;
    processMap_["getTabletServerStatus"] = &TabletClientServiceProcessor::process_getTabletServerStatus;
    processMap_["getTabletStats"] = &TabletClientServiceProcessor::process_getTabletStats;
    processMap_["getHistoricalStats"] = &TabletClientServiceProcessor::process_getHistoricalStats;
    processMap_["halt"] = &TabletClientServiceProcessor::process_halt;
    processMap_["fastHalt"] = &TabletClientServiceProcessor::process_fastHalt;
    processMap_["getActiveScans"] = &TabletClientServiceProcessor::process_getActiveScans;
    processMap_["getActiveCompactions"] = &TabletClientServiceProcessor::process_getActiveCompactions;
    processMap_["removeLogs"] = &TabletClientServiceProcessor::process_removeLogs;
    processMap_["getActiveLogs"] = &TabletClientServiceProcessor::process_getActiveLogs;
    processMap_["startGetSummaries"] = &TabletClientServiceProcessor::process_startGetSummaries;
    processMap_["startGetSummariesForPartition"] = &TabletClientServiceProcessor::process_startGetSummariesForPartition;
    processMap_["startGetSummariesFromFiles"] = &TabletClientServiceProcessor::process_startGetSummariesFromFiles;
    processMap_["contiuneGetSummaries"] = &TabletClientServiceProcessor::process_contiuneGetSummaries;
  }

  virtual ~TabletClientServiceProcessor() {}
};

class TabletClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TabletClientServiceProcessorFactory(const std::shared_ptr< TabletClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  std::shared_ptr< TabletClientServiceIfFactory > handlerFactory_;
};

class TabletClientServiceMultiface : virtual public TabletClientServiceIf, public  ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceMultiface {
 public:
  TabletClientServiceMultiface(std::vector<std::shared_ptr<TabletClientServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<TabletClientServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceMultiface::add(*iter);
    }
  }
  virtual ~TabletClientServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TabletClientServiceIf> > ifaces_;
  TabletClientServiceMultiface() {}
  void add(std::shared_ptr<TabletClientServiceIf> iface) {
     ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void startScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& range, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const int32_t batchSize, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const bool isolated, const int64_t readaheadThreshold, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startScan(_return, tinfo, credentials, extent, range, columns, batchSize, ssiList, ssio, authorizations, waitForWrites, isolated, readaheadThreshold, samplerConfig, batchTimeOut, classLoaderContext, executionHints);
    }
    ifaces_[i]->startScan(_return, tinfo, credentials, extent, range, columns, batchSize, ssiList, ssio, authorizations, waitForWrites, isolated, readaheadThreshold, samplerConfig, batchTimeOut, classLoaderContext, executionHints);
    return;
  }

  void continueScan( ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->continueScan(_return, tinfo, scanID);
    }
    ifaces_[i]->continueScan(_return, tinfo, scanID);
    return;
  }

  void closeScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeScan(tinfo, scanID);
    }
    ifaces_[i]->closeScan(tinfo, scanID);
  }

  void startMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& batch, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startMultiScan(_return, tinfo, credentials, batch, columns, ssiList, ssio, authorizations, waitForWrites, samplerConfig, batchTimeOut, classLoaderContext, executionHints);
    }
    ifaces_[i]->startMultiScan(_return, tinfo, credentials, batch, columns, ssiList, ssio, authorizations, waitForWrites, samplerConfig, batchTimeOut, classLoaderContext, executionHints);
    return;
  }

  void continueMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->continueMultiScan(_return, tinfo, scanID);
    }
    ifaces_[i]->continueMultiScan(_return, tinfo, scanID);
    return;
  }

  void closeMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeMultiScan(tinfo, scanID);
    }
    ifaces_[i]->closeMultiScan(tinfo, scanID);
  }

   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID startUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const TDurability::type durability) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startUpdate(tinfo, credentials, durability);
    }
    return ifaces_[i]->startUpdate(tinfo, credentials, durability);
  }

  void applyUpdates(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & mutations) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyUpdates(tinfo, updateID, keyExtent, mutations);
    }
    ifaces_[i]->applyUpdates(tinfo, updateID, keyExtent, mutations);
  }

  void closeUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeUpdate(_return, tinfo, updateID);
    }
    ifaces_[i]->closeUpdate(_return, tinfo, updateID);
    return;
  }

  void update(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& mutation, const TDurability::type durability) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(tinfo, credentials, keyExtent, mutation, durability);
    }
    ifaces_[i]->update(tinfo, credentials, keyExtent, mutation, durability);
  }

  void startConditionalUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & authorizations, const std::string& tableID, const TDurability::type durability, const std::string& classLoaderContext) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startConditionalUpdate(_return, tinfo, credentials, authorizations, tableID, durability, classLoaderContext);
    }
    ifaces_[i]->startConditionalUpdate(_return, tinfo, credentials, authorizations, tableID, durability, classLoaderContext);
    return;
  }

  void conditionalUpdate(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID, const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& mutations, const std::vector<std::string> & symbols) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->conditionalUpdate(_return, tinfo, sessID, mutations, symbols);
    }
    ifaces_[i]->conditionalUpdate(_return, tinfo, sessID, mutations, symbols);
    return;
  }

  void invalidateConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->invalidateConditionalUpdate(tinfo, sessID);
    }
    ifaces_[i]->invalidateConditionalUpdate(tinfo, sessID);
  }

  void closeConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeConditionalUpdate(tinfo, sessID);
    }
    ifaces_[i]->closeConditionalUpdate(tinfo, sessID);
  }

  void bulkImport(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& files, const bool setTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkImport(_return, tinfo, credentials, tid, files, setTime);
    }
    ifaces_[i]->bulkImport(_return, tinfo, credentials, tid, files, setTime);
    return;
  }

  void loadFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const std::string& dir, const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & files, const bool setTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadFiles(tinfo, credentials, tid, dir, files, setTime);
    }
    ifaces_[i]->loadFiles(tinfo, credentials, tid, dir, files, setTime);
  }

  void splitTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const std::string& splitPoint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->splitTablet(tinfo, credentials, extent, splitPoint);
    }
    ifaces_[i]->splitTablet(tinfo, credentials, extent, splitPoint);
  }

  void loadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadTablet(tinfo, credentials, lock, extent);
    }
    ifaces_[i]->loadTablet(tinfo, credentials, lock, extent);
  }

  void unloadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const TUnloadTabletGoal::type goal, const int64_t requestTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unloadTablet(tinfo, credentials, lock, extent, goal, requestTime);
    }
    ifaces_[i]->unloadTablet(tinfo, credentials, lock, extent, goal, requestTime);
  }

  void flush(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flush(tinfo, credentials, lock, tableId, startRow, endRow);
    }
    ifaces_[i]->flush(tinfo, credentials, lock, tableId, startRow, endRow);
  }

  void flushTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flushTablet(tinfo, credentials, lock, extent);
    }
    ifaces_[i]->flushTablet(tinfo, credentials, lock, extent);
  }

  void chop(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->chop(tinfo, credentials, lock, extent);
    }
    ifaces_[i]->chop(tinfo, credentials, lock, extent);
  }

  void compact(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compact(tinfo, credentials, lock, tableId, startRow, endRow);
    }
    ifaces_[i]->compact(tinfo, credentials, lock, tableId, startRow, endRow);
  }

  void getTabletServerStatus( ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTabletServerStatus(_return, tinfo, credentials);
    }
    ifaces_[i]->getTabletServerStatus(_return, tinfo, credentials);
    return;
  }

  void getTabletStats(std::vector<TabletStats> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& tableId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTabletStats(_return, tinfo, credentials, tableId);
    }
    ifaces_[i]->getTabletStats(_return, tinfo, credentials, tableId);
    return;
  }

  void getHistoricalStats(TabletStats& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHistoricalStats(_return, tinfo, credentials);
    }
    ifaces_[i]->getHistoricalStats(_return, tinfo, credentials);
    return;
  }

  void halt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->halt(tinfo, credentials, lock);
    }
    ifaces_[i]->halt(tinfo, credentials, lock);
  }

  void fastHalt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fastHalt(tinfo, credentials, lock);
    }
    ifaces_[i]->fastHalt(tinfo, credentials, lock);
  }

  void getActiveScans(std::vector<ActiveScan> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActiveScans(_return, tinfo, credentials);
    }
    ifaces_[i]->getActiveScans(_return, tinfo, credentials);
    return;
  }

  void getActiveCompactions(std::vector<ActiveCompaction> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActiveCompactions(_return, tinfo, credentials);
    }
    ifaces_[i]->getActiveCompactions(_return, tinfo, credentials);
    return;
  }

  void removeLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & filenames) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeLogs(tinfo, credentials, filenames);
    }
    ifaces_[i]->removeLogs(tinfo, credentials, filenames);
  }

  void getActiveLogs(std::vector<std::string> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActiveLogs(_return, tinfo, credentials);
    }
    ifaces_[i]->getActiveLogs(_return, tinfo, credentials);
    return;
  }

  void startGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startGetSummaries(_return, tinfo, credentials, request);
    }
    ifaces_[i]->startGetSummaries(_return, tinfo, credentials, request);
    return;
  }

  void startGetSummariesForPartition( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const int32_t modulus, const int32_t remainder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startGetSummariesForPartition(_return, tinfo, credentials, request, modulus, remainder);
    }
    ifaces_[i]->startGetSummariesForPartition(_return, tinfo, credentials, request, modulus, remainder);
    return;
  }

  void startGetSummariesFromFiles( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & files) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startGetSummariesFromFiles(_return, tinfo, credentials, request, files);
    }
    ifaces_[i]->startGetSummariesFromFiles(_return, tinfo, credentials, request, files);
    return;
  }

  void contiuneGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const int64_t sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->contiuneGetSummaries(_return, tinfo, sessionId);
    }
    ifaces_[i]->contiuneGetSummaries(_return, tinfo, sessionId);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TabletClientServiceConcurrentClient : virtual public TabletClientServiceIf, public  ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceConcurrentClient {
 public:
  TabletClientServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceConcurrentClient(prot, prot) {}
  TabletClientServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::org::apache::accumulov2::core::clientImpl::thrift::ClientServiceConcurrentClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void startScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& range, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const int32_t batchSize, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const bool isolated, const int64_t readaheadThreshold, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  int32_t send_startScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TRange& range, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const int32_t batchSize, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const bool isolated, const int64_t readaheadThreshold, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  void recv_startScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialScan& _return, const int32_t seqid);
  void continueScan( ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  int32_t send_continueScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void recv_continueScan( ::org::apache::accumulov2::core::dataImpl::thrift::ScanResult& _return, const int32_t seqid);
  void closeScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void send_closeScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void startMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& batch, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  int32_t send_startMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanBatch& batch, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TColumn> & columns, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::IterInfo> & ssiList, const std::map<std::string, std::map<std::string, std::string> > & ssio, const std::vector<std::string> & authorizations, const bool waitForWrites, const TSamplerConfiguration& samplerConfig, const int64_t batchTimeOut, const std::string& classLoaderContext, const std::map<std::string, std::string> & executionHints);
  void recv_startMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::InitialMultiScan& _return, const int32_t seqid);
  void continueMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  int32_t send_continueMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void recv_continueMultiScan( ::org::apache::accumulov2::core::dataImpl::thrift::MultiScanResult& _return, const int32_t seqid);
  void closeMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  int32_t send_closeMultiScan(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::ScanID scanID);
  void recv_closeMultiScan(const int32_t seqid);
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID startUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const TDurability::type durability);
  int32_t send_startUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const TDurability::type durability);
   ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID recv_startUpdate(const int32_t seqid);
  void applyUpdates(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & mutations);
  void send_applyUpdates(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TMutation> & mutations);
  void closeUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID);
  int32_t send_closeUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID updateID);
  void recv_closeUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::UpdateErrors& _return, const int32_t seqid);
  void update(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& mutation, const TDurability::type durability);
  int32_t send_update(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& keyExtent, const  ::org::apache::accumulov2::core::dataImpl::thrift::TMutation& mutation, const TDurability::type durability);
  void recv_update(const int32_t seqid);
  void startConditionalUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & authorizations, const std::string& tableID, const TDurability::type durability, const std::string& classLoaderContext);
  int32_t send_startConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & authorizations, const std::string& tableID, const TDurability::type durability, const std::string& classLoaderContext);
  void recv_startConditionalUpdate( ::org::apache::accumulov2::core::dataImpl::thrift::TConditionalSession& _return, const int32_t seqid);
  void conditionalUpdate(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID, const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& mutations, const std::vector<std::string> & symbols);
  int32_t send_conditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID, const  ::org::apache::accumulov2::core::dataImpl::thrift::CMBatch& mutations, const std::vector<std::string> & symbols);
  void recv_conditionalUpdate(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TCMResult> & _return, const int32_t seqid);
  void invalidateConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  int32_t send_invalidateConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  void recv_invalidateConditionalUpdate(const int32_t seqid);
  void closeConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  void send_closeConditionalUpdate(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::dataImpl::thrift::UpdateID sessID);
  void bulkImport(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& files, const bool setTime);
  int32_t send_bulkImport(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const  ::org::apache::accumulov2::core::dataImpl::thrift::TabletFiles& files, const bool setTime);
  void recv_bulkImport(std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent> & _return, const int32_t seqid);
  void loadFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const std::string& dir, const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & files, const bool setTime);
  void send_loadFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const int64_t tid, const std::string& dir, const std::map< ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent, std::map<std::string,  ::org::apache::accumulov2::core::dataImpl::thrift::MapFileInfo> > & files, const bool setTime);
  void splitTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const std::string& splitPoint);
  int32_t send_splitTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const std::string& splitPoint);
  void recv_splitTablet(const int32_t seqid);
  void loadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void send_loadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void unloadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const TUnloadTabletGoal::type goal, const int64_t requestTime);
  void send_unloadTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent, const TUnloadTabletGoal::type goal, const int64_t requestTime);
  void flush(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void send_flush(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void flushTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void send_flushTablet(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void chop(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void send_chop(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const  ::org::apache::accumulov2::core::dataImpl::thrift::TKeyExtent& extent);
  void compact(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void send_compact(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock, const std::string& tableId, const std::string& startRow, const std::string& endRow);
  void getTabletServerStatus( ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_getTabletServerStatus(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getTabletServerStatus( ::org::apache::accumulov2::core::master::thrift::TabletServerStatus& _return, const int32_t seqid);
  void getTabletStats(std::vector<TabletStats> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& tableId);
  int32_t send_getTabletStats(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& tableId);
  void recv_getTabletStats(std::vector<TabletStats> & _return, const int32_t seqid);
  void getHistoricalStats(TabletStats& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_getHistoricalStats(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getHistoricalStats(TabletStats& _return, const int32_t seqid);
  void halt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  int32_t send_halt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  void recv_halt(const int32_t seqid);
  void fastHalt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  void send_fastHalt(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::string& lock);
  void getActiveScans(std::vector<ActiveScan> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_getActiveScans(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getActiveScans(std::vector<ActiveScan> & _return, const int32_t seqid);
  void getActiveCompactions(std::vector<ActiveCompaction> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_getActiveCompactions(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getActiveCompactions(std::vector<ActiveCompaction> & _return, const int32_t seqid);
  void removeLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & filenames);
  void send_removeLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const std::vector<std::string> & filenames);
  void getActiveLogs(std::vector<std::string> & _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  int32_t send_getActiveLogs(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials);
  void recv_getActiveLogs(std::vector<std::string> & _return, const int32_t seqid);
  void startGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request);
  int32_t send_startGetSummaries(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request);
  void recv_startGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const int32_t seqid);
  void startGetSummariesForPartition( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const int32_t modulus, const int32_t remainder);
  int32_t send_startGetSummariesForPartition(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const int32_t modulus, const int32_t remainder);
  void recv_startGetSummariesForPartition( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const int32_t seqid);
  void startGetSummariesFromFiles( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & files);
  int32_t send_startGetSummariesFromFiles(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const  ::org::apache::accumulov2::core::securityImpl::thrift::TCredentials& credentials, const  ::org::apache::accumulov2::core::dataImpl::thrift::TSummaryRequest& request, const std::map<std::string, std::vector< ::org::apache::accumulov2::core::dataImpl::thrift::TRowRange> > & files);
  void recv_startGetSummariesFromFiles( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const int32_t seqid);
  void contiuneGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const int64_t sessionId);
  int32_t send_contiuneGetSummaries(const  ::org::apache::accumulov2::core::trace::thrift::TInfo& tinfo, const int64_t sessionId);
  void recv_contiuneGetSummaries( ::org::apache::accumulov2::core::dataImpl::thrift::TSummaries& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}}}} // namespace

#endif
