/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef security_TYPES_V2H
#define security_TYPES_V2H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace org { namespace apache { namespace accumulov2 { namespace core { namespace securityImpl { namespace thrift {

class TCredentials;

class TAuthenticationTokenIdentifier;

class TAuthenticationKey;

class TDelegationToken;

class TDelegationTokenConfig;

typedef struct _TCredentials__isset {
  _TCredentials__isset() : principal(false), tokenClassName(false), token(false), instanceId(false) {}
  bool principal :1;
  bool tokenClassName :1;
  bool token :1;
  bool instanceId :1;
} _TCredentials__isset;

class TCredentials : public virtual ::apache::thrift::TBase {
 public:

  TCredentials(const TCredentials&);
  TCredentials& operator=(const TCredentials&);
  TCredentials() : principal(), tokenClassName(), token(), instanceId() {
  }

  virtual ~TCredentials() throw();
  std::string principal;
  std::string tokenClassName;
  std::string token;
  std::string instanceId;

  _TCredentials__isset __isset;

  void __set_principal(const std::string& val);

  void __set_tokenClassName(const std::string& val);

  void __set_token(const std::string& val);

  void __set_instanceId(const std::string& val);

  bool operator == (const TCredentials & rhs) const
  {
    if (!(principal == rhs.principal))
      return false;
    if (!(tokenClassName == rhs.tokenClassName))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const TCredentials &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCredentials & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCredentials &a, TCredentials &b);

std::ostream& operator<<(std::ostream& out, const TCredentials& obj);

typedef struct _TAuthenticationTokenIdentifier__isset {
  _TAuthenticationTokenIdentifier__isset() : principal(false), keyId(false), issueDate(false), expirationDate(false), instanceId(false) {}
  bool principal :1;
  bool keyId :1;
  bool issueDate :1;
  bool expirationDate :1;
  bool instanceId :1;
} _TAuthenticationTokenIdentifier__isset;

class TAuthenticationTokenIdentifier : public virtual ::apache::thrift::TBase {
 public:

  TAuthenticationTokenIdentifier(const TAuthenticationTokenIdentifier&);
  TAuthenticationTokenIdentifier& operator=(const TAuthenticationTokenIdentifier&);
  TAuthenticationTokenIdentifier() : principal(), keyId(0), issueDate(0), expirationDate(0), instanceId() {
  }

  virtual ~TAuthenticationTokenIdentifier() throw();
  std::string principal;
  int32_t keyId;
  int64_t issueDate;
  int64_t expirationDate;
  std::string instanceId;

  _TAuthenticationTokenIdentifier__isset __isset;

  void __set_principal(const std::string& val);

  void __set_keyId(const int32_t val);

  void __set_issueDate(const int64_t val);

  void __set_expirationDate(const int64_t val);

  void __set_instanceId(const std::string& val);

  bool operator == (const TAuthenticationTokenIdentifier & rhs) const
  {
    if (!(principal == rhs.principal))
      return false;
    if (__isset.keyId != rhs.__isset.keyId)
      return false;
    else if (__isset.keyId && !(keyId == rhs.keyId))
      return false;
    if (__isset.issueDate != rhs.__isset.issueDate)
      return false;
    else if (__isset.issueDate && !(issueDate == rhs.issueDate))
      return false;
    if (__isset.expirationDate != rhs.__isset.expirationDate)
      return false;
    else if (__isset.expirationDate && !(expirationDate == rhs.expirationDate))
      return false;
    if (__isset.instanceId != rhs.__isset.instanceId)
      return false;
    else if (__isset.instanceId && !(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const TAuthenticationTokenIdentifier &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAuthenticationTokenIdentifier & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAuthenticationTokenIdentifier &a, TAuthenticationTokenIdentifier &b);

std::ostream& operator<<(std::ostream& out, const TAuthenticationTokenIdentifier& obj);

typedef struct _TAuthenticationKey__isset {
  _TAuthenticationKey__isset() : secret(false), keyId(false), expirationDate(false), creationDate(false) {}
  bool secret :1;
  bool keyId :1;
  bool expirationDate :1;
  bool creationDate :1;
} _TAuthenticationKey__isset;

class TAuthenticationKey : public virtual ::apache::thrift::TBase {
 public:

  TAuthenticationKey(const TAuthenticationKey&);
  TAuthenticationKey& operator=(const TAuthenticationKey&);
  TAuthenticationKey() : secret(), keyId(0), expirationDate(0), creationDate(0) {
  }

  virtual ~TAuthenticationKey() throw();
  std::string secret;
  int32_t keyId;
  int64_t expirationDate;
  int64_t creationDate;

  _TAuthenticationKey__isset __isset;

  void __set_secret(const std::string& val);

  void __set_keyId(const int32_t val);

  void __set_expirationDate(const int64_t val);

  void __set_creationDate(const int64_t val);

  bool operator == (const TAuthenticationKey & rhs) const
  {
    if (!(secret == rhs.secret))
      return false;
    if (__isset.keyId != rhs.__isset.keyId)
      return false;
    else if (__isset.keyId && !(keyId == rhs.keyId))
      return false;
    if (__isset.expirationDate != rhs.__isset.expirationDate)
      return false;
    else if (__isset.expirationDate && !(expirationDate == rhs.expirationDate))
      return false;
    if (__isset.creationDate != rhs.__isset.creationDate)
      return false;
    else if (__isset.creationDate && !(creationDate == rhs.creationDate))
      return false;
    return true;
  }
  bool operator != (const TAuthenticationKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAuthenticationKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAuthenticationKey &a, TAuthenticationKey &b);

std::ostream& operator<<(std::ostream& out, const TAuthenticationKey& obj);

typedef struct _TDelegationToken__isset {
  _TDelegationToken__isset() : password(false), identifier(false) {}
  bool password :1;
  bool identifier :1;
} _TDelegationToken__isset;

class TDelegationToken : public virtual ::apache::thrift::TBase {
 public:

  TDelegationToken(const TDelegationToken&);
  TDelegationToken& operator=(const TDelegationToken&);
  TDelegationToken() : password() {
  }

  virtual ~TDelegationToken() throw();
  std::string password;
  TAuthenticationTokenIdentifier identifier;

  _TDelegationToken__isset __isset;

  void __set_password(const std::string& val);

  void __set_identifier(const TAuthenticationTokenIdentifier& val);

  bool operator == (const TDelegationToken & rhs) const
  {
    if (!(password == rhs.password))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    return true;
  }
  bool operator != (const TDelegationToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDelegationToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDelegationToken &a, TDelegationToken &b);

std::ostream& operator<<(std::ostream& out, const TDelegationToken& obj);

typedef struct _TDelegationTokenConfig__isset {
  _TDelegationTokenConfig__isset() : lifetime(false) {}
  bool lifetime :1;
} _TDelegationTokenConfig__isset;

class TDelegationTokenConfig : public virtual ::apache::thrift::TBase {
 public:

  TDelegationTokenConfig(const TDelegationTokenConfig&);
  TDelegationTokenConfig& operator=(const TDelegationTokenConfig&);
  TDelegationTokenConfig() : lifetime(0) {
  }

  virtual ~TDelegationTokenConfig() throw();
  int64_t lifetime;

  _TDelegationTokenConfig__isset __isset;

  void __set_lifetime(const int64_t val);

  bool operator == (const TDelegationTokenConfig & rhs) const
  {
    if (__isset.lifetime != rhs.__isset.lifetime)
      return false;
    else if (__isset.lifetime && !(lifetime == rhs.lifetime))
      return false;
    return true;
  }
  bool operator != (const TDelegationTokenConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDelegationTokenConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDelegationTokenConfig &a, TDelegationTokenConfig &b);

std::ostream& operator<<(std::ostream& out, const TDelegationTokenConfig& obj);

}}}}}} // namespace

#endif
