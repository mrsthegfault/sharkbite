/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tracer_TYPES_H
#define tracer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace org { namespace apache { namespace accumulo { namespace tracer { namespace thrift {

class Annotation;

class RemoteSpan;

typedef struct _Annotation__isset {
  _Annotation__isset() : time(false), msg(false) {}
  bool time :1;
  bool msg :1;
} _Annotation__isset;

class Annotation {
 public:

  Annotation(const Annotation&);
  Annotation& operator=(const Annotation&);
  Annotation() : time(0), msg() {
  }

  virtual ~Annotation() throw();
  int64_t time;
  std::string msg;

  _Annotation__isset __isset;

  void __set_time(const int64_t val);

  void __set_msg(const std::string& val);

  bool operator == (const Annotation & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Annotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Annotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Annotation &a, Annotation &b);

inline std::ostream& operator<<(std::ostream& out, const Annotation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RemoteSpan__isset {
  _RemoteSpan__isset() : sender(false), svc(false), traceId(false), spanId(false), parentId(false), start(false), stop(false), description(false), data(false), annotations(false) {}
  bool sender :1;
  bool svc :1;
  bool traceId :1;
  bool spanId :1;
  bool parentId :1;
  bool start :1;
  bool stop :1;
  bool description :1;
  bool data :1;
  bool annotations :1;
} _RemoteSpan__isset;

class RemoteSpan {
 public:

  RemoteSpan(const RemoteSpan&);
  RemoteSpan& operator=(const RemoteSpan&);
  RemoteSpan() : sender(), svc(), traceId(0), spanId(0), parentId(0), start(0), stop(0), description() {
  }

  virtual ~RemoteSpan() throw();
  std::string sender;
  std::string svc;
  int64_t traceId;
  int64_t spanId;
  int64_t parentId;
  int64_t start;
  int64_t stop;
  std::string description;
  std::map<std::string, std::string>  data;
  std::vector<Annotation>  annotations;

  _RemoteSpan__isset __isset;

  void __set_sender(const std::string& val);

  void __set_svc(const std::string& val);

  void __set_traceId(const int64_t val);

  void __set_spanId(const int64_t val);

  void __set_parentId(const int64_t val);

  void __set_start(const int64_t val);

  void __set_stop(const int64_t val);

  void __set_description(const std::string& val);

  void __set_data(const std::map<std::string, std::string> & val);

  void __set_annotations(const std::vector<Annotation> & val);

  bool operator == (const RemoteSpan & rhs) const
  {
    if (!(sender == rhs.sender))
      return false;
    if (!(svc == rhs.svc))
      return false;
    if (!(traceId == rhs.traceId))
      return false;
    if (!(spanId == rhs.spanId))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(annotations == rhs.annotations))
      return false;
    return true;
  }
  bool operator != (const RemoteSpan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteSpan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoteSpan &a, RemoteSpan &b);

inline std::ostream& operator<<(std::ostream& out, const RemoteSpan& obj)
{
  obj.printTo(out);
  return out;
}
}}}}} // namespace

#endif
