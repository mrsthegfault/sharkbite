/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "data/extern/thriftv2/security_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace org { namespace apache { namespace accumulov2 { namespace core { namespace securityImpl { namespace thrift {


TCredentials::~TCredentials() throw() {
}


void TCredentials::__set_principal(const std::string& val) {
  this->principal = val;
}

void TCredentials::__set_tokenClassName(const std::string& val) {
  this->tokenClassName = val;
}

void TCredentials::__set_token(const std::string& val) {
  this->token = val;
}

void TCredentials::__set_instanceId(const std::string& val) {
  this->instanceId = val;
}
std::ostream& operator<<(std::ostream& out, const TCredentials& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCredentials::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principal);
          this->__isset.principal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenClassName);
          this->__isset.tokenClassName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->instanceId);
          this->__isset.instanceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TCredentials::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCredentials");

  xfer += oprot->writeFieldBegin("principal", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->principal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenClassName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tokenClassName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("instanceId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->instanceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCredentials &a, TCredentials &b) {
  using ::std::swap;
  swap(a.principal, b.principal);
  swap(a.tokenClassName, b.tokenClassName);
  swap(a.token, b.token);
  swap(a.instanceId, b.instanceId);
  swap(a.__isset, b.__isset);
}

TCredentials::TCredentials(const TCredentials& other0) {
  principal = other0.principal;
  tokenClassName = other0.tokenClassName;
  token = other0.token;
  instanceId = other0.instanceId;
  __isset = other0.__isset;
}
TCredentials& TCredentials::operator=(const TCredentials& other1) {
  principal = other1.principal;
  tokenClassName = other1.tokenClassName;
  token = other1.token;
  instanceId = other1.instanceId;
  __isset = other1.__isset;
  return *this;
}
void TCredentials::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCredentials(";
  out << "principal=" << to_string(principal);
  out << ", " << "tokenClassName=" << to_string(tokenClassName);
  out << ", " << "token=" << to_string(token);
  out << ", " << "instanceId=" << to_string(instanceId);
  out << ")";
}


TAuthenticationTokenIdentifier::~TAuthenticationTokenIdentifier() throw() {
}


void TAuthenticationTokenIdentifier::__set_principal(const std::string& val) {
  this->principal = val;
}

void TAuthenticationTokenIdentifier::__set_keyId(const int32_t val) {
  this->keyId = val;
__isset.keyId = true;
}

void TAuthenticationTokenIdentifier::__set_issueDate(const int64_t val) {
  this->issueDate = val;
__isset.issueDate = true;
}

void TAuthenticationTokenIdentifier::__set_expirationDate(const int64_t val) {
  this->expirationDate = val;
__isset.expirationDate = true;
}

void TAuthenticationTokenIdentifier::__set_instanceId(const std::string& val) {
  this->instanceId = val;
__isset.instanceId = true;
}
std::ostream& operator<<(std::ostream& out, const TAuthenticationTokenIdentifier& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TAuthenticationTokenIdentifier::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principal);
          this->__isset.principal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyId);
          this->__isset.keyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->issueDate);
          this->__isset.issueDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expirationDate);
          this->__isset.expirationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->instanceId);
          this->__isset.instanceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAuthenticationTokenIdentifier::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAuthenticationTokenIdentifier");

  xfer += oprot->writeFieldBegin("principal", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->principal);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.keyId) {
    xfer += oprot->writeFieldBegin("keyId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->keyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.issueDate) {
    xfer += oprot->writeFieldBegin("issueDate", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->issueDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expirationDate) {
    xfer += oprot->writeFieldBegin("expirationDate", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->expirationDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.instanceId) {
    xfer += oprot->writeFieldBegin("instanceId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->instanceId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAuthenticationTokenIdentifier &a, TAuthenticationTokenIdentifier &b) {
  using ::std::swap;
  swap(a.principal, b.principal);
  swap(a.keyId, b.keyId);
  swap(a.issueDate, b.issueDate);
  swap(a.expirationDate, b.expirationDate);
  swap(a.instanceId, b.instanceId);
  swap(a.__isset, b.__isset);
}

TAuthenticationTokenIdentifier::TAuthenticationTokenIdentifier(const TAuthenticationTokenIdentifier& other2) {
  principal = other2.principal;
  keyId = other2.keyId;
  issueDate = other2.issueDate;
  expirationDate = other2.expirationDate;
  instanceId = other2.instanceId;
  __isset = other2.__isset;
}
TAuthenticationTokenIdentifier& TAuthenticationTokenIdentifier::operator=(const TAuthenticationTokenIdentifier& other3) {
  principal = other3.principal;
  keyId = other3.keyId;
  issueDate = other3.issueDate;
  expirationDate = other3.expirationDate;
  instanceId = other3.instanceId;
  __isset = other3.__isset;
  return *this;
}
void TAuthenticationTokenIdentifier::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAuthenticationTokenIdentifier(";
  out << "principal=" << to_string(principal);
  out << ", " << "keyId="; (__isset.keyId ? (out << to_string(keyId)) : (out << "<null>"));
  out << ", " << "issueDate="; (__isset.issueDate ? (out << to_string(issueDate)) : (out << "<null>"));
  out << ", " << "expirationDate="; (__isset.expirationDate ? (out << to_string(expirationDate)) : (out << "<null>"));
  out << ", " << "instanceId="; (__isset.instanceId ? (out << to_string(instanceId)) : (out << "<null>"));
  out << ")";
}


TAuthenticationKey::~TAuthenticationKey() throw() {
}


void TAuthenticationKey::__set_secret(const std::string& val) {
  this->secret = val;
}

void TAuthenticationKey::__set_keyId(const int32_t val) {
  this->keyId = val;
__isset.keyId = true;
}

void TAuthenticationKey::__set_expirationDate(const int64_t val) {
  this->expirationDate = val;
__isset.expirationDate = true;
}

void TAuthenticationKey::__set_creationDate(const int64_t val) {
  this->creationDate = val;
__isset.creationDate = true;
}
std::ostream& operator<<(std::ostream& out, const TAuthenticationKey& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TAuthenticationKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->secret);
          this->__isset.secret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyId);
          this->__isset.keyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expirationDate);
          this->__isset.expirationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAuthenticationKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAuthenticationKey");

  xfer += oprot->writeFieldBegin("secret", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->secret);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.keyId) {
    xfer += oprot->writeFieldBegin("keyId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->keyId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expirationDate) {
    xfer += oprot->writeFieldBegin("expirationDate", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->expirationDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.creationDate) {
    xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->creationDate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAuthenticationKey &a, TAuthenticationKey &b) {
  using ::std::swap;
  swap(a.secret, b.secret);
  swap(a.keyId, b.keyId);
  swap(a.expirationDate, b.expirationDate);
  swap(a.creationDate, b.creationDate);
  swap(a.__isset, b.__isset);
}

TAuthenticationKey::TAuthenticationKey(const TAuthenticationKey& other4) {
  secret = other4.secret;
  keyId = other4.keyId;
  expirationDate = other4.expirationDate;
  creationDate = other4.creationDate;
  __isset = other4.__isset;
}
TAuthenticationKey& TAuthenticationKey::operator=(const TAuthenticationKey& other5) {
  secret = other5.secret;
  keyId = other5.keyId;
  expirationDate = other5.expirationDate;
  creationDate = other5.creationDate;
  __isset = other5.__isset;
  return *this;
}
void TAuthenticationKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAuthenticationKey(";
  out << "secret=" << to_string(secret);
  out << ", " << "keyId="; (__isset.keyId ? (out << to_string(keyId)) : (out << "<null>"));
  out << ", " << "expirationDate="; (__isset.expirationDate ? (out << to_string(expirationDate)) : (out << "<null>"));
  out << ", " << "creationDate="; (__isset.creationDate ? (out << to_string(creationDate)) : (out << "<null>"));
  out << ")";
}


TDelegationToken::~TDelegationToken() throw() {
}


void TDelegationToken::__set_password(const std::string& val) {
  this->password = val;
}

void TDelegationToken::__set_identifier(const TAuthenticationTokenIdentifier& val) {
  this->identifier = val;
}
std::ostream& operator<<(std::ostream& out, const TDelegationToken& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDelegationToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->identifier.read(iprot);
          this->__isset.identifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDelegationToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDelegationToken");

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identifier", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->identifier.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDelegationToken &a, TDelegationToken &b) {
  using ::std::swap;
  swap(a.password, b.password);
  swap(a.identifier, b.identifier);
  swap(a.__isset, b.__isset);
}

TDelegationToken::TDelegationToken(const TDelegationToken& other6) {
  password = other6.password;
  identifier = other6.identifier;
  __isset = other6.__isset;
}
TDelegationToken& TDelegationToken::operator=(const TDelegationToken& other7) {
  password = other7.password;
  identifier = other7.identifier;
  __isset = other7.__isset;
  return *this;
}
void TDelegationToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDelegationToken(";
  out << "password=" << to_string(password);
  out << ", " << "identifier=" << to_string(identifier);
  out << ")";
}


TDelegationTokenConfig::~TDelegationTokenConfig() throw() {
}


void TDelegationTokenConfig::__set_lifetime(const int64_t val) {
  this->lifetime = val;
__isset.lifetime = true;
}
std::ostream& operator<<(std::ostream& out, const TDelegationTokenConfig& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDelegationTokenConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lifetime);
          this->__isset.lifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDelegationTokenConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDelegationTokenConfig");

  if (this->__isset.lifetime) {
    xfer += oprot->writeFieldBegin("lifetime", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->lifetime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDelegationTokenConfig &a, TDelegationTokenConfig &b) {
  using ::std::swap;
  swap(a.lifetime, b.lifetime);
  swap(a.__isset, b.__isset);
}

TDelegationTokenConfig::TDelegationTokenConfig(const TDelegationTokenConfig& other8) {
  lifetime = other8.lifetime;
  __isset = other8.__isset;
}
TDelegationTokenConfig& TDelegationTokenConfig::operator=(const TDelegationTokenConfig& other9) {
  lifetime = other9.lifetime;
  __isset = other9.__isset;
  return *this;
}
void TDelegationTokenConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDelegationTokenConfig(";
  out << "lifetime="; (__isset.lifetime ? (out << to_string(lifetime)) : (out << "<null>"));
  out << ")";
}

}}}}}} // namespace
