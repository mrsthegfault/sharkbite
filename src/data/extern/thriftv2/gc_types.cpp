/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "data/extern/thriftv2/gc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace org { namespace apache { namespace accumulov2 { namespace core { namespace gc { namespace thrift {


GcCycleStats::~GcCycleStats() throw() {
}


void GcCycleStats::__set_started(const int64_t val) {
  this->started = val;
}

void GcCycleStats::__set_finished(const int64_t val) {
  this->finished = val;
}

void GcCycleStats::__set_candidates(const int64_t val) {
  this->candidates = val;
}

void GcCycleStats::__set_inUse(const int64_t val) {
  this->inUse = val;
}

void GcCycleStats::__set_deleted(const int64_t val) {
  this->deleted = val;
}

void GcCycleStats::__set_errors(const int64_t val) {
  this->errors = val;
}
std::ostream& operator<<(std::ostream& out, const GcCycleStats& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GcCycleStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->started);
          this->__isset.started = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finished);
          this->__isset.finished = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->candidates);
          this->__isset.candidates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->inUse);
          this->__isset.inUse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deleted);
          this->__isset.deleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->errors);
          this->__isset.errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GcCycleStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GcCycleStats");

  xfer += oprot->writeFieldBegin("started", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->started);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finished", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->finished);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("candidates", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->candidates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inUse", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->inUse);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deleted", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->deleted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errors", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->errors);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GcCycleStats &a, GcCycleStats &b) {
  using ::std::swap;
  swap(a.started, b.started);
  swap(a.finished, b.finished);
  swap(a.candidates, b.candidates);
  swap(a.inUse, b.inUse);
  swap(a.deleted, b.deleted);
  swap(a.errors, b.errors);
  swap(a.__isset, b.__isset);
}

GcCycleStats::GcCycleStats(const GcCycleStats& other0) {
  started = other0.started;
  finished = other0.finished;
  candidates = other0.candidates;
  inUse = other0.inUse;
  deleted = other0.deleted;
  errors = other0.errors;
  __isset = other0.__isset;
}
GcCycleStats& GcCycleStats::operator=(const GcCycleStats& other1) {
  started = other1.started;
  finished = other1.finished;
  candidates = other1.candidates;
  inUse = other1.inUse;
  deleted = other1.deleted;
  errors = other1.errors;
  __isset = other1.__isset;
  return *this;
}
void GcCycleStats::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GcCycleStats(";
  out << "started=" << to_string(started);
  out << ", " << "finished=" << to_string(finished);
  out << ", " << "candidates=" << to_string(candidates);
  out << ", " << "inUse=" << to_string(inUse);
  out << ", " << "deleted=" << to_string(deleted);
  out << ", " << "errors=" << to_string(errors);
  out << ")";
}


GCStatus::~GCStatus() throw() {
}


void GCStatus::__set_last(const GcCycleStats& val) {
  this->last = val;
}

void GCStatus::__set_lastLog(const GcCycleStats& val) {
  this->lastLog = val;
}

void GCStatus::__set_current(const GcCycleStats& val) {
  this->current = val;
}

void GCStatus::__set_currentLog(const GcCycleStats& val) {
  this->currentLog = val;
}
std::ostream& operator<<(std::ostream& out, const GCStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GCStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->last.read(iprot);
          this->__isset.last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lastLog.read(iprot);
          this->__isset.lastLog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->current.read(iprot);
          this->__isset.current = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->currentLog.read(iprot);
          this->__isset.currentLog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GCStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GCStatus");

  xfer += oprot->writeFieldBegin("last", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->last.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastLog", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->lastLog.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->current.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentLog", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->currentLog.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GCStatus &a, GCStatus &b) {
  using ::std::swap;
  swap(a.last, b.last);
  swap(a.lastLog, b.lastLog);
  swap(a.current, b.current);
  swap(a.currentLog, b.currentLog);
  swap(a.__isset, b.__isset);
}

GCStatus::GCStatus(const GCStatus& other2) {
  last = other2.last;
  lastLog = other2.lastLog;
  current = other2.current;
  currentLog = other2.currentLog;
  __isset = other2.__isset;
}
GCStatus& GCStatus::operator=(const GCStatus& other3) {
  last = other3.last;
  lastLog = other3.lastLog;
  current = other3.current;
  currentLog = other3.currentLog;
  __isset = other3.__isset;
  return *this;
}
void GCStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GCStatus(";
  out << "last=" << to_string(last);
  out << ", " << "lastLog=" << to_string(lastLog);
  out << ", " << "current=" << to_string(current);
  out << ", " << "currentLog=" << to_string(currentLog);
  out << ")";
}

}}}}}} // namespace
