/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "data/extern/thriftv2/trace_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace org { namespace apache { namespace accumulov2 { namespace core { namespace trace { namespace thrift {


TInfo::~TInfo() throw() {
}


void TInfo::__set_traceId(const int64_t val) {
  this->traceId = val;
}

void TInfo::__set_parentId(const int64_t val) {
  this->parentId = val;
}
std::ostream& operator<<(std::ostream& out, const TInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->traceId);
          this->__isset.traceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentId);
          this->__isset.parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TInfo");

  xfer += oprot->writeFieldBegin("traceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->traceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInfo &a, TInfo &b) {
  using ::std::swap;
  swap(a.traceId, b.traceId);
  swap(a.parentId, b.parentId);
  swap(a.__isset, b.__isset);
}

TInfo::TInfo(const TInfo& other0) {
  traceId = other0.traceId;
  parentId = other0.parentId;
  __isset = other0.__isset;
}
TInfo& TInfo::operator=(const TInfo& other1) {
  traceId = other1.traceId;
  parentId = other1.parentId;
  __isset = other1.__isset;
  return *this;
}
void TInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TInfo(";
  out << "traceId=" << to_string(traceId);
  out << ", " << "parentId=" << to_string(parentId);
  out << ")";
}

}}}}}} // namespace
